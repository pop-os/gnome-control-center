From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Thu, 26 Mar 2020 06:41:06 +0100
Subject: user-panel: Don't wait for fprintd on initialization

When opening the user panel we g-c-c performs lots of sync operations that
may cause a noticeable slowdown, especially when a fingerprint device is
available, in fact set_fingerprint_label() call leads to:
  - DBus sync request of the system bus
  - fprintd dbus-activation
    + This leads to sync opening of all the devices, that might also cause
      a slowdown, depending on the devices drivers
  - Dbus sync calls to the device to get the list of enrolled fingerprints

Only after we've a reply, we update the g-c-c UI and continue the execution.

Origin: https://gitlab.gnome.org/GNOME/gnome-control-center/-/merge_requests/727
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/gnome-control-center/+bug/1865845
---
 panels/user-accounts/cc-user-panel.c         |  41 ++++++-
 panels/user-accounts/um-fingerprint-dialog.c | 173 ++++++++++++++++++++-------
 panels/user-accounts/um-fingerprint-dialog.h |  12 +-
 3 files changed, 173 insertions(+), 53 deletions(-)

diff --git a/panels/user-accounts/cc-user-panel.c b/panels/user-accounts/cc-user-panel.c
index 7cd3413..18b70e9 100644
--- a/panels/user-accounts/cc-user-panel.c
+++ b/panels/user-accounts/cc-user-panel.c
@@ -103,6 +103,9 @@ struct _CcUserPanel {
 
         CcAvatarChooser *avatar_chooser;
 
+        gboolean needs_fingerprint_update;
+        GCancellable *fingerprint_cancellable;
+
         gint other_accounts;
 };
 
@@ -851,9 +854,26 @@ show_user (ActUser *user, CcUserPanel *self)
         show = (act_user_get_uid (user) == getuid() &&
                 act_user_is_local_account (user) &&
                 (self->login_screen_settings &&
-                 g_settings_get_boolean (self->login_screen_settings, "enable-fingerprint-authentication")) &&
-                set_fingerprint_label (self->fingerprint_state_label));
-        gtk_widget_set_visible (GTK_WIDGET (self->fingerprint_row), show);
+                 g_settings_get_boolean (self->login_screen_settings,
+                                         "enable-fingerprint-authentication")));
+
+        if (!self->needs_fingerprint_update) {
+                gtk_widget_set_visible (GTK_WIDGET (self->fingerprint_row), show);
+        } else {
+                gtk_widget_set_visible (GTK_WIDGET (self->fingerprint_row), FALSE);
+
+                if (show) {
+                        g_cancellable_cancel (self->fingerprint_cancellable);
+                        g_clear_object (&self->fingerprint_cancellable);
+
+                        self->fingerprint_cancellable = g_cancellable_new ();
+                        self->needs_fingerprint_update = FALSE;
+
+                        set_fingerprint_row (GTK_WIDGET (self->fingerprint_row),
+                                             self->fingerprint_state_label,
+                                             self->fingerprint_cancellable);
+                }
+        }
 
         /* Autologin: show when local account */
         show = act_user_is_local_account (user);
@@ -1088,7 +1108,16 @@ change_fingerprint (CcUserPanel *self)
 
         g_assert (g_strcmp0 (g_get_user_name (), act_user_get_user_name (user)) == 0);
 
-        fingerprint_button_clicked (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self))), self->fingerprint_state_label, user);
+        g_cancellable_cancel (self->fingerprint_cancellable);
+        g_clear_object (&self->fingerprint_cancellable);
+
+        self->fingerprint_cancellable = g_cancellable_new ();
+
+        fingerprint_button_clicked (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self))),
+                                    GTK_WIDGET (self->fingerprint_row),
+                                    self->fingerprint_state_label,
+                                    user,
+                                    self->fingerprint_cancellable);
 }
 
 static void
@@ -1461,6 +1490,7 @@ cc_user_panel_init (CcUserPanel *self)
         gtk_widget_init_template (GTK_WIDGET (self));
 
         self->um = act_user_manager_get_default ();
+        self->needs_fingerprint_update = TRUE;
 
         provider = gtk_css_provider_new ();
         gtk_css_provider_load_from_resource (provider, "/org/gnome/control-center/user-accounts/user-accounts-dialog.css");
@@ -1484,6 +1514,9 @@ cc_user_panel_dispose (GObject *object)
 
         g_clear_object (&self->login_screen_settings);
 
+        g_cancellable_cancel (self->fingerprint_cancellable);
+        g_clear_object (&self->fingerprint_cancellable);
+
         g_clear_pointer ((GtkWidget **)&self->language_chooser, gtk_widget_destroy);
         g_clear_object (&self->permission);
         G_OBJECT_CLASS (cc_user_panel_parent_class)->dispose (object);
diff --git a/panels/user-accounts/um-fingerprint-dialog.c b/panels/user-accounts/um-fingerprint-dialog.c
index ccbec54..d27aa3b 100644
--- a/panels/user-accounts/um-fingerprint-dialog.c
+++ b/panels/user-accounts/um-fingerprint-dialog.c
@@ -45,12 +45,14 @@ enum {
 };
 
 typedef struct {
+        GtkWidget *fingerprint_row;
         GtkLabel *state_label;
 
         GtkWidget *ass;
         GtkBuilder *dialog;
 
         GDBusProxy *device;
+        GCancellable *cancellable;
         gboolean is_swipe;
         int num_enroll_stages;
         int num_stages_done;
@@ -60,16 +62,19 @@ typedef struct {
 } EnrollData;
 
 static void
-ensure_manager (void)
+ensure_manager (GCancellable *cancellable)
 {
         GError *error = NULL;
 
         if (manager != NULL)
                 return;
 
-        connection = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
+        connection = g_bus_get_sync (G_BUS_TYPE_SYSTEM, cancellable, &error);
         if (connection == NULL) {
-                g_warning ("Failed to connect to session bus: %s", error->message);
+                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+                        g_warning ("Failed to connect to session bus: %s",
+                                   error->message);
+                }
                 g_error_free (error);
                 return;
         }
@@ -80,16 +85,19 @@ ensure_manager (void)
                                          "net.reactivated.Fprint",
                                          "/net/reactivated/Fprint/Manager",
                                          "net.reactivated.Fprint.Manager",
-                                         NULL,
+                                         cancellable,
                                          &error);
         if (manager == NULL) {
-                g_warning ("Failed to create fingerprint manager proxy: %s", error->message);
+                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+                        g_warning ("Failed to create fingerprint manager proxy: %s",
+                                   error->message);
+                }
                 g_error_free (error);
         }
 }
 
 static GDBusProxy *
-get_first_device (void)
+get_first_device (GCancellable *cancellable)
 {
         GDBusProxy *device;
         GVariant *result;
@@ -101,7 +109,7 @@ get_first_device (void)
                                          g_variant_new ("()"),
                                          G_DBUS_CALL_FLAGS_NONE,
                                          -1,
-                                         NULL,
+                                         cancellable,
                                          NULL);
         if (result == NULL)
                 return NULL;
@@ -120,10 +128,13 @@ get_first_device (void)
                                         "net.reactivated.Fprint",
                                         device_str,
                                         "net.reactivated.Fprint.Device",
-                                        NULL,
+                                        cancellable,
                                         &error);
         if (device == NULL) {
-                g_warning ("Failed to create fingerprint device proxy: %s", error->message);
+                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+                        g_warning ("Failed to create fingerprint device proxy: %s",
+                                   error->message);
+                }
                 g_error_free (error);
         }
 
@@ -176,28 +187,76 @@ get_error_dialog (const char *title,
         return error_dialog;
 }
 
-gboolean
-set_fingerprint_label (GtkLabel *state_label)
+static void
+set_fingerprint_row_cb (GObject      *source_object,
+                        GAsyncResult *res,
+                        gpointer      user_data)
+{
+        GTask *task;
+        GtkWidget *fingerprint_row;
+        g_autoptr(GtkLabel) state_label = NULL;
+        g_autoptr(GError) error = NULL;
+        gboolean enabled;
+        gboolean visible;
+
+        task = G_TASK (res);
+        fingerprint_row = GTK_WIDGET (source_object);
+        state_label = user_data;
+        enabled = g_task_propagate_boolean (task, &error);
+        visible = TRUE;
+
+        if (error) {
+                visible = FALSE;
+
+                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
+                        g_warning ("Fingerprint row not available: %s",
+                                   error->message);
+                }
+        }
+
+        if (enabled) {
+                is_disable = TRUE;
+                gtk_label_set_text (state_label, _("Enabled"));
+        } else {
+                is_disable = FALSE;
+                gtk_label_set_text (state_label, _("Disabled"));
+        }
+
+        gtk_widget_set_visible (fingerprint_row, visible);
+}
+
+static void
+set_fingerprint_task_func (GTask        *task,
+                           gpointer      source_object,
+                           gpointer      task_data,
+                           GCancellable *cancellable)
 {
         GDBusProxy *device;
         GVariant *result;
         GVariantIter *fingers;
         GError *error = NULL;
 
-        ensure_manager ();
-        if (manager == NULL)
-                return FALSE;
+        ensure_manager (cancellable);
+        if (manager == NULL) {
+                g_task_return_new_error (task, G_IO_ERROR, G_IO_ERROR_FAILED,
+                                         "Impossible to get fprintd manager");
+                return;
+        }
 
-        device = get_first_device ();
-        if (device == NULL)
-                return FALSE;
+        device = get_first_device (cancellable);
+        if (device == NULL) {
+                g_task_return_new_error (task, G_IO_ERROR, G_IO_ERROR_FAILED,
+                                         "Impossible to get fprintd device");
+                return;
+        }
 
-        result = g_dbus_proxy_call_sync (device, "ListEnrolledFingers", g_variant_new ("(s)", ""), G_DBUS_CALL_FLAGS_NONE, -1, NULL, &error);
+        result = g_dbus_proxy_call_sync (device, "ListEnrolledFingers", g_variant_new ("(s)", ""), G_DBUS_CALL_FLAGS_NONE, -1, cancellable, &error);
         if (!result) {
                 if (!g_dbus_error_is_remote_error (error) ||
                     strcmp (g_dbus_error_get_remote_error(error), "net.reactivated.Fprint.Error.NoEnrolledPrints") != 0) {
                         g_object_unref (device);
-                        return FALSE;
+                        g_task_return_error (task, error);
+                        return;
                 }
         }
 
@@ -206,12 +265,13 @@ set_fingerprint_label (GtkLabel *state_label)
         else
                 fingers = NULL;
 
+        if (g_task_return_error_if_cancelled (task))
+                return;
+
         if (fingers == NULL || g_variant_iter_n_children (fingers) == 0) {
-                is_disable = FALSE;
-                gtk_label_set_text (state_label, _("Disabled"));
+                g_task_return_boolean (task, FALSE);
         } else {
-                is_disable = TRUE;
-                gtk_label_set_text (state_label, _("Enabled"));
+                g_task_return_boolean (task, TRUE);
         }
 
         if (result != NULL)
@@ -219,25 +279,35 @@ set_fingerprint_label (GtkLabel *state_label)
         if (fingers != NULL)
                 g_variant_iter_free (fingers);
         g_object_unref (device);
+}
 
-        return TRUE;
+void
+set_fingerprint_row (GtkWidget    *row,
+                     GtkLabel     *state_label,
+                     GCancellable *cancellable)
+{
+        g_autoptr(GTask) task = NULL;
+
+        task = g_task_new (row, cancellable, set_fingerprint_row_cb,
+                           g_object_ref (state_label));
+        g_task_run_in_thread (task, set_fingerprint_task_func);
 }
 
 static void
-delete_fingerprints (void)
+delete_fingerprints (GCancellable *cancellable)
 {
         GDBusProxy *device;
         GVariant *result;
 
-        ensure_manager ();
+        ensure_manager (cancellable);
         if (manager == NULL)
                 return;
 
-        device = get_first_device ();
+        device = get_first_device (cancellable);
         if (device == NULL)
                 return;
 
-        result = g_dbus_proxy_call_sync (device, "DeleteEnrolledFingers", g_variant_new ("(s)", ""), G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
+        result = g_dbus_proxy_call_sync (device, "DeleteEnrolledFingers", g_variant_new ("(s)", ""), G_DBUS_CALL_FLAGS_NONE, -1, cancellable, NULL);
         if (result)
                 g_variant_unref (result);
 
@@ -245,9 +315,11 @@ delete_fingerprints (void)
 }
 
 static void
-delete_fingerprints_question (GtkWindow *parent,
-                              GtkLabel  *state_label,
-                              ActUser   *user)
+delete_fingerprints_question (GtkWindow    *parent,
+                              GtkWidget    *fingerprint_row,
+                              GtkLabel     *state_label,
+                              ActUser      *user,
+                              GCancellable *cancellable)
 {
         GtkWidget *question;
         GtkWidget *button;
@@ -270,8 +342,8 @@ delete_fingerprints_question (GtkWindow *parent,
         gtk_dialog_set_default_response (GTK_DIALOG (question), GTK_RESPONSE_OK);
 
         if (gtk_dialog_run (GTK_DIALOG (question)) == GTK_RESPONSE_OK) {
-                delete_fingerprints ();
-                set_fingerprint_label (state_label);
+                delete_fingerprints (cancellable);
+                set_fingerprint_row (fingerprint_row, state_label, cancellable);
         }
 
         gtk_widget_destroy (question);
@@ -339,6 +411,7 @@ enroll_data_destroy (EnrollData *data)
                 g_free (data->name);
                 g_object_unref (data->device);
                 g_object_unref (data->dialog);
+                g_object_unref (data->cancellable);
                 gtk_widget_destroy (data->ass);
 
                 g_free (data);
@@ -413,10 +486,12 @@ finger_combobox_changed (GtkComboBox *combobox, EnrollData *data)
 static void
 assistant_cancelled (GtkAssistant *ass, EnrollData *data)
 {
+        GtkWidget *fingerprint_row = data->fingerprint_row;
         GtkLabel *state_label = data->state_label;
+        GCancellable *cancellable = data->cancellable;
 
         enroll_data_destroy (data);
-        set_fingerprint_label (state_label);
+        set_fingerprint_row (fingerprint_row, state_label, cancellable);
 }
 
 static void
@@ -605,9 +680,11 @@ assistant_prepare (GtkAssistant *ass, GtkWidget *page, EnrollData *data)
 }
 
 static void
-enroll_fingerprints (GtkWindow *parent,
-                     GtkLabel  *state_label,
-                     ActUser   *user)
+enroll_fingerprints (GtkWindow    *parent,
+                     GtkWidget    *fingerprint_row,
+                     GtkLabel     *state_label,
+                     ActUser      *user,
+                     GCancellable *cancellable)
 {
         GDBusProxy *device = NULL;
         GtkBuilder *dialog;
@@ -617,9 +694,9 @@ enroll_fingerprints (GtkWindow *parent,
         GVariant *result;
         GError *error = NULL;
 
-        ensure_manager ();
+        ensure_manager (cancellable);
         if (manager != NULL)
-                device = get_first_device ();
+                device = get_first_device (cancellable);
 
         if (manager == NULL || device == NULL) {
                 GtkWidget *d;
@@ -634,6 +711,8 @@ enroll_fingerprints (GtkWindow *parent,
 
         data = g_new0 (EnrollData, 1);
         data->device = device;
+        data->cancellable = g_object_ref (cancellable);
+        data->fingerprint_row = fingerprint_row;
         data->state_label = state_label;
 
         /* Get some details about the device */
@@ -646,7 +725,7 @@ enroll_fingerprints (GtkWindow *parent,
                                               G_VARIANT_TYPE ("(a{sv})"),
                                               G_DBUS_CALL_FLAGS_NONE,
                                               -1,
-                                              NULL,
+                                              cancellable,
                                               NULL);
         if (result) {
                 GVariant *props;
@@ -733,17 +812,21 @@ enroll_fingerprints (GtkWindow *parent,
 }
 
 void
-fingerprint_button_clicked (GtkWindow *parent,
-                            GtkLabel  *state_label,
-                            ActUser   *user)
+fingerprint_button_clicked (GtkWindow    *parent,
+                            GtkWidget    *fingerprint_row,
+                            GtkLabel     *state_label,
+                            ActUser      *user,
+                            GCancellable *cancellable)
 {
         bindtextdomain ("fprintd", GNOMELOCALEDIR);
         bind_textdomain_codeset ("fprintd", "UTF-8");
 
         if (is_disable != FALSE) {
-                delete_fingerprints_question (parent, state_label, user);
+                delete_fingerprints_question (parent, fingerprint_row,
+                                              state_label, user, cancellable);
         } else {
-                enroll_fingerprints (parent, state_label, user);
+                enroll_fingerprints (parent, fingerprint_row, state_label, user,
+                                     cancellable);
         }
 }
 
diff --git a/panels/user-accounts/um-fingerprint-dialog.h b/panels/user-accounts/um-fingerprint-dialog.h
index a1f6afc..09dbf51 100644
--- a/panels/user-accounts/um-fingerprint-dialog.h
+++ b/panels/user-accounts/um-fingerprint-dialog.h
@@ -20,7 +20,11 @@
 #include <gtk/gtk.h>
 #include <act/act.h>
 
-gboolean set_fingerprint_label (GtkLabel   *state_label);
-void fingerprint_button_clicked (GtkWindow *parent,
-                                 GtkLabel  *state_label,
-                                 ActUser   *user);
+void set_fingerprint_row (GtkWidget    *fingerprint_row,
+                          GtkLabel     *state_label,
+                          GCancellable *cancellable);
+void fingerprint_button_clicked (GtkWindow    *parent,
+                                 GtkWidget    *fingerprint_row,
+                                 GtkLabel     *state_label,
+                                 ActUser      *user,
+                                 GCancellable *cancellable);
