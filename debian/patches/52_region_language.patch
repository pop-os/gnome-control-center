From: Gunnar Hjalmarsson <gunnarhj@ubuntu.com>
Date: Tue, 31 Jul 2018 04:44:12 +0100
Subject: Adapts the region capplet and the language chooser in the user
 accounts capplet

Forwarded: https://bugzilla.gnome.org/695939, https://bugzilla.gnome.org/695940
Last-Update: 2013-03-21
 Some background that explains the need for this patch:

 * Ubuntu isn't shipped with all languages installed and all locales generated.
   Instead the users install the needed language pack(s), and the corresponding
   locales are generated.

 * The code in accountsservice for handling languages has been extended via Ubuntu
   specific patches. That code is shared by multiple packages. Currently those
   packages are:
   - gnome-control-center
   - language-selector (Xubuntu and Lubuntu will keep using the language-selector
     UI for now)
   - lightdm (for the language chooser in lightdm-gtk-greeter)

 With this patch applied, the g-c-c region capplet and the language chooser in the
 user accounts capplet behave approximately the same way as language-selector. No
 migration code needed when standard Ubuntu drops the language-selector UI.

 Compared with how the region capplet in g-c-c works out of the box, this patch
 results in:

 * Languages are dealt with using 'll' and 'll_CC' language codes instead of
   complete locale names.

 * Selected language is stored in both LANGUAGE and LANG.

 * Only one language list that shows the translations belonging to the installed
   language packs (not a 'short' and a 'long' list).

 * User level settings of language and regional formats are stored as
   accountsservice properties and in ~/.pam_environment.

 * All the formats related locale categories set, not just a subset.

 The following changes now live in gnome-desktop3

 * Translation @variants, e.g. ca@valencia, are displayed properly.

 * Locales stored with codeset '.UTF-8' instead of '.utf8'.

 * The 'common_name' field taken into account when parsing the iso-codes XML files
   for language names.
---
 panels/common/cc-common-language.c   | 152 +++++++++++++++++++++++++++++------
 panels/common/cc-common-language.h   |   4 +
 panels/common/cc-language-chooser.c  |   4 +-
 panels/region/cc-region-panel.c      | 138 +++++++++++++++++++++++--------
 panels/user-accounts/cc-user-panel.c |   6 +-
 5 files changed, 243 insertions(+), 61 deletions(-)

Index: gnome-control-center-3.32.0.1/panels/common/cc-common-language.c
===================================================================
--- gnome-control-center-3.32.0.1.orig/panels/common/cc-common-language.c
+++ gnome-control-center-3.32.0.1/panels/common/cc-common-language.c
@@ -161,6 +161,66 @@ cc_common_language_get_current_language
         return language;
 }
 
+gchar *
+cc_common_language_get_property (const gchar *prop_name)
+{
+  GDBusConnection  *bus;
+  gchar            *user_path;
+  GError           *error = NULL;
+  GVariant         *properties;
+  GVariantIter     *iter;
+  gchar            *key;
+  GVariant         *value;
+  gchar            *ret = NULL;
+
+  if (g_strcmp0 (prop_name, "Language") != 0 && g_strcmp0 (prop_name, "FormatsLocale") != 0) {
+    g_warning ("Invalid argument: '%s'", prop_name);
+    return ret;
+  }
+
+  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, NULL);
+  user_path = g_strdup_printf ("/org/freedesktop/Accounts/User%i", getuid ());
+
+  properties = g_dbus_connection_call_sync (bus,
+                                            "org.freedesktop.Accounts",
+                                            user_path,
+                                            "org.freedesktop.DBus.Properties",
+                                            "GetAll",
+                                            g_variant_new ("(s)", "org.freedesktop.Accounts.User"),
+                                            G_VARIANT_TYPE ("(a{sv})"),
+                                            G_DBUS_CALL_FLAGS_NONE,
+                                            -1,
+                                            NULL,
+                                            &error);
+  if (!properties) {
+    g_warning ("Error calling GetAll() when retrieving properties for %s: %s", user_path, error->message);
+    g_error_free (error);
+                /* g_hash_table_lookup() is not NULL-safe, so don't return NULL */
+                if (g_strcmp0 (prop_name, "Language") == 0)
+                        ret = g_strdup ("en");
+                else
+                        ret = g_strdup ("en_US.UTF-8");
+    goto out;
+  }
+
+  g_variant_get (properties, "(a{sv})", &iter);
+  while (g_variant_iter_loop (iter, "{&sv}", &key, &value)) {
+    if (g_strcmp0 (key, prop_name) == 0) {
+      g_variant_get (value, "s", &ret);
+      break;
+    }
+  }
+
+  g_variant_unref (properties);
+  g_variant_iter_free (iter);
+
+out:
+  g_object_unref (bus);
+  g_free (user_path);
+
+  return ret;
+}
+
 static char *
 get_lang_for_user_object_path (const char *path)
 {
@@ -201,30 +261,64 @@ insert_language (GHashTable *ht,
         g_autofree gchar *label_own_lang = NULL;
         g_autofree gchar *label_current_lang = NULL;
         g_autofree gchar *label_untranslated = NULL;
+        g_autofree gchar *key = NULL;
+
+        cc_common_language_get_locale (lang, &key);
 
-        label_own_lang = gnome_get_language_from_locale (lang, lang);
-        label_current_lang = gnome_get_language_from_locale (lang, NULL);
-        label_untranslated = gnome_get_language_from_locale (lang, "C");
+        label_own_lang = gnome_get_language_from_locale (key, key);
+        label_current_lang = gnome_get_language_from_locale (key, NULL);
+        label_untranslated = gnome_get_language_from_locale (key, "C");
 
         /* We don't have a translation for the label in
          * its own language? */
         if (g_strcmp0 (label_own_lang, label_untranslated) == 0) {
                 if (g_strcmp0 (label_current_lang, label_untranslated) == 0)
-                        g_hash_table_insert (ht, g_strdup (lang), g_strdup (label_untranslated));
+                        g_hash_table_insert (ht, g_strdup (key), g_strdup (label_untranslated));
                 else
-                        g_hash_table_insert (ht, g_strdup (lang), g_strdup (label_current_lang));
+                        g_hash_table_insert (ht, g_strdup (key), g_strdup (label_current_lang));
         } else {
-                g_hash_table_insert (ht, g_strdup (lang), g_strdup (label_own_lang));
+                g_hash_table_insert (ht, g_strdup (key), g_strdup (label_own_lang));
+        }
+}
+
+gchar **
+cc_common_language_get_installed_languages (void)
+{
+        gchar  *output;
+        gchar  **langs = NULL;
+        GError *error = NULL;
+
+        if (!g_spawn_command_line_sync ("/usr/share/language-tools/language-options",
+                                        &output, NULL, NULL, &error)) {
+                g_warning ("Couldn't get installed languages: %s", error->message);
+                g_error_free (error);
+                return NULL;
         }
+        langs = g_strsplit (output, "\n", 0);
+
+        g_free(output);
+        return langs;
 }
 
 GHashTable *
 cc_common_language_get_initial_languages (void)
 {
         GHashTable *ht;
+        gchar **langs;
+        gint i;
 
         ht = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
 
+        langs = cc_common_language_get_installed_languages ();
+
+        if (langs) {
+                for (i = 0; langs[i]; i++) {
+                        insert_language (ht, langs[i]);
+                }
+
+                g_strfreev (langs);
+        }
+/*
         insert_language (ht, "en_US.UTF-8");
         insert_language (ht, "en_GB.UTF-8");
         insert_language (ht, "de_DE.UTF-8");
@@ -234,10 +328,32 @@ cc_common_language_get_initial_languages
         insert_language (ht, "ja_JP.UTF-8");
         insert_language (ht, "ru_RU.UTF-8");
         insert_language (ht, "ar_EG.UTF-8");
-
+*/
         return ht;
 }
 
+void
+cc_common_language_get_locale (const gchar *language, gchar **locale){
+        gchar *command;
+        GError *error = NULL;
+        /* Get locale that corresponds to the language */
+        command = g_strconcat ("/usr/share/language-tools/language2locale ", language, NULL);
+        if (!g_spawn_command_line_sync (command, locale, NULL, NULL, &error)) {
+               g_warning ("Couldn't get locale: %s", error->message);
+                g_error_free (error);
+                g_free (command);
+
+                return;
+        }
+
+        g_free (command);
+        g_strchomp (*locale);
+        if (strlen (*locale) == 0) {
+                g_warning ("Couldn't get locale for language: %s", language);
+                return;
+        }
+
+}
 static void
 foreach_user_lang_cb (gpointer key,
                       gpointer value,
@@ -263,28 +379,18 @@ cc_common_language_add_user_languages (G
         GtkListStore *store = GTK_LIST_STORE (model);
         GHashTable *user_langs;
         const char *display;
+        const char *lang;
 
         gtk_list_store_clear (store);
 
         user_langs = cc_common_language_get_initial_languages ();
 
         /* Add the current locale first */
-        name = cc_common_language_get_current_language ();
+        lang = cc_common_language_get_property ("Language");
+        cc_common_language_get_locale (lang, &name);
         display = g_hash_table_lookup (user_langs, name);
         if (!display) {
-                g_autofree gchar *language = NULL;
-                g_autofree gchar *country = NULL;
-                g_autofree gchar *codeset = NULL;
-
-                gnome_parse_locale (name, &language, &country, &codeset, NULL);
-
-                if (!codeset || !g_str_equal (codeset, "UTF-8"))
-                        g_warning ("Current user locale codeset isn't UTF-8");
-
-                g_free (name);
-                name = g_strdup_printf ("%s_%s.UTF-8", language, country);
-
-                insert_language (user_langs, name);
+                insert_language (user_langs, lang);
                 display = g_hash_table_lookup (user_langs, name);
         }
 
@@ -296,8 +402,8 @@ cc_common_language_add_user_languages (G
         g_hash_table_foreach (user_langs, (GHFunc) foreach_user_lang_cb, store);
 
         /* And now the "Other…" selection */
-        gtk_list_store_append (store, &iter);
-        gtk_list_store_set (store, &iter, LOCALE_COL, NULL, DISPLAY_LOCALE_COL, _("Other…"), -1);
+        //gtk_list_store_append (store, &iter);
+        //gtk_list_store_set (store, &iter, LOCALE_COL, NULL, DISPLAY_LOCALE_COL, _("Other…"), -1);
 
         g_hash_table_destroy (user_langs);
 }
Index: gnome-control-center-3.32.0.1/panels/common/cc-common-language.h
===================================================================
--- gnome-control-center-3.32.0.1.orig/panels/common/cc-common-language.h
+++ gnome-control-center-3.32.0.1/panels/common/cc-common-language.h
@@ -43,6 +43,8 @@ guint    cc_common_language_add_availabl
                                                      GHashTable       *user_langs);
 gboolean cc_common_language_has_font                (const gchar  *locale);
 gchar   *cc_common_language_get_current_language    (void);
+gchar   *cc_common_language_get_property            (const gchar  *prop_name);
+gchar	**cc_common_language_get_installed_languages   (void);
 
 GHashTable *cc_common_language_get_initial_languages   (void);
 GHashTable *cc_common_language_get_user_languages      (void);
@@ -55,4 +57,6 @@ void     cc_common_language_select_curre
 
 void     cc_common_language_add_user_languages (GtkTreeModel *model);
 
+void    cc_common_language_get_locale (const gchar *language, gchar **locale);
+
 G_END_DECLS
Index: gnome-control-center-3.32.0.1/panels/common/cc-language-chooser.c
===================================================================
--- gnome-control-center-3.32.0.1.orig/panels/common/cc-language-chooser.c
+++ gnome-control-center-3.32.0.1/panels/common/cc-language-chooser.c
@@ -166,7 +166,7 @@ add_languages (CcLanguageChooser *choose
                 gtk_container_add (GTK_CONTAINER (chooser->language_listbox), widget);
         }
 
-        gtk_container_add (GTK_CONTAINER (chooser->language_listbox), GTK_WIDGET (chooser->more_item));
+        /*gtk_container_add (GTK_CONTAINER (chooser->language_listbox), GTK_WIDGET (chooser->more_item));*/
 }
 
 static void
@@ -389,7 +389,7 @@ cc_language_chooser_init (CcLanguageChoo
         gtk_widget_init_template (GTK_WIDGET (chooser));
 
         chooser->more_item = more_widget_new ();
-        gtk_widget_show (GTK_WIDGET (chooser->more_item));
+        /*gtk_widget_show (GTK_WIDGET (chooser->more_item));*/
         /* We ref-sink here so we can reuse this widget multiple times */
         chooser->no_results = g_object_ref_sink (no_results_widget_new ());
         gtk_widget_show (chooser->no_results);
Index: gnome-control-center-3.32.0.1/panels/region/cc-region-panel.c
===================================================================
--- gnome-control-center-3.32.0.1.orig/panels/region/cc-region-panel.c
+++ gnome-control-center-3.32.0.1/panels/region/cc-region-panel.c
@@ -378,11 +378,15 @@ language_response (CcRegionPanel     *se
                    gint               response_id,
                    CcLanguageChooser *chooser)
 {
-        const gchar *language;
+        const gchar *locale, *language, *country;
+        gchar *name = NULL;
 
         if (response_id == GTK_RESPONSE_OK) {
-                language = cc_language_chooser_get_language (chooser);
-                update_language (self, language);
+                locale = cc_language_chooser_get_language (chooser);
+                gnome_parse_locale (locale, &language, &country, NULL, NULL);
+                name = g_strdup_printf ("%s_%s", language, country);
+                update_language (self, name);
+                g_free (name);
         }
 
         gtk_widget_destroy (GTK_WIDGET (chooser));
@@ -402,6 +406,47 @@ set_system_region (CcRegionPanel *self,
 }
 
 static void
+set_formats_locale (const gchar *formats_locale)
+{
+        GDBusProxy  *proxy;
+        GError      *error = NULL;
+        gchar       *user_path;
+        GVariant    *ret;
+
+        user_path = g_strdup_printf ("/org/freedesktop/Accounts/User%i", getuid ());
+        proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                               G_DBUS_PROXY_FLAGS_NONE,
+                                               NULL,
+                                               "org.freedesktop.Accounts",
+                                               user_path,
+                                               "org.freedesktop.Accounts.User",
+                                               NULL,
+                                               &error);
+        if (!proxy) {
+                g_warning ("Couldn't get accountsservice proxy for %s: %s", user_path, error->message);
+                g_error_free (error);
+                g_free (user_path);
+                return;
+        }
+
+        ret = g_dbus_proxy_call_sync (proxy,
+                                      "SetFormatsLocale",
+                                      g_variant_new ("(s)", formats_locale),
+                                      G_DBUS_CALL_FLAGS_NONE,
+                                      -1,
+                                      NULL,
+                                      &error);
+        if (!ret) {
+                g_warning ("Couldn't set FormatsLocale: %s", error->message);
+                g_error_free (error);
+        } else
+                g_variant_unref (ret);
+
+        g_object_unref (proxy);
+        g_free (user_path);
+}
+
+static void
 update_region (CcRegionPanel *self,
                const gchar   *region)
 {
@@ -410,6 +455,7 @@ update_region (CcRegionPanel *self,
         } else {
                 if (g_strcmp0 (region, self->region) == 0)
                         return;
+                set_formats_locale(region);
                 g_settings_set_string (self->locale_settings, KEY_REGION, region);
                 if (self->login_auto_apply)
                         set_system_region (self, region);
@@ -562,7 +608,7 @@ static void
 update_region_from_setting (CcRegionPanel *self)
 {
         g_free (self->region);
-        self->region = g_settings_get_string (self->locale_settings, KEY_REGION);
+        self->region = cc_common_language_get_property ("FormatsLocale");
         update_region_label (self);
 }
 
@@ -588,15 +634,19 @@ static void
 update_language_from_user (CcRegionPanel *self)
 {
         const gchar *language = NULL;
+        const gchar *locale;
 
-        if (act_user_is_loaded (self->user))
+        if (act_user_is_loaded (self->user)) {
                 language = act_user_get_language (self->user);
+                cc_common_language_get_locale (language, &locale);
+        }
 
-        if (language == NULL || *language == '\0')
-                language = setlocale (LC_MESSAGES, NULL);
+        if (language == NULL || *language == '\0') {
+                locale = setlocale (LC_MESSAGES, NULL);
+        }
 
         g_free (self->language);
-        self->language = g_strdup (language);
+        self->language = g_strdup (locale);
         update_language_label (self);
 }
 
@@ -1249,6 +1299,16 @@ setup_input_section (CcRegionPanel *self
         update_modifiers_shortcut (self);
 }
 
+static gchar *
+strip_quotes (const gchar *str)
+{
+        if ((g_str_has_prefix (str, "\"") && g_str_has_suffix (str, "\""))
+          || (g_str_has_prefix (str, "'") && g_str_has_suffix (str, "'")))
+                return g_strndup (str + 1, strlen (str) - 2);
+        else
+                return g_strdup (str);
+}
+
 static void
 on_localed_properties_changed (CcRegionPanel  *self,
                                GVariant       *changed_properties,
@@ -1261,28 +1321,38 @@ on_localed_properties_changed (CcRegionP
                 g_autofree const gchar **strv = NULL;
                 gsize len;
                 gint i;
-                const gchar *lang, *messages, *time;
+                g_autofree gchar *lang;
+                g_autofree gchar *language;
+                g_autofree gchar *messages;
+                g_autofree gchar *time;
 
                 strv = g_variant_get_strv (v, &len);
 
-                lang = messages = time = NULL;
+                lang = language = messages = time = NULL;
                 for (i = 0; strv[i]; i++) {
                         if (g_str_has_prefix (strv[i], "LANG=")) {
-                                lang = strv[i] + strlen ("LANG=");
+                                lang = strip_quotes (strv[i] + strlen ("LANG="));
+                        } else if (g_str_has_prefix (strv[i], "LANGUAGE=")) {
+                                g_autofree gchar *tmp = strip_quotes (strv[i] + strlen ("LANGUAGE="));
+                                g_auto(GStrv) tokens = g_strsplit (tmp, ":", 2);
+                                language = g_strdup (tokens[0]);
                         } else if (g_str_has_prefix (strv[i], "LC_MESSAGES=")) {
-                                messages = strv[i] + strlen ("LC_MESSAGES=");
+                                messages = strip_quotes (strv[i] + strlen ("LC_MESSAGES="));
                         } else if (g_str_has_prefix (strv[i], "LC_TIME=")) {
-                                time = strv[i] + strlen ("LC_TIME=");
+                                time = strip_quotes (strv[i] + strlen ("LC_TIME="));
                         }
                 }
                 if (!lang) {
-                        lang = setlocale (LC_MESSAGES, NULL);
+                        lang = g_strdup ("en_US.UTF-8");
                 }
-                if (!messages) {
-                        messages = lang;
+                if (!language) {
+                        if (messages)
+                                language = g_strdup (messages);
+                        else
+                                language = g_strdup (lang);
                 }
                 g_free (self->system_language);
-                self->system_language = g_strdup (messages);
+                self->system_language = g_strdup (language);
                 g_free (self->system_region);
                 self->system_region = g_strdup (time);
 
@@ -1335,28 +1405,26 @@ set_localed_locale (CcRegionPanel *self)
 {
         g_autoptr(GVariantBuilder) b = NULL;
         g_autofree gchar *lang_value = NULL;
+        g_autofree gchar *lang = NULL;
+
+        cc_common_language_get_locale (self->system_language, &lang);
 
         b = g_variant_builder_new (G_VARIANT_TYPE ("as"));
-        lang_value = g_strconcat ("LANG=", self->system_language, NULL);
+        lang_value = g_strconcat ("LANG=", lang, NULL);
+        g_variant_builder_add (b, "s", lang_value);
+
+        g_free (lang_value);
+
+        lang_value = g_strconcat ("LANGUAGE=", self->system_language, NULL);
         g_variant_builder_add (b, "s", lang_value);
 
-        if (self->system_region != NULL &&
-            g_strcmp0 (self->system_language, self->system_region) != 0) {
-                g_autofree gchar *time_value = NULL;
-                g_autofree gchar *numeric_value = NULL;
-                g_autofree gchar *monetary_value = NULL;
-                g_autofree gchar *measurement_value = NULL;
-                g_autofree gchar *paper_value = NULL;
-                time_value = g_strconcat ("LC_TIME=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", time_value);
-                numeric_value = g_strconcat ("LC_NUMERIC=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", numeric_value);
-                monetary_value = g_strconcat ("LC_MONETARY=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", monetary_value);
-                measurement_value = g_strconcat ("LC_MEASUREMENT=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", measurement_value);
-                paper_value = g_strconcat ("LC_PAPER=", self->system_region, NULL);
-                g_variant_builder_add (b, "s", paper_value);
+        const gchar *format_categories[] = { "LC_NUMERIC", "LC_TIME",
+           "LC_MONETARY", "LC_PAPER", "LC_IDENTIFICATION", "LC_NAME",
+           "LC_ADDRESS", "LC_TELEPHONE", "LC_MEASUREMENT", NULL };
+        for (int i = 0; format_categories[i] != NULL; i++) {
+                g_autofree gchar *s = NULL;
+                s = g_strconcat (format_categories[i], "=", self->system_region, NULL);
+                g_variant_builder_add (b, "s", s);
         }
         g_dbus_proxy_call (self->localed,
                            "SetLocale",
Index: gnome-control-center-3.32.0.1/panels/user-accounts/cc-user-panel.c
===================================================================
--- gnome-control-center-3.32.0.1.orig/panels/user-accounts/cc-user-panel.c
+++ gnome-control-center-3.32.0.1/panels/user-accounts/cc-user-panel.c
@@ -836,6 +836,7 @@ show_user (ActUser *user, CcUserPanel *s
 
         name = NULL;
         lang = g_strdup (act_user_get_language (user));
+        cc_common_language_get_locale (lang, &lang);
 
         if (lang && *lang != '\0') {
                 name = gnome_get_language_from_locale (lang, NULL);
@@ -976,6 +977,7 @@ language_response (GtkDialog   *dialog,
 {
         ActUser *user;
         const gchar *lang, *account_language;
+        gchar *locale;
 
         if (response_id != GTK_RESPONSE_OK) {
                 gtk_widget_hide (GTK_WIDGET (dialog));
@@ -986,9 +988,10 @@ language_response (GtkDialog   *dialog,
         account_language = act_user_get_language (user);
 
         lang = cc_language_chooser_get_language (CC_LANGUAGE_CHOOSER (dialog));
+        cc_common_language_get_locale(act_user_get_language (user), &locale);
         if (lang) {
                 g_autofree gchar *name = NULL;
-                if (g_strcmp0 (lang, account_language) != 0) {
+                if (g_strcmp0 (lang, locale) != 0) {
                         act_user_set_language (user, lang);
                 }
 
@@ -1007,6 +1010,7 @@ change_language (CcUserPanel *self)
 
         user = get_selected_user (self);
         current_language = act_user_get_language (user);
+        cc_common_language_get_locale (current_language, &current_language);
 
         if (self->language_chooser) {
 		cc_language_chooser_clear_filter (self->language_chooser);
