Index: gnome-control-center/shell/cc-application.c
===================================================================
--- gnome-control-center.orig/shell/cc-application.c
+++ gnome-control-center/shell/cc-application.c
@@ -199,6 +199,10 @@ cc_application_quit (GSimpleAction *simp
 {
   CcApplication *self = CC_APPLICATION (user_data);
 
+  if (g_atomic_int_get (&POP_UPGRADE_STATUS) != 0) {
+    return;
+  }
+
   gtk_widget_destroy (GTK_WIDGET (self->window));
 }
 
Index: gnome-control-center/shell/cc-window.c
===================================================================
--- gnome-control-center.orig/shell/cc-window.c
+++ gnome-control-center/shell/cc-window.c
@@ -671,6 +671,10 @@ window_key_press_event_cb (CcWindow    *
           case GDK_KEY_q:
           case GDK_KEY_W:
           case GDK_KEY_w:
+            if (g_atomic_int_get (&POP_UPGRADE_STATUS) != 0) {
+              return GDK_EVENT_STOP;
+            }
+
             gtk_widget_destroy (GTK_WIDGET (self));
             retval = GDK_EVENT_STOP;
             break;
@@ -755,6 +759,14 @@ cc_shell_iface_init (CcShellInterface *i
   iface->get_toplevel = cc_window_get_toplevel;
 }
 
+static void upgrade_check (GtkWidget *button, gpointer data) {
+  if (g_atomic_int_get (&POP_UPGRADE_STATUS) != 0) {
+    return;
+  }
+
+  gtk_main_quit ();
+}
+
 /* GtkWidget overrides */
 static void
 cc_window_map (GtkWidget *widget)
@@ -763,6 +775,8 @@ cc_window_map (GtkWidget *widget)
 
   GTK_WIDGET_CLASS (cc_window_parent_class)->map (widget);
 
+  g_signal_connect (GTK_WINDOW (widget), "delete-event", upgrade_check, NULL);
+
   /* Show a warning for Flatpak builds */
   if (in_flatpak_sandbox () && g_settings_get_boolean (self->settings, "show-development-warning"))
     gtk_window_present (GTK_WINDOW (self->development_warning_dialog));
Index: gnome-control-center/shell/cc-window.h
===================================================================
--- gnome-control-center.orig/shell/cc-window.h
+++ gnome-control-center/shell/cc-window.h
@@ -24,6 +24,8 @@
 #include "cc-shell.h"
 #include "cc-shell-model.h"
 
+extern gint POP_UPGRADE_STATUS;
+
 G_BEGIN_DECLS
 
 #define CC_TYPE_WINDOW (cc_window_get_type ())
Index: gnome-control-center/panels/upgrade/cc-upgrade-panel.c
===================================================================
--- /dev/null
+++ gnome-control-center/panels/upgrade/cc-upgrade-panel.c
@@ -0,0 +1,135 @@
+
+#include <config.h>
+#include <gtk/gtk.h>
+#include <stdint.h>
+#include <pop_upgrade_gtk.h>
+#include "cc-upgrade-panel.h"
+
+// Allow the upgrade widget to outlive the lifetime of its panel.
+static PopUpgradeWidget *POP_UPGRADE = NULL;
+
+// Atomic integer for tracking the current status.
+extern gint POP_UPGRADE_STATUS = 0;
+
+struct _CcUpgradePanel {
+    CcPanel    parent_instance;
+    GtkWidget *overlay;
+    GtkWidget *info_bar;
+    GtkWidget *info_msg;
+};
+
+CC_PANEL_REGISTER (CcUpgradePanel, cc_upgrade_panel)
+
+static void info_bar_non_visible (GtkWidget *info_bar, gpointer user_data) {
+    gtk_widget_set_visible (info_bar, FALSE);
+}
+
+/* When errors are encountered, they will be displayed in the info overlay. */
+static void pop_upgrade_callback_error (const uint8_t *message, size_t len, CcUpgradePanel *priv) {
+    // If the the pop upgrade widget has a parent widget, it's attached to `priv`.
+    if (NULL != gtk_widget_get_parent (pop_upgrade_widget_container (POP_UPGRADE))) {
+        g_autoptr (GString) gmessage = g_string_new_len (message, len);
+        gtk_label_set_label (GTK_LABEL (priv->info_msg), gmessage->str);
+        gtk_widget_set_visible (priv->info_bar, TRUE);
+    }
+}
+
+/* As the upgrade status changes, this will update the atomic global status variable.
+ *
+ * This is useful primarily to prevent the application from exiting. */
+static void pop_upgrade_callback_event (uint8_t event, gpointer user_data) {
+    g_atomic_int_set (&POP_UPGRADE_STATUS, (gint) event);
+    fprintf (stderr, "Setting status to %d\n", (gint) event);
+}
+
+/* Triggers when the upgrade ready notification is clicked. */
+static void pop_upgrade_callback_ready (gpointer user_data) {
+    g_autoptr(GError) error = NULL;
+    gchar *argv[] = { "/usr/bin/gnome-control-center", "info-overview", NULL };
+    if (!g_spawn_async (NULL, argv, NULL, 0, NULL, NULL, NULL, &error)) {
+        g_warning ("Failed to open info overview: %s", error->message);
+    }
+}
+
+/* Add an info bar into the panel overlay, for use by the upgrade widget. */
+static void pop_os_info_overlay (CcUpgradePanel *self) {
+    self->info_msg = gtk_label_new (NULL);
+    gtk_label_set_line_wrap (GTK_LABEL (self->info_msg), TRUE);
+
+    self->info_bar = gtk_info_bar_new ();
+    gtk_widget_set_can_focus (self->info_bar, TRUE);
+    gtk_widget_set_halign (self->info_bar, GTK_ALIGN_FILL);
+    gtk_widget_set_valign (self->info_bar, GTK_ALIGN_START);
+    gtk_info_bar_set_message_type (GTK_INFO_BAR (self->info_bar), GTK_MESSAGE_ERROR);
+    gtk_info_bar_set_show_close_button (GTK_INFO_BAR (self->info_bar), TRUE);
+    g_signal_connect (self->info_bar, "close", G_CALLBACK (info_bar_non_visible), NULL);
+    g_signal_connect (self->info_bar, "response", G_CALLBACK (info_bar_non_visible), NULL);
+
+    GtkWidget *info_bar_content = gtk_info_bar_get_content_area (GTK_INFO_BAR (self->info_bar));
+    gtk_container_add (GTK_CONTAINER (info_bar_content), self->info_msg);
+
+    gtk_overlay_add_overlay (GTK_OVERLAY (self->overlay), self->info_bar);
+    gtk_widget_show_all (self->overlay);
+    gtk_widget_hide (self->info_bar);
+}
+
+/* Lazily initialize the upgrade widget, and attach it to the panel. */
+static void pop_os_upgrade_widget (CcUpgradePanel *self) {
+    if (NULL == POP_UPGRADE) {
+        POP_UPGRADE = pop_upgrade_widget_new ();
+
+        pop_upgrade_widget_callback_event (
+            POP_UPGRADE,
+            (PopUpgradeWidgetEventCallback) pop_upgrade_callback_event,
+            NULL
+        );
+
+        pop_upgrade_widget_callback_ready (
+            POP_UPGRADE,
+            (PopUpgradeWidgetReadyCallback) pop_upgrade_callback_ready,
+            NULL
+        );
+
+        GtkWidget *widget = pop_upgrade_widget_container (POP_UPGRADE);
+        gtk_widget_set_halign (widget, GTK_ALIGN_CENTER);
+        gtk_widget_set_size_request (widget, 600, -1);
+    }
+
+    if (g_atomic_int_get (&POP_UPGRADE_STATUS) == 0) {
+        pop_upgrade_widget_scan (POP_UPGRADE);
+    }
+
+    GtkWidget *upgrade_widget = pop_upgrade_widget_container (POP_UPGRADE);
+    gtk_container_set_border_width (GTK_CONTAINER (upgrade_widget), 12);
+    gtk_container_add (GTK_CONTAINER (self->overlay), upgrade_widget);
+    pop_upgrade_widget_callback_error (POP_UPGRADE, (PopUpgradeWidgetErrorCallback) pop_upgrade_callback_error, self);
+}
+
+static void cc_upgrade_panel_dispose (GObject *object) {
+    CcUpgradePanel *prefs = CC_UPGRADE_PANEL (object);
+
+    // Detach the pop-upgrade widget on disposing this panel.
+    GtkWidget *pop = pop_upgrade_widget_container (POP_UPGRADE);
+    gtk_container_remove (GTK_CONTAINER (prefs->overlay), pop);
+
+    G_OBJECT_CLASS (cc_upgrade_panel_parent_class)->dispose (object);
+}
+
+static void cc_upgrade_panel_finalize (GObject *object) {
+    G_OBJECT_CLASS (cc_upgrade_panel_parent_class)->finalize (object);
+}
+
+static void cc_upgrade_panel_class_init (CcUpgradePanelClass *klass) {
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    object_class->dispose = cc_upgrade_panel_dispose;
+    object_class->finalize = cc_upgrade_panel_finalize;
+}
+
+static void cc_upgrade_panel_init (CcUpgradePanel *prefs) {
+    prefs->overlay = gtk_overlay_new ();
+    pop_os_info_overlay (prefs);
+    pop_os_upgrade_widget (prefs);
+
+    gtk_container_add (GTK_CONTAINER (prefs), prefs->overlay);
+}
Index: gnome-control-center/panels/upgrade/cc-upgrade-panel.h
===================================================================
--- /dev/null
+++ gnome-control-center/panels/upgrade/cc-upgrade-panel.h
@@ -0,0 +1,32 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2019 System76
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#pragma once
+
+#include <shell/cc-panel.h>
+
+extern gint POP_UPGRADE_STATUS;
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_UPGRADE_PANEL (cc_upgrade_panel_get_type())
+G_DECLARE_FINAL_TYPE(CcUpgradePanel, cc_upgrade_panel, CC, UPGRADE_PANEL,
+                     CcPanel)
+
+G_END_DECLS
Index: gnome-control-center/panels/upgrade/gnome-upgrade-panel.desktop.in.in
===================================================================
--- /dev/null
+++ gnome-control-center/panels/upgrade/gnome-upgrade-panel.desktop.in.in
@@ -0,0 +1,14 @@
+[Desktop Entry]
+Name=OS Upgrade
+Comment=View system upgrade information
+Exec=gnome-control-center upgrade
+Icon=software-update-available-symbolic
+Terminal=false
+Type=Application
+NoDisplay=true
+StartupNotify=true
+Categories=GNOME;GTK;Settings;X-GNOME-Settings-Panel;HardwareSettings;X-GNOME-DetailsSettings;
+OnlyShowIn=GNOME;Unity;
+Keywords=OS;Upgrade;
+# Notifications are emitted by gnome-settings-daemon
+X-GNOME-UsesNotifications=true
Index: gnome-control-center/panels/upgrade/meson.build
===================================================================
--- /dev/null
+++ gnome-control-center/panels/upgrade/meson.build
@@ -0,0 +1,39 @@
+panels_list += cappletname
+desktop = 'gnome-@0@-panel.desktop'.format(cappletname)
+
+desktop_in = configure_file(
+          input : desktop + '.in.in',
+         output : desktop + '.in',
+  configuration : desktop_conf
+)
+
+i18n.merge_file(
+       desktop,
+          type : 'desktop',
+         input : desktop_in,
+        output : desktop,
+        po_dir : po_dir,
+       install : true,
+   install_dir : control_center_desktopdir
+)
+
+sources = files('cc-upgrade-panel.c')
+
+deps = common_deps + [
+  gnome_desktop_dep,
+  m_dep,
+  dependency('pop_upgrade_gtk')
+]
+
+cflags += [
+  '-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir),
+  '-DBINDIR="@0@"'.format(control_center_bindir)
+]
+
+panels_libs += static_library(
+  cappletname,
+  sources: sources,
+  include_directories: [ top_inc, common_inc ],
+  dependencies: deps,
+  c_args: cflags
+)
Index: gnome-control-center/panels/meson.build
===================================================================
--- gnome-control-center.orig/panels/meson.build
+++ gnome-control-center/panels/meson.build
@@ -27,6 +27,7 @@ panels = [
   'sound',
   'universal-access',
   'usage',
+  'upgrade',
   'user-accounts'
 ]
 
Index: gnome-control-center/shell/cc-panel-list.c
===================================================================
--- gnome-control-center.orig/shell/cc-panel-list.c
+++ gnome-control-center/shell/cc-panel-list.c
@@ -425,6 +425,7 @@ static const gchar * const panel_order[]
   "reset-settings",
   "datetime",
   "info-overview",
+  "upgrade",
 };
 
 static guint
@@ -1109,4 +1110,3 @@ cc_panel_list_set_selection_mode (CcPane
       gtk_list_box_select_row (GTK_LIST_BOX (listbox), GTK_LIST_BOX_ROW (data->row));
     }
 }
-
Index: gnome-control-center/shell/cc-panel-loader.c
===================================================================
--- gnome-control-center.orig/shell/cc-panel-loader.c
+++ gnome-control-center/shell/cc-panel-loader.c
@@ -61,6 +61,7 @@ extern GType cc_sound_panel_get_type (vo
 extern GType cc_bolt_panel_get_type (void);
 #endif /* BUILD_THUNDERBOLT */
 extern GType cc_ua_panel_get_type (void);
+extern GType cc_upgrade_panel_get_type(void);
 extern GType cc_user_panel_get_type (void);
 #ifdef BUILD_WACOM
 extern GType cc_wacom_panel_get_type (void);
@@ -127,6 +128,7 @@ static CcPanelLoaderVtable default_panel
 #endif
   PANEL_TYPE("universal-access", cc_ua_panel_get_type,                   NULL),
   PANEL_TYPE("usage",            cc_usage_panel_get_type,                NULL),
+  PANEL_TYPE("upgrade",          cc_upgrade_panel_get_type,              NULL),
   PANEL_TYPE("user-accounts",    cc_user_panel_get_type,                 NULL),
 #ifdef BUILD_WACOM
   PANEL_TYPE("wacom",            cc_wacom_panel_get_type,                cc_wacom_panel_static_init_func),
