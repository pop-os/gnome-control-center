From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Mon, 6 Apr 2020 22:47:06 +0200
Subject: user-accounts: Use newly designed fingerprint enroll dialog

Implement the new designed interface for fingerprint enrollment, so that the
dialog is now based on a stack of views:

 - A list of devices to choose (shown only if multiple are available)
 - A gallery of enrolled prints available where manage them
 - An enrollment progress view when enrolling a new finger

Move part of the logic into a new FingerprintManager (to manage gdbus proxies
generated via gdbus-codegen) that is created when configuring the current
user and that tracks the devices states, while move most of the UI into a new
CcFingerprintDialog that does all the operations in async way.

Origin: https://gitlab.gnome.org/GNOME/gnome-control-center/-/merge_requests/741
Applied-Upstream: 3.37.3
Ubuntu-Bug: http://launchpad.net/bugs/1873298
---
 panels/user-accounts/cc-fingerprint-dialog.c       | 1445 ++++++++++++++++++++
 panels/user-accounts/cc-fingerprint-dialog.h       |   37 +
 panels/user-accounts/cc-fingerprint-dialog.ui      |  462 +++++++
 panels/user-accounts/cc-fingerprint-manager.c      |  597 ++++++++
 panels/user-accounts/cc-fingerprint-manager.h      |   74 +
 panels/user-accounts/cc-user-panel.c               |   77 +-
 panels/user-accounts/data/account-fingerprint.ui   |  238 ----
 .../user-accounts/data/cc-fingerprint-dialog.css   |   83 ++
 .../fingerprint-detection-complete-symbolic.svg    |    3 +
 .../data/icons/fingerprint-detection-symbolic.svg  |    3 +
 .../fingerprint-detection-warning-symbolic.svg     |    3 +
 .../user-accounts/data/icons/left-index-finger.png |  Bin 1515 -> 0 bytes
 .../data/icons/left-little-finger.png              |  Bin 1500 -> 0 bytes
 .../data/icons/left-middle-finger.png              |  Bin 1483 -> 0 bytes
 .../user-accounts/data/icons/left-ring-finger.png  |  Bin 1512 -> 0 bytes
 panels/user-accounts/data/icons/left-thumb.png     |  Bin 1512 -> 0 bytes
 panels/user-accounts/data/icons/print_error.png    |  Bin 4160 -> 0 bytes
 panels/user-accounts/data/icons/print_ok.png       |  Bin 3677 -> 0 bytes
 .../data/icons/right-index-finger.png              |  Bin 1506 -> 0 bytes
 .../data/icons/right-little-finger.png             |  Bin 1479 -> 0 bytes
 .../data/icons/right-middle-finger.png             |  Bin 1468 -> 0 bytes
 .../user-accounts/data/icons/right-ring-finger.png |  Bin 1506 -> 0 bytes
 panels/user-accounts/data/icons/right-thumb.png    |  Bin 1486 -> 0 bytes
 .../data/net.reactivated.Fprint.Device.xml         |  585 ++++++++
 .../data/net.reactivated.Fprint.Manager.xml        |   50 +
 panels/user-accounts/meson.build                   |   41 +-
 panels/user-accounts/um-fingerprint-dialog.c       |  853 ------------
 panels/user-accounts/um-fingerprint-dialog.h       |   30 -
 panels/user-accounts/user-accounts.gresource.xml   |   21 +-
 po/POTFILES.in                                     |    4 +-
 30 files changed, 3424 insertions(+), 1182 deletions(-)
 create mode 100644 panels/user-accounts/cc-fingerprint-dialog.c
 create mode 100644 panels/user-accounts/cc-fingerprint-dialog.h
 create mode 100644 panels/user-accounts/cc-fingerprint-dialog.ui
 create mode 100644 panels/user-accounts/cc-fingerprint-manager.c
 create mode 100644 panels/user-accounts/cc-fingerprint-manager.h
 delete mode 100644 panels/user-accounts/data/account-fingerprint.ui
 create mode 100644 panels/user-accounts/data/cc-fingerprint-dialog.css
 create mode 100644 panels/user-accounts/data/icons/fingerprint-detection-complete-symbolic.svg
 create mode 100644 panels/user-accounts/data/icons/fingerprint-detection-symbolic.svg
 create mode 100644 panels/user-accounts/data/icons/fingerprint-detection-warning-symbolic.svg
 delete mode 100644 panels/user-accounts/data/icons/left-index-finger.png
 delete mode 100644 panels/user-accounts/data/icons/left-little-finger.png
 delete mode 100644 panels/user-accounts/data/icons/left-middle-finger.png
 delete mode 100644 panels/user-accounts/data/icons/left-ring-finger.png
 delete mode 100644 panels/user-accounts/data/icons/left-thumb.png
 delete mode 100644 panels/user-accounts/data/icons/print_error.png
 delete mode 100644 panels/user-accounts/data/icons/print_ok.png
 delete mode 100644 panels/user-accounts/data/icons/right-index-finger.png
 delete mode 100644 panels/user-accounts/data/icons/right-little-finger.png
 delete mode 100644 panels/user-accounts/data/icons/right-middle-finger.png
 delete mode 100644 panels/user-accounts/data/icons/right-ring-finger.png
 delete mode 100644 panels/user-accounts/data/icons/right-thumb.png
 create mode 100644 panels/user-accounts/data/net.reactivated.Fprint.Device.xml
 create mode 100644 panels/user-accounts/data/net.reactivated.Fprint.Manager.xml
 delete mode 100644 panels/user-accounts/um-fingerprint-dialog.c
 delete mode 100644 panels/user-accounts/um-fingerprint-dialog.h

diff --git a/panels/user-accounts/cc-fingerprint-dialog.c b/panels/user-accounts/cc-fingerprint-dialog.c
new file mode 100644
index 0000000..6a60360
--- /dev/null
+++ b/panels/user-accounts/cc-fingerprint-dialog.c
@@ -0,0 +1,1445 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2020 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Authors: Marco Trevisan <marco.trevisan@canonical.com>
+ */
+
+#include <glib/gi18n.h>
+#include <cairo/cairo.h>
+
+#include "cc-fingerprint-dialog.h"
+
+#include "cc-fingerprint-manager.h"
+#include "cc-fprintd-generated.h"
+#include "cc-list-row.h"
+
+#include "config.h"
+
+/* Translate fprintd strings */
+#define TR(s) dgettext ("fprintd", s)
+#include "fingerprint-strings.h"
+
+struct _CcFingerprintDialog
+{
+  GtkWindow parent_instance;
+
+  GtkButton      *back_button;
+  GtkButton      *cancel_button;
+  GtkButton      *delete_prints_button;
+  GtkButton      *done_button;
+  GtkContainer   *add_print_popover_box;
+  GtkEntry       *enroll_print_entry;
+  GtkFlowBox     *prints_gallery;
+  GtkHeaderBar   *titlebar;
+  GtkImage       *enroll_result_image;
+  GtkLabel       *enroll_message;
+  GtkLabel       *enroll_result_message;
+  GtkLabel       *infobar_error;
+  GtkLabel       *title;
+  GtkListBox     *devices_list;
+  GtkPopoverMenu *add_print_popover;
+  GtkPopoverMenu *print_popover;
+  GtkSpinner     *spinner;
+  GtkStack       *stack;
+  GtkWidget      *add_print_icon;
+  GtkWidget      *delete_confirmation_infobar;
+  GtkWidget      *device_selector;
+  GtkWidget      *enroll_print_bin;
+  GtkWidget      *enroll_result_icon;
+  GtkWidget      *enrollment_view;
+  GtkWidget      *error_infobar;
+  GtkWidget      *no_devices_found;
+  GtkWidget      *prints_manager;
+
+  CcFingerprintManager *manager;
+  CcFprintdDevice      *device;
+  gboolean              device_claimed;
+  gulong                device_signal_id;
+  gulong                device_name_owner_id;
+  GCancellable         *cancellable;
+  GStrv                 enrolled_fingers;
+  const char           *enrolling_finger;
+  guint                 enroll_stages_passed;
+  guint                 enroll_stage_passed_id;
+  gdouble               enroll_progress;
+};
+
+/* TODO - fprintd and API changes required:
+  - Identify the finger when the enroll dialog is visible
+    + Only if device supports identification
+      Â· And only in such case support enrolling more than one finger
+  - Delete a single fingerprint | and remove the "Delete all" button
+  - Highlight the finger when the sensor is touched during enrollment
+  - Add customized labels to fingerprints
+  - Devices hotplug (object manager)
+ */
+
+G_DEFINE_TYPE (CcFingerprintDialog, cc_fingerprint_dialog, GTK_TYPE_WINDOW)
+
+enum {
+  PROP_0,
+  PROP_MANAGER,
+  N_PROPS
+};
+
+#define N_VALID_FINGERS G_N_ELEMENTS (FINGER_IDS) - 1
+/* The order of the fingers here will affect the UI order */
+const char * FINGER_IDS[] = {
+  "right-index-finger",
+  "left-index-finger",
+  "right-thumb",
+  "right-middle-finger",
+  "right-ring-finger",
+  "right-little-finger",
+  "left-thumb",
+  "left-middle-finger",
+  "left-ring-finger",
+  "left-little-finger",
+  "any",
+};
+
+typedef enum {
+  ENROLL_STATE_NORMAL,
+  ENROLL_STATE_RETRY,
+  ENROLL_STATE_SUCCESS,
+  ENROLL_STATE_WARNING,
+  ENROLL_STATE_ERROR,
+  ENROLL_STATE_COMPLETED,
+  N_ENROLL_STATES,
+} EnrollState;
+
+const char * ENROLL_STATE_CLASSES[N_ENROLL_STATES] = {
+  "",
+  "retry",
+  "success",
+  "warning",
+  "error",
+  "completed",
+};
+
+static GParamSpec *properties[N_PROPS];
+
+CcFingerprintDialog *
+cc_fingerprint_dialog_new (CcFingerprintManager *manager)
+{
+  return g_object_new (CC_TYPE_FINGERPRINT_DIALOG,
+                       "fingerprint-manager", manager,
+                       NULL);
+}
+
+static void
+disconnect_device_signals (CcFingerprintDialog *self)
+{
+  if (!self->device)
+    return;
+
+  if (self->device_signal_id)
+    {
+      g_signal_handler_disconnect (self->device, self->device_signal_id);
+      self->device_signal_id = 0;
+    }
+
+  if (self->device_name_owner_id)
+    {
+      g_signal_handler_disconnect (self->device, self->device_name_owner_id);
+      self->device_name_owner_id = 0;
+    }
+}
+
+static void
+cc_fingerprint_dialog_dispose (GObject *object)
+{
+  CcFingerprintDialog *self = CC_FINGERPRINT_DIALOG (object);
+
+  g_clear_handle_id (&self->enroll_stage_passed_id, g_source_remove);
+
+  if (self->device && self->device_claimed)
+    {
+      disconnect_device_signals (self);
+
+      if (self->enrolling_finger)
+        cc_fprintd_device_call_enroll_stop_sync (self->device, NULL, NULL);
+      cc_fprintd_device_call_release (self->device, NULL, NULL, NULL);
+    }
+
+  g_clear_object (&self->manager);
+  g_clear_object (&self->device);
+  g_clear_pointer (&self->enrolled_fingers, g_strfreev);
+
+  g_cancellable_cancel (self->cancellable);
+  g_clear_object (&self->cancellable);
+
+  G_OBJECT_CLASS (cc_fingerprint_dialog_parent_class)->dispose (object);
+}
+
+static void
+cc_fingerprint_dialog_get_property (GObject    *object,
+                                    guint       prop_id,
+                                    GValue     *value,
+                                    GParamSpec *pspec)
+{
+  CcFingerprintDialog *self = CC_FINGERPRINT_DIALOG (object);
+
+  switch (prop_id)
+    {
+    case PROP_MANAGER:
+      g_value_set_object (value, self->manager);
+      break;
+
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+    }
+}
+
+static void
+cc_fingerprint_dialog_set_property (GObject      *object,
+                                    guint         prop_id,
+                                    const GValue *value,
+                                    GParamSpec   *pspec)
+{
+  CcFingerprintDialog *self = CC_FINGERPRINT_DIALOG (object);
+
+  switch (prop_id)
+    {
+    case PROP_MANAGER:
+      g_set_object (&self->manager, g_value_get_object (value));
+      break;
+
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+    }
+}
+
+static void
+notify_error (CcFingerprintDialog *self,
+              const char          *error_message)
+{
+  if (error_message)
+    gtk_label_set_label (self->infobar_error, error_message);
+
+  gtk_widget_set_visible (self->error_infobar, error_message != NULL);
+}
+
+static gboolean
+fingerprint_icon_draw (GtkWidget *widget,
+                       cairo_t   *cr,
+                       gdouble   *progress_data)
+{
+  gdouble progress = 0.0f;
+
+  if (progress_data)
+    progress = *progress_data;
+
+  if (G_APPROX_VALUE (progress, 0.f, FLT_EPSILON) || progress > 1)
+    return FALSE;
+
+  GTK_WIDGET_GET_CLASS (widget)->draw (widget, cr);
+
+  if (progress > 0)
+    {
+      g_autoptr(GdkRGBA) outline_color = NULL;
+      GtkStyleContext *context;
+      GtkStateFlags state;
+      int outline_width;
+      int outline_offset;
+      int width;
+      int height;
+      int radius;
+      int delta;
+
+      context = gtk_widget_get_style_context (widget);
+      gtk_style_context_save (context);
+
+      state = gtk_style_context_get_state (context);
+
+      gtk_style_context_add_class (context, "progress");
+      gtk_style_context_get (context, state,
+                             "outline-width", &outline_width,
+                             "outline-offset", &outline_offset,
+                             "outline-color", &outline_color,
+                             NULL);
+
+      width = gtk_widget_get_allocated_width (widget);
+      height = gtk_widget_get_allocated_height (widget);
+      radius = MIN (width / 2, height / 2) + outline_offset;
+      delta = radius - outline_width / 2;
+
+      cairo_arc (cr, width / 2., height / 2., delta,
+                 1.5 * G_PI, (1.5 + progress * 2) * G_PI);
+      gdk_cairo_set_source_rgba (cr, outline_color);
+
+      cairo_set_line_width (cr, MIN (outline_width, radius));
+      cairo_set_line_cap (cr, CAIRO_LINE_CAP_BUTT);
+      cairo_stroke (cr);
+
+      gtk_style_context_restore (context);
+    }
+
+  return TRUE;
+}
+
+static GtkWidget *
+fingerprint_icon_new (const char *icon_name,
+                      const char *label_text,
+                      GType       icon_widget_type,
+                      gpointer    progress_data,
+                      GtkWidget **out_icon,
+                      GtkWidget **out_label)
+{
+  GtkStyleContext *context;
+  GtkWidget *box;
+  GtkWidget *label;
+  GtkWidget *image;
+  GtkWidget *icon_widget;
+
+  g_return_val_if_fail (g_type_is_a (icon_widget_type, GTK_TYPE_WIDGET), NULL);
+
+  box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 10);
+  gtk_widget_set_name (box, "fingerprint-box");
+  gtk_widget_set_hexpand (box, TRUE);
+
+  image = gtk_image_new_from_icon_name (icon_name, GTK_ICON_SIZE_DND);
+
+  if (icon_widget_type == GTK_TYPE_IMAGE)
+    icon_widget = image;
+  else
+    icon_widget = g_object_new (icon_widget_type, NULL);
+
+  if (progress_data)
+    g_signal_connect (image, "draw", G_CALLBACK (fingerprint_icon_draw),
+                      progress_data);
+
+  if (g_type_is_a (icon_widget_type, GTK_TYPE_BUTTON))
+    {
+      gtk_button_set_image (GTK_BUTTON (icon_widget), image);
+      gtk_button_set_relief (GTK_BUTTON (icon_widget), GTK_RELIEF_NONE);
+      gtk_widget_set_can_focus (icon_widget, FALSE);
+    }
+
+  gtk_widget_set_halign (icon_widget, GTK_ALIGN_CENTER);
+  gtk_widget_set_valign (icon_widget, GTK_ALIGN_CENTER);
+  gtk_widget_set_name (icon_widget, "fingerprint-image");
+
+  gtk_container_add (GTK_CONTAINER (box), icon_widget);
+
+  context = gtk_widget_get_style_context (icon_widget);
+  gtk_style_context_add_class (context, "fingerprint-image");
+
+  label = gtk_label_new_with_mnemonic (label_text);
+  gtk_container_add (GTK_CONTAINER (box), label);
+
+  context = gtk_widget_get_style_context (box);
+  gtk_style_context_add_class (context, "fingerprint-icon");
+
+  if (out_icon)
+    *out_icon = icon_widget;
+
+  if (out_label)
+    *out_label = label;
+
+  return box;
+}
+
+static GtkWidget *
+fingerprint_menu_button (const char *icon_name,
+                         const char *label_text)
+{
+  GtkWidget *flowbox_child;
+  GtkWidget *button;
+  GtkWidget *label;
+  GtkWidget *box;
+
+  box = fingerprint_icon_new (icon_name, label_text, GTK_TYPE_MENU_BUTTON, NULL,
+                              &button, &label);
+
+  flowbox_child = gtk_flow_box_child_new ();
+  gtk_widget_set_focus_on_click (flowbox_child, FALSE);
+  gtk_widget_set_name (flowbox_child, "fingerprint-flowbox");
+
+  gtk_container_add (GTK_CONTAINER (flowbox_child), box);
+
+  g_object_set_data (G_OBJECT (flowbox_child), "button", button);
+  g_object_set_data (G_OBJECT (flowbox_child), "icon",
+                     gtk_button_get_image (GTK_BUTTON (button)));
+  g_object_set_data (G_OBJECT (flowbox_child), "label", label);
+  g_object_set_data (G_OBJECT (button), "flowbox-child", flowbox_child);
+
+  return flowbox_child;
+}
+
+static gboolean
+prints_visibility_filter (GtkFlowBoxChild *child,
+                          gpointer         user_data)
+{
+  CcFingerprintDialog *self = user_data;
+  const char *finger_id;
+
+  if (gtk_stack_get_visible_child (self->stack) != self->prints_manager)
+    return FALSE;
+
+  finger_id = g_object_get_data (G_OBJECT (child), "finger-id");
+
+  if (!finger_id)
+    return TRUE;
+
+  if (!self->enrolled_fingers)
+    return FALSE;
+
+  return g_strv_contains ((const gchar **) self->enrolled_fingers, finger_id);
+}
+
+static void
+update_prints_to_add_visibility (CcFingerprintDialog *self)
+{
+  g_autoptr(GList) print_buttons = NULL;
+  GList *l;
+  guint i;
+
+  print_buttons = gtk_container_get_children (self->add_print_popover_box);
+
+  for (i = 0, l = print_buttons; i < N_VALID_FINGERS && l; ++i, l = l->next)
+    {
+      GtkWidget *button = l->data;
+      gboolean enrolled;
+
+      enrolled = self->enrolled_fingers &&
+                 g_strv_contains ((const gchar **) self->enrolled_fingers,
+                                  FINGER_IDS[i]);
+
+      gtk_widget_set_visible (button, !enrolled);
+    }
+}
+
+static void
+update_prints_visibility (CcFingerprintDialog *self)
+{
+  update_prints_to_add_visibility (self);
+
+  gtk_flow_box_invalidate_filter (self->prints_gallery);
+}
+
+static void
+list_enrolled_cb (GObject      *object,
+                  GAsyncResult *res,
+                  gpointer      user_data)
+{
+  g_auto(GStrv) enrolled_fingers = NULL;
+  g_autoptr(GError) error = NULL;
+  CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
+  CcFingerprintDialog *self = user_data;
+  guint n_enrolled_fingers = 0;
+
+  cc_fprintd_device_call_list_enrolled_fingers_finish (fprintd_device,
+                                                       &enrolled_fingers,
+                                                       res, &error);
+
+  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
+  gtk_spinner_stop (self->spinner);
+  gtk_widget_set_sensitive (GTK_WIDGET (self->add_print_icon), TRUE);
+
+  if (self->device_claimed)
+    gtk_widget_set_sensitive (GTK_WIDGET (self->prints_manager), TRUE);
+
+  if (error)
+    {
+      g_autofree char *dbus_error = g_dbus_error_get_remote_error (error);
+
+      if (!dbus_error || !g_str_has_suffix (dbus_error, ".Error.NoEnrolledPrints"))
+        {
+          g_autofree char *error_message = NULL;
+
+          g_dbus_error_strip_remote_error (error);
+          error_message = g_strdup_printf (_("Failed to list fingerprints: %s"),
+                                           error->message);
+          g_warning ("Listing of fingerprints on device %s failed: %s",
+                     cc_fprintd_device_get_name (self->device), error->message);
+          notify_error (self, error_message);
+          return;
+        }
+    }
+  else
+    {
+      n_enrolled_fingers = g_strv_length (enrolled_fingers);
+    }
+
+  self->enrolled_fingers = g_steal_pointer (&enrolled_fingers);
+  gtk_flow_box_set_max_children_per_line (self->prints_gallery,
+                                          MIN (3, n_enrolled_fingers + 1));
+
+  update_prints_visibility (self);
+
+  if (n_enrolled_fingers == N_VALID_FINGERS)
+    gtk_widget_set_sensitive (self->add_print_icon, FALSE);
+
+  if (n_enrolled_fingers > 0)
+    gtk_widget_show (GTK_WIDGET (self->delete_prints_button));
+}
+
+static void
+update_prints_store (CcFingerprintDialog *self)
+{
+  ActUser *user;
+
+  g_assert_true (CC_FPRINTD_IS_DEVICE (self->device));
+
+  gtk_spinner_start (self->spinner);
+  gtk_widget_set_sensitive (GTK_WIDGET (self->add_print_icon), FALSE);
+  gtk_widget_hide (GTK_WIDGET (self->delete_prints_button));
+
+  g_clear_pointer (&self->enrolled_fingers, g_strfreev);
+
+  user = cc_fingerprint_manager_get_user (self->manager);
+  cc_fprintd_device_call_list_enrolled_fingers (self->device,
+                                                act_user_get_user_name (user),
+                                                self->cancellable,
+                                                list_enrolled_cb,
+                                                self);
+}
+
+static void
+delete_prints_cb (GObject      *object,
+                  GAsyncResult *res,
+                  gpointer      user_data)
+{
+  g_autoptr(GError) error = NULL;
+  CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
+  CcFingerprintDialog *self = user_data;
+
+  cc_fprintd_device_call_delete_enrolled_fingers2_finish (fprintd_device, res, &error);
+
+  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
+  if (error)
+    {
+      g_autofree char *error_message = NULL;
+
+      g_dbus_error_strip_remote_error (error);
+      error_message = g_strdup_printf (_("Failed to delete saved fingerprints: %s"),
+                                       error->message);
+      g_warning ("Deletion of fingerprints on device %s failed: %s",
+                 cc_fprintd_device_get_name (self->device), error->message);
+      notify_error (self, error_message);
+    }
+
+  update_prints_store (self);
+  cc_fingerprint_manager_update_state (self->manager, NULL, NULL);
+}
+
+static void
+delete_enrolled_prints (CcFingerprintDialog *self)
+{
+  g_return_if_fail (self->device_claimed);
+
+  gtk_widget_set_sensitive (GTK_WIDGET (self->prints_manager), FALSE);
+  gtk_spinner_start (self->spinner);
+
+  cc_fprintd_device_call_delete_enrolled_fingers2 (self->device,
+                                                   self->cancellable,
+                                                   delete_prints_cb,
+                                                   self);
+}
+
+static const char *
+get_finger_name (const char *finger_id)
+{
+  if (g_str_equal (finger_id, "left-thumb"))
+    return _("Left thumb");
+  if (g_str_equal (finger_id, "left-middle-finger"))
+    return _("Left middle finger");
+  if (g_str_equal (finger_id, "left-index-finger"))
+    return _("_Left index finger");
+  if (g_str_equal (finger_id, "left-ring-finger"))
+    return _("Left ring finger");
+  if (g_str_equal (finger_id, "left-little-finger"))
+    return _("Left little finger");
+  if (g_str_equal (finger_id, "right-thumb"))
+    return _("Right thumb");
+  if (g_str_equal (finger_id, "right-middle-finger"))
+    return _("Right middle finger");
+  if (g_str_equal (finger_id, "right-index-finger"))
+    return _("_Right index finger");
+  if (g_str_equal (finger_id, "right-ring-finger"))
+    return _("Right ring finger");
+  if (g_str_equal (finger_id, "right-little-finger"))
+    return _("Right little finger");
+
+  g_return_val_if_reached (_("Unknown Finger"));
+}
+
+static gboolean
+have_multiple_devices (CcFingerprintDialog *self)
+{
+  g_autoptr(GList) devices_rows = NULL;
+
+  devices_rows = gtk_container_get_children (GTK_CONTAINER (self->devices_list));
+
+  return devices_rows && devices_rows->next;
+}
+
+static void
+set_enroll_result_message (CcFingerprintDialog *self,
+                           EnrollState          enroll_state,
+                           const char          *message)
+{
+  GtkStyleContext *style_context;
+  const char *icon_name;
+  guint i;
+
+  g_return_if_fail (enroll_state >= 0 && enroll_state < N_ENROLL_STATES);
+
+  style_context = gtk_widget_get_style_context (self->enroll_result_icon);
+
+  switch (enroll_state)
+    {
+      case ENROLL_STATE_WARNING:
+      case ENROLL_STATE_ERROR:
+        icon_name = "fingerprint-detection-warning-symbolic";
+        break;
+      case ENROLL_STATE_COMPLETED:
+        icon_name = "fingerprint-detection-complete-symbolic";
+        break;
+      default:
+        icon_name = "fingerprint-detection-symbolic";
+    }
+
+  for (i = 0; i < N_ENROLL_STATES; ++i)
+    gtk_style_context_remove_class (style_context, ENROLL_STATE_CLASSES[i]);
+
+  gtk_style_context_add_class (style_context, ENROLL_STATE_CLASSES[enroll_state]);
+
+  gtk_image_set_from_icon_name (self->enroll_result_image, icon_name, GTK_ICON_SIZE_DND);
+  gtk_label_set_label (self->enroll_result_message, message);
+}
+
+static gboolean
+stage_passed_timeout_cb (gpointer user_data)
+{
+  CcFingerprintDialog *self = user_data;
+  const char *current_message;
+
+  current_message = gtk_label_get_label (self->enroll_result_message);
+  set_enroll_result_message (self, ENROLL_STATE_NORMAL, current_message);
+  self->enroll_stage_passed_id = 0;
+
+  return FALSE;
+}
+
+static void
+handle_enroll_signal (CcFingerprintDialog *self,
+                      const char          *result,
+                      gboolean             done)
+{
+  gboolean completed;
+
+  g_return_if_fail (self->enrolling_finger);
+
+  g_debug ("Device enroll result message: %s, done: %d", result, done);
+
+  completed = g_str_equal (result, "enroll-completed");
+  g_clear_handle_id (&self->enroll_stage_passed_id, g_source_remove);
+
+  if (g_str_equal (result, "enroll-stage-passed") || completed)
+    {
+      guint enroll_stages;
+
+      enroll_stages = cc_fprintd_device_get_num_enroll_stages (self->device);
+
+      self->enroll_stages_passed++;
+
+      if (enroll_stages > 0)
+        self->enroll_progress =
+          MIN (1.0f, self->enroll_stages_passed / (double) enroll_stages);
+      else
+        g_warning ("The device %s requires an invalid number of enroll stages (%u)",
+                   cc_fprintd_device_get_name (self->device), enroll_stages);
+
+      g_debug ("Enroll state passed, %u/%u (%.2f%%)",
+               self->enroll_stages_passed, (guint) enroll_stages,
+               self->enroll_progress);
+
+      if (!completed)
+        {
+          set_enroll_result_message (self, ENROLL_STATE_SUCCESS, NULL);
+
+          self->enroll_stage_passed_id =
+            g_timeout_add (750, stage_passed_timeout_cb, self);
+        }
+      else
+        {
+          if (!G_APPROX_VALUE (self->enroll_progress, 1.0f, FLT_EPSILON))
+            {
+              g_warning ("Device marked enroll as completed, but progress is at %.2f",
+                         self->enroll_progress);
+              self->enroll_progress = 1.0f;
+            }
+        }
+    }
+  else if (!done)
+    {
+      const char *scan_type;
+      const char *message;
+      gboolean is_swipe;
+
+      scan_type = cc_fprintd_device_get_scan_type (self->device);
+      is_swipe = g_str_equal (scan_type, "swipe");
+
+      message = TR (enroll_result_str_to_msg (result, is_swipe));
+      set_enroll_result_message (self, ENROLL_STATE_RETRY, message);
+
+      self->enroll_stage_passed_id =
+        g_timeout_add (850, stage_passed_timeout_cb, self);
+    }
+
+  if (done)
+    {
+      if (completed)
+        {
+          /* TRANSLATORS: This is the message shown when the fingerprint
+           * enrollment has been completed successfully */
+          set_enroll_result_message (self, ENROLL_STATE_COMPLETED,
+                                     C_("Fingerprint enroll state", "Complete"));
+          gtk_widget_set_sensitive (GTK_WIDGET (self->cancel_button), FALSE);
+          gtk_widget_set_sensitive (GTK_WIDGET (self->done_button), TRUE);
+          gtk_widget_grab_focus (GTK_WIDGET (self->done_button));
+        }
+      else
+        {
+          const char *message;
+
+          if (g_str_equal (result, "enroll-disconnected"))
+            message = _("Fingerprint device disconnected");
+          else if (g_str_equal (result, "enroll-data-full"))
+            message = _("Fingerprint device storage is full");
+          else
+            message = _("Failed to enroll new fingerprint");
+
+          self->enrolling_finger = NULL;
+          set_enroll_result_message (self, ENROLL_STATE_WARNING, message);
+        }
+    }
+}
+
+static void
+enroll_start_cb (GObject      *object,
+                 GAsyncResult *res,
+                 gpointer      user_data)
+{
+  g_autoptr(GError) error = NULL;
+  CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
+  CcFingerprintDialog *self = user_data;
+
+  cc_fprintd_device_call_enroll_start_finish (fprintd_device, res, &error);
+
+  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
+  gtk_spinner_stop (self->spinner);
+
+  if (error)
+    {
+      g_autofree char *error_message = NULL;
+
+      self->enrolling_finger = NULL;
+
+      g_dbus_error_strip_remote_error (error);
+      error_message = g_strdup_printf (_("Failed to start enrollment: %s"),
+                                       error->message);
+      g_warning ("Enrollment on device %s failed: %s",
+                 cc_fprintd_device_get_name (self->device), error->message);
+      notify_error (self, error_message);
+
+      set_enroll_result_message (self, ENROLL_STATE_ERROR,
+                                 C_("Fingerprint enroll state",
+                                    "Failed to enroll new fingerprint"));
+      gtk_widget_set_sensitive (self->enrollment_view, FALSE);
+
+      return;
+    }
+}
+
+static void
+enroll_stop_cb (GObject      *object,
+                GAsyncResult *res,
+                gpointer      user_data)
+{
+  g_autoptr(GError) error = NULL;
+  CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
+  CcFingerprintDialog *self = user_data;
+
+  cc_fprintd_device_call_enroll_stop_finish (fprintd_device, res, &error);
+
+  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
+  self->enrolling_finger = NULL;
+  gtk_spinner_stop (self->spinner);
+  gtk_widget_set_sensitive (self->enrollment_view, TRUE);
+  gtk_stack_set_visible_child (self->stack, self->prints_manager);
+
+  if (error)
+    {
+      g_autofree char *error_message = NULL;
+
+      g_dbus_error_strip_remote_error (error);
+      error_message = g_strdup_printf (_("Failed to stop enrollment: %s"),
+                                       error->message);
+      g_warning ("Stopping enrollment on device %s failed: %s",
+                 cc_fprintd_device_get_name (self->device), error->message);
+      notify_error (self, error_message);
+
+      return;
+    }
+
+  cc_fingerprint_manager_update_state (self->manager, NULL, NULL);
+}
+
+static void
+enroll_stop (CcFingerprintDialog *self)
+{
+  g_return_if_fail (self->enrolling_finger);
+
+  gtk_spinner_start (self->spinner);
+  gtk_widget_set_sensitive (self->enrollment_view, FALSE);
+  cc_fprintd_device_call_enroll_stop (self->device, self->cancellable,
+                                      enroll_stop_cb, self);
+}
+
+static char *
+get_enrollment_string (CcFingerprintDialog *self,
+                       const char          *finger_id)
+{
+  char *ret;
+  const char *scan_type;
+  const char *device_name;
+  gboolean is_swipe;
+
+  device_name = NULL;
+  scan_type = cc_fprintd_device_get_scan_type (self->device);
+  is_swipe = g_str_equal (scan_type, "swipe");
+
+  if (have_multiple_devices (self))
+    device_name = cc_fprintd_device_get_name (self->device);
+
+  ret = TR (finger_str_to_msg (finger_id, device_name, is_swipe));
+
+  if (ret)
+    return ret;
+
+  return g_strdup (_("Repeatedly lift and place your finger on the reader to enroll your fingerprint"));
+}
+
+static void
+enroll_finger (CcFingerprintDialog *self,
+               const char          *finger_id)
+{
+  g_auto(GStrv) tmp_finger_name = NULL;
+  g_autofree char *enroll_message = NULL;
+  g_autofree char *finger_name = NULL;
+
+  g_return_if_fail (finger_id);
+
+  self->enrolling_finger = finger_id;
+  self->enroll_progress = 0;
+  self->enroll_stages_passed = 0;
+
+  g_debug ("Enrolling finger %s", finger_id);
+
+  enroll_message = TR (get_enrollment_string (self, finger_id));
+  tmp_finger_name = g_strsplit (get_finger_name (finger_id), "_", -1);
+  finger_name = g_strjoinv ("", tmp_finger_name);
+
+  set_enroll_result_message (self, ENROLL_STATE_NORMAL, NULL);
+  gtk_stack_set_visible_child (self->stack, self->enrollment_view);
+  gtk_label_set_label (self->enroll_message, enroll_message);
+  gtk_entry_set_text (self->enroll_print_entry, finger_name);
+  gtk_spinner_start (self->spinner);
+
+  cc_fprintd_device_call_enroll_start (self->device, finger_id, self->cancellable,
+                                       enroll_start_cb, self);
+}
+
+static void
+populate_enrollment_view (CcFingerprintDialog *self)
+{
+  GtkStyleContext *style_context;
+
+  self->enroll_result_icon =
+    fingerprint_icon_new ("fingerprint-detection-symbolic",
+                          NULL,
+                          GTK_TYPE_IMAGE,
+                          &self->enroll_progress,
+                          (GtkWidget **) &self->enroll_result_image,
+                          (GtkWidget **) &self->enroll_result_message);
+
+  gtk_container_add (GTK_CONTAINER (self->enroll_print_bin), self->enroll_result_icon);
+
+  style_context = gtk_widget_get_style_context (self->enroll_result_icon);
+  gtk_style_context_add_class (style_context,  "enroll-status");
+
+  gtk_widget_show_all (self->enroll_print_bin);
+}
+
+static void
+reenroll_finger_cb (CcFingerprintDialog *self)
+{
+  GtkWidget *button;
+  GtkWidget *flowbox_child;
+  const char *finger_id;
+
+  button = gtk_popover_get_relative_to (GTK_POPOVER (self->print_popover));
+  flowbox_child = g_object_get_data (G_OBJECT (button), "flowbox-child");
+  finger_id = g_object_get_data (G_OBJECT (flowbox_child), "finger-id");
+
+  enroll_finger (self, finger_id);
+}
+
+static void
+on_print_activated_cb (GtkFlowBox          *flowbox,
+                       GtkFlowBoxChild     *child,
+                       CcFingerprintDialog *self)
+{
+  GtkWidget *selected_button;
+
+  selected_button = g_object_get_data (G_OBJECT (child), "button");
+  gtk_button_clicked (GTK_BUTTON (selected_button));
+}
+
+static void
+on_enroll_cb (CcFingerprintDialog *self,
+              GtkModelButton      *button)
+{
+  const char *finger_id;
+
+  finger_id = g_object_get_data (G_OBJECT (button), "finger-id");
+  enroll_finger (self, finger_id);
+}
+
+static void
+populate_add_print_popover (CcFingerprintDialog *self)
+{
+  guint i;
+
+  for (i = 0; i < N_VALID_FINGERS; ++i)
+    {
+      GtkWidget *finger_item;
+
+      finger_item = gtk_model_button_new ();
+      gtk_button_set_label (GTK_BUTTON (finger_item), get_finger_name (FINGER_IDS[i]));
+      gtk_button_set_use_underline (GTK_BUTTON (finger_item), TRUE);
+      g_object_set_data (G_OBJECT (finger_item), "finger-id", (gpointer) FINGER_IDS[i]);
+      gtk_container_add (self->add_print_popover_box, finger_item);
+
+      g_signal_connect_object (finger_item, "clicked", G_CALLBACK (on_enroll_cb),
+                               self, G_CONNECT_SWAPPED);
+    }
+}
+
+static void
+populate_prints_gallery (CcFingerprintDialog *self)
+{
+  const char *add_print_label;
+  GtkWidget *button;
+  GtkStyleContext *style_context;
+  guint i;
+
+  g_return_if_fail (!GTK_IS_WIDGET (self->add_print_icon));
+
+  for (i = 0; i < N_VALID_FINGERS; ++i)
+    {
+      GtkWidget *flowbox_child;
+
+      flowbox_child = fingerprint_menu_button ("fingerprint-detection-symbolic",
+                                               get_finger_name (FINGER_IDS[i]));
+
+      button = g_object_get_data (G_OBJECT (flowbox_child), "button");
+
+      gtk_menu_button_set_popover (GTK_MENU_BUTTON (button),
+                                   GTK_WIDGET (self->print_popover));
+      /* Move the popover on click, so we can just reuse the same instance */
+      g_signal_connect_object (button, "clicked",
+                               G_CALLBACK (gtk_popover_set_relative_to),
+                               self->print_popover, G_CONNECT_SWAPPED);
+
+      g_object_set_data (G_OBJECT (flowbox_child), "finger-id",
+                         (gpointer) FINGER_IDS[i]);
+
+      gtk_flow_box_insert (self->prints_gallery, flowbox_child, i);
+    }
+
+  /* TRANSLATORS: This is the label for the button to enroll a new finger */
+  add_print_label = _("Scan new fingerprint");
+  self->add_print_icon = fingerprint_menu_button ("list-add-symbolic",
+                                                  add_print_label);
+  style_context = gtk_widget_get_style_context (self->add_print_icon);
+  gtk_style_context_add_class (style_context, "fingerprint-print-add");
+
+  populate_add_print_popover (self);
+  button = g_object_get_data (G_OBJECT (self->add_print_icon), "button");
+  gtk_menu_button_set_popover (GTK_MENU_BUTTON (button),
+                               GTK_WIDGET (self->add_print_popover));
+
+  gtk_flow_box_insert (self->prints_gallery, self->add_print_icon, -1);
+  gtk_flow_box_set_max_children_per_line (self->prints_gallery, 1);
+
+  gtk_widget_show_all (GTK_WIDGET (self->prints_gallery));
+  gtk_flow_box_set_filter_func (self->prints_gallery, prints_visibility_filter,
+                                self, NULL);
+
+  update_prints_visibility (self);
+}
+
+static void
+release_device_cb (GObject      *object,
+                   GAsyncResult *res,
+                   gpointer      user_data)
+{
+  g_autoptr(GError) error = NULL;
+  CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
+  CcFingerprintDialog *self = user_data;
+
+  cc_fprintd_device_call_release_finish (fprintd_device, res, &error);
+
+  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
+  if (error)
+    {
+      g_autofree char *error_message = NULL;
+
+      g_dbus_error_strip_remote_error (error);
+      error_message = g_strdup_printf (_("Failed to release fingerprint device %s: %s"),
+                                       cc_fprintd_device_get_name (self->device),
+                                       error->message);
+      g_warning ("%s", error_message);
+
+      notify_error (self, error_message);
+      return;
+    }
+
+  self->device_claimed = FALSE;
+}
+
+static void
+release_device (CcFingerprintDialog *self)
+{
+  if (!self->device || !self->device_claimed)
+    return;
+
+  disconnect_device_signals (self);
+
+  cc_fprintd_device_call_release (self->device,
+                                  self->cancellable,
+                                  release_device_cb,
+                                  self);
+}
+
+static void
+on_device_signal (CcFingerprintDialog *self,
+                  gchar               *sender_name,
+                  gchar               *signal_name,
+                  GVariant            *parameters,
+                  gpointer             user_data)
+{
+  if (g_str_equal (signal_name, "EnrollStatus"))
+    {
+      const char *result;
+      gboolean done;
+
+      if (!g_variant_is_of_type (parameters, G_VARIANT_TYPE ("(sb)")))
+        {
+          g_warning ("Unexpected enroll parameters type %s",
+                     g_variant_get_type_string (parameters));
+          return;
+        }
+
+      g_variant_get (parameters, "(&sb)", &result, &done);
+      handle_enroll_signal (self, result, done);
+    }
+}
+
+static void claim_device (CcFingerprintDialog *self);
+
+static void
+on_device_owner_changed (CcFprintdDevice     *device,
+                         GParamSpec          *spec,
+                         CcFingerprintDialog *self)
+{
+  g_autofree char *name_owner = NULL;
+
+  name_owner = g_dbus_proxy_get_name_owner (G_DBUS_PROXY (device));
+
+  if (!name_owner)
+    {
+      if (self->device_claimed)
+        {
+          disconnect_device_signals (self);
+
+          if (self->enrolling_finger)
+            {
+              set_enroll_result_message (self, ENROLL_STATE_ERROR,
+                                         C_("Fingerprint enroll state",
+                                            "Problem Reading Device"));
+              self->enrolling_finger = NULL;
+            }
+
+          self->device_claimed = FALSE;
+          claim_device (self);
+        }
+    }
+}
+
+static void
+claim_device_cb (GObject      *object,
+                 GAsyncResult *res,
+                 gpointer      user_data)
+{
+  g_autoptr(GError) error = NULL;
+  CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
+  CcFingerprintDialog *self = user_data;
+
+  cc_fprintd_device_call_claim_finish (fprintd_device, res, &error);
+
+  if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+    return;
+
+  if (error)
+    {
+      g_autofree char *dbus_error = g_dbus_error_get_remote_error (error);
+      g_autofree char *error_message = NULL;
+
+      if (dbus_error && g_str_has_suffix (dbus_error, ".Error.AlreadyInUse"))
+        self->device_claimed = TRUE;
+
+      g_dbus_error_strip_remote_error (error);
+      error_message = g_strdup_printf (_("Failed to claim fingerprint device %s: %s"),
+                                       cc_fprintd_device_get_name (self->device),
+                                       error->message);
+      g_warning ("%s", error_message);
+      notify_error (self, error_message);
+      return;
+    }
+
+  gtk_widget_set_sensitive (self->prints_manager, TRUE);
+  self->device_claimed = TRUE;
+  self->device_signal_id = g_signal_connect_object (self->device, "g-signal",
+                                                    G_CALLBACK (on_device_signal),
+                                                    self, G_CONNECT_SWAPPED);
+  self->device_name_owner_id = g_signal_connect_object (self->device, "notify::g-name-owner",
+                                                        G_CALLBACK (on_device_owner_changed),
+                                                        self, 0);
+}
+
+static void
+claim_device (CcFingerprintDialog *self)
+{
+  ActUser *user;
+
+  user = cc_fingerprint_manager_get_user (self->manager);
+  gtk_widget_set_sensitive (self->prints_manager, FALSE);
+
+  cc_fprintd_device_call_claim (self->device,
+                                act_user_get_user_name (user),
+                                self->cancellable,
+                                claim_device_cb,
+                                self);
+}
+
+static void
+on_stack_child_changed (CcFingerprintDialog *self)
+{
+  GtkWidget *visible_child = gtk_stack_get_visible_child (self->stack);
+
+  g_debug ("Fingerprint dialog child changed: %s",
+           gtk_stack_get_visible_child_name (self->stack));
+
+  gtk_widget_hide (GTK_WIDGET (self->back_button));
+  gtk_widget_hide (GTK_WIDGET (self->cancel_button));
+  gtk_widget_hide (GTK_WIDGET (self->done_button));
+
+  gtk_header_bar_set_show_close_button (self->titlebar, TRUE);
+  gtk_flow_box_invalidate_filter (self->prints_gallery);
+
+  if (visible_child == self->prints_manager)
+    {
+      gtk_widget_set_visible (GTK_WIDGET (self->back_button),
+                              have_multiple_devices (self));
+      notify_error (self, NULL);
+      update_prints_store (self);
+
+      if (!self->device_claimed)
+        claim_device (self);
+    }
+  else if (visible_child == self->enrollment_view)
+    {
+      gtk_header_bar_set_show_close_button (self->titlebar, FALSE);
+
+      gtk_widget_show (GTK_WIDGET (self->cancel_button));
+      gtk_widget_set_sensitive (GTK_WIDGET (self->cancel_button), TRUE);
+
+      gtk_widget_show (GTK_WIDGET (self->done_button));
+      gtk_widget_set_sensitive (GTK_WIDGET (self->done_button), FALSE);
+    }
+  else
+    {
+      release_device (self);
+      g_clear_object (&self->device);
+    }
+}
+
+static void
+cc_fingerprint_dialog_init (CcFingerprintDialog *self)
+{
+  g_autoptr(GtkCssProvider) provider = NULL;
+
+  self->cancellable = g_cancellable_new ();
+
+  gtk_widget_init_template (GTK_WIDGET (self));
+
+  provider = gtk_css_provider_new ();
+  gtk_css_provider_load_from_resource (provider,
+                                       "/org/gnome/control-center/user-accounts/cc-fingerprint-dialog.css");
+  gtk_style_context_add_provider_for_screen (gdk_screen_get_default (),
+                                             GTK_STYLE_PROVIDER (provider),
+                                             GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+
+  on_stack_child_changed (self);
+  g_signal_connect_object (self->stack, "notify::visible-child",
+                           G_CALLBACK (on_stack_child_changed), self,
+                           G_CONNECT_SWAPPED);
+
+  g_object_bind_property (self->stack, "visible-child-name",
+                          self->title, "label", G_BINDING_SYNC_CREATE);
+
+  populate_prints_gallery (self);
+  populate_enrollment_view (self);
+}
+
+static void
+select_device_row (CcFingerprintDialog *self,
+                   GtkListBoxRow       *row,
+                   GtkListBox          *listbox)
+{
+  CcFprintdDevice *device = g_object_get_data (G_OBJECT (row), "device");
+
+  g_return_if_fail (CC_FPRINTD_DEVICE (device));
+
+  g_set_object (&self->device, device);
+  gtk_stack_set_visible_child (self->stack, self->prints_manager);
+}
+
+static void
+on_devices_list (GObject      *object,
+                 GAsyncResult *res,
+                 gpointer      user_data)
+{
+  g_autolist (CcFprintdDevice) fprintd_devices = NULL;
+  g_autoptr(GError) error = NULL;
+  CcFingerprintManager *fingerprint_manager = CC_FINGERPRINT_MANAGER (object);
+  CcFingerprintDialog *self = CC_FINGERPRINT_DIALOG (user_data);
+
+  fprintd_devices = cc_fingerprint_manager_get_devices_finish (fingerprint_manager,
+                                                               res, &error);
+  gtk_spinner_stop (self->spinner);
+
+  if (fprintd_devices == NULL)
+    {
+      if (error)
+        {
+          g_autofree char *error_message = NULL;
+
+          g_dbus_error_strip_remote_error (error);
+          error_message = g_strdup_printf (_("Failed to get fingerprint devices: %s"),
+                                           error->message);
+          g_warning ("%s", error_message);
+          notify_error (self, error_message);
+        }
+
+      gtk_stack_set_visible_child (self->stack, GTK_WIDGET (self->no_devices_found));
+    }
+  else if (fprintd_devices->next == NULL)
+    {
+      /* We have just one device... Skip devices selection */
+      self->device = g_object_ref (fprintd_devices->data);
+      gtk_stack_set_visible_child (self->stack, self->prints_manager);
+    }
+  else
+    {
+      GList *l;
+
+      for (l = fprintd_devices; l; l = l->next)
+        {
+          CcFprintdDevice *device = l->data;
+          CcListRow *device_row;
+
+          device_row = g_object_new (CC_TYPE_LIST_ROW,
+                                     "visible", TRUE,
+                                     "icon-name", "go-next-symbolic",
+                                     "title", cc_fprintd_device_get_name (device),
+                                     NULL);
+
+          gtk_list_box_insert (self->devices_list, GTK_WIDGET (device_row), -1);
+          g_object_set_data_full (G_OBJECT (device_row), "device",
+                                  g_object_ref (device), g_object_unref);
+        }
+
+      gtk_stack_set_visible_child (self->stack, self->device_selector);
+    }
+}
+
+static void
+cc_fingerprint_dialog_constructed (GObject *object)
+{
+  CcFingerprintDialog *self = CC_FINGERPRINT_DIALOG (object);
+
+  bindtextdomain ("fprintd", GNOMELOCALEDIR);
+  bind_textdomain_codeset ("fprintd", "UTF-8");
+
+  gtk_spinner_start (self->spinner);
+  cc_fingerprint_manager_get_devices (self->manager, self->cancellable,
+                                      on_devices_list, self);
+}
+
+static void
+back_button_clicked_cb (CcFingerprintDialog *self)
+{
+  if (gtk_stack_get_visible_child (self->stack) == self->prints_manager)
+    {
+      notify_error (self, NULL);
+      gtk_stack_set_visible_child (self->stack, self->device_selector);
+      return;
+    }
+
+  g_return_if_reached ();
+}
+
+static void
+confirm_deletion_button_clicked_cb (CcFingerprintDialog *self)
+{
+  gtk_widget_hide (self->delete_confirmation_infobar);
+  delete_enrolled_prints (self);
+}
+
+static void
+cancel_deletion_button_clicked_cb (CcFingerprintDialog *self)
+{
+  gtk_widget_set_sensitive (self->prints_manager, TRUE);
+  gtk_widget_hide (self->delete_confirmation_infobar);
+}
+
+static void
+delete_prints_button_clicked_cb (CcFingerprintDialog *self)
+{
+  gtk_widget_set_sensitive (self->prints_manager, FALSE);
+  gtk_widget_show (self->delete_confirmation_infobar);
+}
+
+static void
+cancel_button_clicked_cb (CcFingerprintDialog *self)
+{
+  if (self->enrolling_finger)
+    {
+      g_cancellable_cancel (self->cancellable);
+      g_set_object (&self->cancellable, g_cancellable_new ());
+
+      g_debug ("Cancelling enroll operation");
+      enroll_stop (self);
+    }
+  else
+    {
+      gtk_stack_set_visible_child (self->stack, self->prints_manager);
+    }
+}
+
+static void
+done_button_clicked_cb (CcFingerprintDialog *self)
+{
+  g_return_if_fail (self->enrolling_finger);
+
+  g_debug ("Completeing enroll operation");
+  enroll_stop (self);
+}
+
+static void
+fingerprint_dialog_delete_cb (CcFingerprintDialog *self)
+{
+  cc_fingerprint_manager_update_state (self->manager, NULL, NULL);
+  gtk_widget_destroy (GTK_WIDGET (self));
+}
+
+static void
+cc_fingerprint_dialog_class_init (CcFingerprintDialogClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+
+  gtk_widget_class_set_template_from_resource (widget_class,
+    "/org/gnome/control-center/user-accounts/cc-fingerprint-dialog.ui");
+
+  object_class->constructed = cc_fingerprint_dialog_constructed;
+  object_class->dispose = cc_fingerprint_dialog_dispose;
+  object_class->get_property = cc_fingerprint_dialog_get_property;
+  object_class->set_property = cc_fingerprint_dialog_set_property;
+
+  properties[PROP_MANAGER] =
+    g_param_spec_object ("fingerprint-manager",
+                         "FingerprintManager",
+                         "The CC fingerprint manager",
+                         CC_TYPE_FINGERPRINT_MANAGER,
+                         G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY);
+
+  g_object_class_install_properties (object_class, N_PROPS, properties);
+
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, add_print_popover);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, add_print_popover_box);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, back_button);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, cancel_button);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, delete_confirmation_infobar);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, delete_prints_button);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, device_selector);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, devices_list);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, done_button);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, enroll_message);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, enroll_print_bin);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, enroll_print_entry);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, enrollment_view);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, error_infobar);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, infobar_error);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, no_devices_found);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, print_popover);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, prints_gallery);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, prints_manager);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, spinner);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, stack);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, title);
+  gtk_widget_class_bind_template_child (widget_class, CcFingerprintDialog, titlebar);
+
+  gtk_widget_class_bind_template_callback (widget_class, back_button_clicked_cb);
+  gtk_widget_class_bind_template_callback (widget_class, cancel_button_clicked_cb);
+  gtk_widget_class_bind_template_callback (widget_class, cancel_deletion_button_clicked_cb);
+  gtk_widget_class_bind_template_callback (widget_class, confirm_deletion_button_clicked_cb);
+  gtk_widget_class_bind_template_callback (widget_class, delete_prints_button_clicked_cb);
+  gtk_widget_class_bind_template_callback (widget_class, done_button_clicked_cb);
+  gtk_widget_class_bind_template_callback (widget_class, fingerprint_dialog_delete_cb);
+  gtk_widget_class_bind_template_callback (widget_class, on_print_activated_cb);
+  gtk_widget_class_bind_template_callback (widget_class, reenroll_finger_cb);
+  gtk_widget_class_bind_template_callback (widget_class, select_device_row);
+}
diff --git a/panels/user-accounts/cc-fingerprint-dialog.h b/panels/user-accounts/cc-fingerprint-dialog.h
new file mode 100644
index 0000000..9afac0b
--- /dev/null
+++ b/panels/user-accounts/cc-fingerprint-dialog.h
@@ -0,0 +1,37 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2020 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Authors: Marco Trevisan <marco.trevisan@canonical.com>
+ */
+
+#pragma once
+
+#include <gtk/gtk.h>
+#include "cc-fingerprint-manager.h"
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_FINGERPRINT_DIALOG (cc_fingerprint_dialog_get_type ())
+
+G_DECLARE_FINAL_TYPE (CcFingerprintDialog, cc_fingerprint_dialog,
+                      CC, FINGERPRINT_DIALOG, GtkWindow)
+
+CcFingerprintDialog *cc_fingerprint_dialog_new (CcFingerprintManager *manager);
+
+G_END_DECLS
diff --git a/panels/user-accounts/cc-fingerprint-dialog.ui b/panels/user-accounts/cc-fingerprint-dialog.ui
new file mode 100644
index 0000000..2613d5e
--- /dev/null
+++ b/panels/user-accounts/cc-fingerprint-dialog.ui
@@ -0,0 +1,462 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<interface>
+  <template class="CcFingerprintDialog" parent="GtkWindow">
+    <style>
+      <class name="fingerprint" />
+    </style>
+    <property name="name">fingerprint-dialog</property>
+    <property name="title" translatable="yes">Fingerprint Manager</property>
+    <property name="type-hint">dialog</property>
+    <property name="window-position">center-on-parent</property>
+    <property name="destroy-with-parent">True</property>
+    <property name="default-width">600</property>
+    <property name="default-height">400</property>
+    <property name="modal">True</property>
+    <signal name="delete-event" handler="fingerprint_dialog_delete_cb"/>
+    <child type="titlebar">
+      <object class="GtkHeaderBar" id="titlebar">
+        <property name="visible">True</property>
+        <property name="show-close-button">True</property>
+        <child type="title">
+          <object class="GtkLabel" id="title">
+            <property name="visible">True</property>
+            <property name="label" translatable="yes">Fingerprint</property>
+            <attributes>
+              <attribute name="weight" value="bold"/>
+            </attributes>
+          </object>
+        </child>
+        <child>
+          <object class="GtkButton" id="cancel_button">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="receives_default">False</property>
+            <property name="valign">center</property>
+            <property name="use-underline">True</property>
+            <property name="label" translatable="yes">_Cancel</property>
+            <signal name="clicked" handler="cancel_button_clicked_cb" object="CcFingerprintDialog" swapped="yes" />
+          </object>
+        </child>
+        <child>
+          <object class="GtkButton" id="back_button">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="receives_default">False</property>
+            <property name="valign">center</property>
+            <property name="use-underline">True</property>
+            <signal name="clicked" handler="back_button_clicked_cb" object="CcFingerprintDialog" swapped="yes" />
+            <style>
+              <class name="image-button"/>
+            </style>
+            <child internal-child="accessible">
+              <object class="AtkObject" id="a11y-back">
+                <property name="accessible-name" translatable="yes">Back</property>
+              </object>
+            </child>
+            <child>
+              <object class="GtkImage">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="icon_name">go-previous-symbolic</property>
+                <property name="icon_size">1</property>
+              </object>
+            </child>
+          </object>
+        </child>
+
+        <child>
+          <object class="GtkButton" id="done_button">
+            <property name="use-underline">True</property>
+            <property name="can-default">True</property>
+            <property name="visible">True</property>
+            <property name="sensitive">False</property>
+            <property name="label" translatable="yes">_Done</property>
+            <signal name="clicked" handler="done_button_clicked_cb" object="CcFingerprintDialog" swapped="yes" />
+            <style>
+              <class name="suggested-action"/>
+            </style>
+          </object>
+          <packing>
+            <property name="pack-type">end</property>
+          </packing>
+        </child>
+
+        <child>
+          <object class="GtkSpinner" id="spinner">
+            <property name="visible">True</property>
+            <property name="active">False</property>
+            <property name="can_focus">False</property>
+          </object>
+          <packing>
+            <property name="pack-type">end</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+
+    <child>
+      <object class="GtkBox">
+        <property name="visible">True</property>
+        <property name="orientation">vertical</property>
+
+        <child>
+          <object class="GtkInfoBar" id="delete_confirmation_infobar">
+            <property name="visible">False</property>
+            <property name="can_focus">False</property>
+            <property name="border_width">0</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">5</property>
+            <child internal-child="action_area">
+              <object class="GtkButtonBox">
+                <property name="can_focus">False</property>
+                <property name="layout_style">end</property>
+                <child>
+                  <object class="GtkButton">
+                    <signal name="clicked" handler="cancel_deletion_button_clicked_cb" object="CcFingerprintDialog" swapped="yes"/>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="label" translatable="yes">_No</property>
+                    <property name="use-underline">True</property>
+                  </object>
+                </child>
+                <child>
+                  <object class="GtkButton">
+                    <signal name="clicked" handler="confirm_deletion_button_clicked_cb" object="CcFingerprintDialog" swapped="yes"/>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="receives_default">True</property>
+                    <property name="label" translatable="yes">_Yes</property>
+                    <property name="use-underline">True</property>
+                    <style>
+                      <class name="destructive-action"/>
+                    </style>
+                  </object>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="pack_type">end</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child internal-child="content_area">
+              <object class="GtkBox">
+                <property name="can_focus">False</property>
+                <property name="spacing">16</property>
+                <property name="margin-start">12</property>
+                <child>
+                  <object class="GtkLabel">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="halign">start</property>
+                    <property name="hexpand">False</property>
+                    <property name="wrap">True</property>
+                    <property name="label" translatable="yes">Do you want to delete your registered fingerprints so fingerprint login is disabled?</property>
+                    <attributes>
+                      <attribute name="weight" value="bold"/>
+                    </attributes>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+
+        <child>
+          <object class="GtkInfoBar" id="error_infobar">
+            <property name="name">error_infobar</property>
+            <property name="visible">False</property>
+            <property name="can_focus">False</property>
+            <property name="border_width">0</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">12</property>
+            <style>
+              <class name="error"/>
+            </style>
+            <child internal-child="content_area">
+              <object class="GtkBox">
+                <property name="can_focus">False</property>
+                <property name="spacing">16</property>
+                <child>
+                  <object class="GtkLabel" id="infobar_error">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="halign">start</property>
+                    <property name="hexpand">False</property>
+                    <property name="wrap">True</property>
+                  </object>
+                </child>
+              </object>
+            </child>
+          </object>
+        </child>
+
+        <child>
+          <object class="GtkScrolledWindow">
+            <property name="visible">True</property>
+            <property name="halign">fill</property>
+            <property name="valign">fill</property>
+            <property name="propagate-natural-width">True</property>
+            <property name="can-focus">False</property>
+            <property name="hscrollbar-policy">never</property>
+
+            <child>
+              <object class="GtkStack" id="stack">
+                <property name="visible">True</property>
+                <property name="transition_duration">300</property>
+                <property name="margin-start">20</property>
+                <property name="margin-end">20</property>
+                <property name="margin-top">30</property>
+                <property name="margin-bottom">30</property>
+                <property name="width_request">360</property>
+                <property name="halign">center</property>
+
+                <child>
+                  <object class="GtkBox" id="no_devices_found">
+                    <property name="visible">True</property>
+                    <property name="orientation">vertical</property>
+                    <property name="valign">center</property>
+                    <property name="spacing">12</property>
+                    <style>
+                      <class name="dim-label"/>
+                    </style>
+                    <child>
+                      <object class="GtkImage">
+                        <property name="visible">True</property>
+                        <property name="icon_name">fingerprint-detection-symbolic</property>
+                        <property name="pixel_size">192</property>
+                      </object>
+                    </child>
+                    <child>
+                      <object class="GtkLabel">
+                        <property name="visible">True</property>
+                        <property name="label" translatable="yes" comments="Translators: This is the empty state page label which states that there are no devices ready.">No Fingerprint device</property>
+                        <attributes>
+                          <attribute name="weight" value="bold"/>
+                          <attribute name="scale" value="1.6"/>
+                        </attributes>
+                      </object>
+                    </child>
+                    <child>
+                      <object class="GtkLabel">
+                        <property name="visible">True</property>
+                        <property name="label" translatable="yes">Ensure the device is properly connected.</property>
+                      </object>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="name" translatable="yes">No fingerprint device</property>
+                  </packing>
+                </child>
+
+                <child>
+                  <object class="GtkBox" id="device_selector">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="halign">center</property>
+                    <property name="valign">center</property>
+                    <property name="spacing">10</property>
+                    <property name="orientation">vertical</property>
+
+                    <child>
+                      <object class="GtkLabel">
+                        <property name="visible">True</property>
+                        <property name="label" translatable="yes">Choose the fingerprint device you want to configure</property>
+                        <property name="halign">start</property>
+                        <attributes>
+                          <attribute name="weight" value="bold"/>
+                        </attributes>
+                      </object>
+                    </child>
+
+                    <child>
+                      <object class="GtkScrolledWindow">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="hscrollbar-policy">never</property>
+                        <property name="propagate-natural-height">True</property>
+                        <child>
+                          <object class="GtkListBox" id="devices_list">
+                            <property name="visible">True</property>
+                            <property name="selection-mode">none</property>
+                            <property name="valign">center</property>
+                            <signal name="row-activated" handler="select_device_row" object="CcFingerprintDialog" swapped="yes"/>
+                            <style>
+                              <class name="frame" />
+                            </style>
+                          </object>
+                        </child>
+                      </object>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="name" translatable="yes">Fingerprint Device</property>
+                  </packing>
+                </child>
+
+                <child>
+                  <object class="GtkBox" id="prints_manager">
+                    <property name="visible">True</property>
+                    <property name="orientation">vertical</property>
+                    <property name="valign">fill</property>
+                    <property name="spacing">12</property>
+                    <child>
+                      <object class="GtkLabel">
+                        <property name="visible">True</property>
+                        <property name="label" translatable="yes">Fingerprint login allows you to unlock and log into your computer with your finger</property>
+                      </object>
+                    </child>
+                    <child>
+                      <object class="GtkFlowBox" id="prints_gallery">
+                        <style>
+                          <class name="prints-gallery" />
+                        </style>
+                        <property name="visible">True</property>
+                        <property name="margin">12</property>
+                        <property name="column-spacing">12</property>
+                        <property name="row-spacing">12</property>
+                        <property name="homogeneous">True</property>
+                        <property name="halign">center</property>
+                        <property name="valign">center</property>
+                        <property name="vexpand">True</property>
+                        <property name="min-children-per-line">1</property>
+                        <property name="max-children-per-line">3</property>
+                        <property name="activate-on-single-click">True</property>
+                        <property name="selection-mode">none</property>
+                        <signal name="child-activated" handler="on_print_activated_cb" object="CcFingerprintDialog" swapped="no" />
+                      </object>
+                    </child>
+
+                    <child>
+                      <object class="GtkButton" id="delete_prints_button">
+                        <property name="visible">False</property>
+                        <property name="can_focus">True</property>
+                        <property name="halign">end</property>
+                        <property name="use-underline">True</property>
+                        <property name="label" translatable="yes">_Delete Fingerprints</property>
+                        <property name="margin-top">10</property>
+                        <property name="margin-bottom">10</property>
+                        <signal name="clicked" handler="delete_prints_button_clicked_cb" object="CcFingerprintDialog" swapped="yes"/>
+                        <style>
+                          <class name="destructive-action"/>
+                        </style>
+                      </object>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="name" translatable="yes">Fingerprint Login</property>
+                  </packing>
+                </child>
+
+                <child>
+                  <object class="GtkBox" id="enrollment_view">
+                    <property name="visible">True</property>
+                    <property name="orientation">vertical</property>
+                    <property name="valign">fill</property>
+                    <property name="spacing">12</property>
+                    <style>
+                      <class name="enrollment" />
+                    </style>
+                    <child>
+                      <object class="GtkLabel" id="enroll_message">
+                        <property name="visible">True</property>
+                        <property name="wrap">True</property>
+                      </object>
+                    </child>
+                    <child>
+                      <object class="GtkBox">
+                        <property name="visible">True</property>
+                        <property name="margin">12</property>
+                        <property name="spacing">12</property>
+                        <property name="halign">fill</property>
+                        <property name="valign">center</property>
+                        <property name="vexpand">True</property>
+                        <property name="hexpand">True</property>
+                        <property name="orientation">vertical</property>
+                        <child>
+                          <object class="GtkBox" id="enroll_print_bin">
+                            <property name="hexpand">True</property>
+                            <property name="visible">True</property>
+                          </object>
+                        </child>
+                        <child>
+                          <object class="GtkEntry" id="enroll_print_entry">
+                            <property name="valign">end</property>
+                            <property name="visible">True</property>
+                            <property name="halign">center</property>
+                            <property name="editable">False</property>
+                            <property name="sensitive">False</property>
+                            <property name="width-request">200</property>
+                          </object>
+                        </child>
+                      </object>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="name" translatable="yes">Fingerprint Enroll</property>
+                  </packing>
+                </child>
+
+              </object>
+            </child>
+          </object>
+        </child>
+
+      </object>
+    </child>
+  </template>
+
+  <object class="GtkPopoverMenu" id="print_popover">
+    <property name="position">bottom</property>
+    <child>
+      <object class="GtkBox">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="margin">12</property>
+        <property name="spacing">6</property>
+        <property name="orientation">vertical</property>
+        <child>
+          <object class="GtkModelButton">
+            <property name="label" translatable="yes">_Re-enroll this fingerâ¦</property>
+            <property name="visible">True</property>
+            <property name="can_focus">True</property>
+            <property name="receives_default">True</property>
+            <property name="use_underline">True</property>
+            <property name="xalign">0.0</property>
+            <signal name="clicked" handler="reenroll_finger_cb" object="CcFingerprintDialog" swapped="yes"/>
+          </object>
+        </child>
+      </object>
+    </child>
+  </object>
+
+  <object class="GtkPopoverMenu" id="add_print_popover">
+    <property name="position">bottom</property>
+    <child>
+      <object class="GtkBox" id="add_print_popover_box">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="margin">12</property>
+        <property name="spacing">6</property>
+        <property name="orientation">vertical</property>
+      </object>
+    </child>
+  </object>
+
+</interface>
diff --git a/panels/user-accounts/cc-fingerprint-manager.c b/panels/user-accounts/cc-fingerprint-manager.c
new file mode 100644
index 0000000..07a50e7
--- /dev/null
+++ b/panels/user-accounts/cc-fingerprint-manager.c
@@ -0,0 +1,597 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2020 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Authors: Marco Trevisan <marco.trevisan@canonical.com>
+ */
+
+#include "cc-fingerprint-manager.h"
+
+#include "cc-fprintd-generated.h"
+#include "cc-user-accounts-enum-types.h"
+
+#define CC_FPRINTD_NAME "net.reactivated.Fprint"
+#define CC_FPRINTD_MANAGER_PATH "/net/reactivated/Fprint/Manager"
+
+struct _CcFingerprintManager
+{
+  GObject parent_instance;
+};
+
+typedef struct
+{
+  ActUser           *user;
+  GTask             *current_task;
+  CcFingerprintState state;
+  GList             *cached_devices;
+} CcFingerprintManagerPrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (CcFingerprintManager, cc_fingerprint_manager, G_TYPE_OBJECT)
+
+enum {
+  PROP_0,
+  PROP_USER,
+  PROP_STATE,
+  N_PROPS
+};
+
+static GParamSpec *properties[N_PROPS];
+
+static void cleanup_cached_devices (CcFingerprintManager *self);
+
+CcFingerprintManager *
+cc_fingerprint_manager_new (ActUser *user)
+{
+  return g_object_new (CC_TYPE_FINGERPRINT_MANAGER, "user", user, NULL);
+}
+
+static void
+cc_fingerprint_manager_dispose (GObject *object)
+{
+  CcFingerprintManager *self = CC_FINGERPRINT_MANAGER (object);
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+
+  if (priv->current_task)
+    {
+      g_cancellable_cancel (g_task_get_cancellable (priv->current_task));
+      priv->current_task = NULL;
+    }
+
+  g_clear_object (&priv->user);
+  cleanup_cached_devices (self);
+
+  G_OBJECT_CLASS (cc_fingerprint_manager_parent_class)->dispose (object);
+}
+
+static void
+cc_fingerprint_manager_get_property (GObject    *object,
+                                     guint       prop_id,
+                                     GValue     *value,
+                                     GParamSpec *pspec)
+{
+  CcFingerprintManager *self = CC_FINGERPRINT_MANAGER (object);
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+
+  switch (prop_id)
+    {
+    case PROP_STATE:
+      g_value_set_enum (value, priv->state);
+      break;
+
+    case PROP_USER:
+      g_value_set_object (value, priv->user);
+      break;
+
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+    }
+}
+
+static void
+cc_fingerprint_manager_set_property (GObject      *object,
+                                     guint         prop_id,
+                                     const GValue *value,
+                                     GParamSpec   *pspec)
+{
+  CcFingerprintManager *self = CC_FINGERPRINT_MANAGER (object);
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+
+  switch (prop_id)
+    {
+    case PROP_USER:
+      g_set_object (&priv->user, g_value_get_object (value));
+      break;
+
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+    }
+}
+
+static void
+cc_fingerprint_manager_constructed (GObject *object)
+{
+  cc_fingerprint_manager_update_state (CC_FINGERPRINT_MANAGER (object), NULL, NULL);
+}
+
+static void
+cc_fingerprint_manager_class_init (CcFingerprintManagerClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  object_class->constructed = cc_fingerprint_manager_constructed;
+  object_class->dispose = cc_fingerprint_manager_dispose;
+  object_class->get_property = cc_fingerprint_manager_get_property;
+  object_class->set_property = cc_fingerprint_manager_set_property;
+
+  properties[PROP_USER] =
+    g_param_spec_object ("user",
+                         "User",
+                         "The user account we manage the fingerprint for",
+                         ACT_TYPE_USER,
+                         G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY);
+
+  properties[PROP_STATE] =
+    g_param_spec_enum ("state",
+                       "State",
+                       "The state of the fingerprint for the user",
+                       CC_TYPE_FINGERPRINT_STATE, CC_FINGERPRINT_STATE_NONE,
+                       G_PARAM_STATIC_STRINGS | G_PARAM_READABLE);
+
+  g_object_class_install_properties (object_class, N_PROPS, properties);
+}
+
+static void
+cc_fingerprint_manager_init (CcFingerprintManager *self)
+{
+}
+
+typedef struct
+{
+  guint  waiting_devices;
+  GList *devices;
+} DeviceListData;
+
+static void
+object_list_destroy_notify (gpointer data)
+{
+  GList *list = data;
+  g_list_free_full (list, g_object_unref);
+}
+
+static void
+on_device_owner_changed (CcFingerprintManager *self,
+                         GParamSpec           *spec,
+                         CcFprintdDevice      *device)
+{
+  g_autofree char *name_owner = NULL;
+
+  name_owner = g_dbus_proxy_get_name_owner (G_DBUS_PROXY (device));
+
+  if (!name_owner)
+    {
+      g_debug ("Fprintd daemon disappeared, cleaning cache...");
+      cleanup_cached_devices (self);
+    }
+}
+
+static void
+cleanup_cached_devices (CcFingerprintManager *self)
+{
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+  CcFprintdDevice *target_device;
+
+  if (!priv->cached_devices)
+    return;
+
+  g_return_if_fail (CC_FPRINTD_IS_DEVICE (priv->cached_devices->data));
+
+  target_device = CC_FPRINTD_DEVICE (priv->cached_devices->data);
+
+  g_signal_handlers_disconnect_by_func (target_device, on_device_owner_changed, self);
+  g_list_free_full (g_steal_pointer (&priv->cached_devices), g_object_unref);
+}
+
+static void
+cache_devices (CcFingerprintManager *self,
+               GList                *devices)
+{
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+  CcFprintdDevice *target_device;
+
+  g_return_if_fail (devices && CC_FPRINTD_IS_DEVICE (devices->data));
+
+  cleanup_cached_devices (self);
+  priv->cached_devices = g_list_copy_deep (devices, (GCopyFunc) g_object_ref, NULL);
+
+  /* We can monitor just the first device name, as the owner is just the same */
+  target_device = CC_FPRINTD_DEVICE (priv->cached_devices->data);
+
+  g_signal_connect_object (target_device, "notify::g-name-owner",
+                           G_CALLBACK (on_device_owner_changed), self,
+                           G_CONNECT_SWAPPED);
+}
+
+static void
+on_device_proxy (GObject *object, GAsyncResult *res, gpointer user_data)
+{
+  g_autoptr(CcFprintdDevice) fprintd_device = NULL;
+  g_autoptr(GTask) task = G_TASK (user_data);
+  g_autoptr(GError) error = NULL;
+  CcFingerprintManager *self = g_task_get_source_object (task);
+  DeviceListData *list_data = g_task_get_task_data (task);
+
+  fprintd_device = cc_fprintd_device_proxy_new_for_bus_finish (res, &error);
+  list_data->waiting_devices--;
+
+  if (error)
+    {
+      if (list_data->waiting_devices == 0)
+        g_task_return_error (task, g_steal_pointer (&error));
+      else if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Impossible to ge the device proxy: %s", error->message);
+
+      return;
+    }
+
+  g_debug ("Got fingerprint device %s", cc_fprintd_device_get_name (fprintd_device));
+
+  list_data->devices = g_list_append (list_data->devices, g_steal_pointer (&fprintd_device));
+
+  if (list_data->waiting_devices == 0)
+    {
+      cache_devices (self, list_data->devices);
+      g_task_return_pointer (task, g_steal_pointer (&list_data->devices), object_list_destroy_notify);
+    }
+}
+
+static void
+on_devices_list (GObject *object, GAsyncResult *res, gpointer user_data)
+{
+  CcFprintdManager *fprintd_manager = CC_FPRINTD_MANAGER (object);
+  g_autoptr(GTask) task = G_TASK (user_data);
+  g_autoptr(GError) error = NULL;
+  g_auto(GStrv) devices_list = NULL;
+  DeviceListData *list_data;
+  guint i;
+
+  cc_fprintd_manager_call_get_devices_finish (fprintd_manager, &devices_list, res, &error);
+
+  if (error)
+    {
+      g_task_return_error (task, g_steal_pointer (&error));
+      return;
+    }
+
+  if (!devices_list || !devices_list[0])
+    {
+      g_task_return_pointer (task, NULL, NULL);
+      return;
+    }
+
+  list_data = g_new0 (DeviceListData, 1);
+  g_task_set_task_data (task, list_data, g_free);
+
+  g_debug ("Fprintd replied with %u device(s)", g_strv_length (devices_list));
+
+  for (i = 0; devices_list[i] != NULL; ++i)
+    {
+      const char *device_path = devices_list[i];
+
+      list_data->waiting_devices++;
+
+      cc_fprintd_device_proxy_new_for_bus (G_BUS_TYPE_SYSTEM,
+                                           G_DBUS_PROXY_FLAGS_NONE,
+                                           CC_FPRINTD_NAME,
+                                           device_path,
+                                           g_task_get_cancellable (task),
+                                           on_device_proxy,
+                                           g_object_ref (task));
+    }
+}
+
+static void
+on_manager_proxy (GObject *object, GAsyncResult *res, gpointer user_data)
+{
+  g_autoptr(GTask) task = G_TASK (user_data);
+  g_autoptr(CcFprintdManager) fprintd_manager = NULL;
+  g_autoptr(GError) error = NULL;
+
+  fprintd_manager = cc_fprintd_manager_proxy_new_for_bus_finish (res, &error);
+
+  if (error)
+    {
+      g_task_return_error (task, g_steal_pointer (&error));
+      return;
+    }
+
+  g_debug ("Fprintd manager connected");
+
+  cc_fprintd_manager_call_get_devices (fprintd_manager,
+                                       g_task_get_cancellable (task),
+                                       on_devices_list,
+                                       g_object_ref (task));
+}
+
+static void
+fprintd_manager_connect (CcFingerprintManager *self,
+                         GAsyncReadyCallback   callback,
+                         GTask                *task)
+{
+  g_assert (G_IS_TASK (task));
+
+  cc_fprintd_manager_proxy_new_for_bus (G_BUS_TYPE_SYSTEM, G_DBUS_PROXY_FLAGS_NONE,
+                                        CC_FPRINTD_NAME, CC_FPRINTD_MANAGER_PATH,
+                                        g_task_get_cancellable (task),
+                                        callback,
+                                        task);
+}
+
+void
+cc_fingerprint_manager_get_devices (CcFingerprintManager *self,
+                                    GCancellable         *cancellable,
+                                    GAsyncReadyCallback   callback,
+                                    gpointer              user_data)
+{
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+  g_autoptr(GTask) task = NULL;
+
+  task = g_task_new (self, cancellable, callback, user_data);
+  g_task_set_source_tag (task, cc_fingerprint_manager_get_devices);
+
+  if (priv->cached_devices)
+    {
+      GList *devices;
+
+      devices = g_list_copy_deep (priv->cached_devices, (GCopyFunc) g_object_ref, NULL);
+      g_task_return_pointer (task, devices, object_list_destroy_notify);
+      return;
+    }
+
+  fprintd_manager_connect (self, on_manager_proxy, g_steal_pointer (&task));
+}
+
+/**
+ * cc_fingerprint_manager_get_devices_finish:
+ * @self: The #CcFingerprintManager
+ * @result: A #GAsyncResult
+ * @error: Return location for errors, or %NULL to ignore
+ *
+ * Finish an asynchronous operation to list all devices.
+ *
+ * Returns: (element-type CcFprintdDevice) (transfer full): List of prints or %NULL on error
+ */
+GList *
+cc_fingerprint_manager_get_devices_finish (CcFingerprintManager *self,
+                                           GAsyncResult         *res,
+                                           GError              **error)
+{
+  g_return_val_if_fail (g_task_is_valid (res, self), NULL);
+
+  return g_task_propagate_pointer (G_TASK (res), error);
+}
+
+static void
+set_state (CcFingerprintManager *self,
+           CcFingerprintState    state)
+{
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+
+  if (priv->state == state)
+    return;
+
+  g_debug ("Fingerprint manager state changed to %d", state);
+
+  priv->state = state;
+  g_object_notify_by_pspec (G_OBJECT (self), properties[PROP_STATE]);
+}
+
+typedef struct
+{
+  guint                     waiting_devices;
+  CcFingerprintStateUpdated callback;
+  gpointer                  user_data;
+} UpdateStateData;
+
+static void
+update_state_callback (GObject      *object,
+                       GAsyncResult *res,
+                       gpointer      user_data)
+{
+  CcFingerprintManager *self = CC_FINGERPRINT_MANAGER (object);
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+  g_autoptr(GError) error = NULL;
+  CcFingerprintState state;
+  UpdateStateData *data;
+  GTask *task;
+
+  g_return_if_fail (g_task_is_valid (res, self));
+
+  task = G_TASK (res);
+  g_assert (g_steal_pointer (&priv->current_task) == task);
+
+  state = g_task_propagate_int (task, &error);
+  data = g_task_get_task_data (task);
+
+  if (error)
+    {
+      if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        return;
+
+      g_warning ("Impossible to update fingerprint manager state: %s",
+                 error->message);
+
+      state = CC_FINGERPRINT_STATE_NONE;
+    }
+
+  set_state (self, state);
+
+  if (data->callback)
+    data->callback (self, state, data->user_data, error);
+}
+
+static void
+on_device_list_enrolled (GObject      *object,
+                         GAsyncResult *res,
+                         gpointer      user_data)
+{
+  CcFprintdDevice *fprintd_device = CC_FPRINTD_DEVICE (object);
+  g_autoptr(GTask) task = G_TASK (user_data);
+  g_autoptr(GError) error = NULL;
+  g_auto(GStrv) enrolled_fingers = NULL;
+  UpdateStateData *data = g_task_get_task_data (task);
+  guint num_enrolled_fingers;
+
+  cc_fprintd_device_call_list_enrolled_fingers_finish (fprintd_device,
+                                                       &enrolled_fingers,
+                                                       res, &error);
+
+  if (data->waiting_devices == 0)
+    return;
+
+  data->waiting_devices--;
+
+  if (error)
+    {
+      g_autofree char *dbus_error = g_dbus_error_get_remote_error (error);
+
+      if (!g_str_equal (dbus_error, CC_FPRINTD_NAME ".Error.NoEnrolledPrints"))
+        {
+          if (data->waiting_devices == 0)
+            g_task_return_error (task, g_steal_pointer (&error));
+          else if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+            g_warning ("Impossible to list enrolled fingers: %s", error->message);
+
+          return;
+        }
+    }
+
+  num_enrolled_fingers = enrolled_fingers ? g_strv_length (enrolled_fingers) : 0;
+
+  g_debug ("Device %s has %u enrolled fingers",
+           cc_fprintd_device_get_name (fprintd_device),
+           num_enrolled_fingers);
+
+  if (num_enrolled_fingers > 0)
+    {
+      data->waiting_devices = 0;
+      g_task_return_int (task, CC_FINGERPRINT_STATE_ENABLED);
+    }
+  else if (data->waiting_devices == 0)
+    {
+      g_task_return_int (task, CC_FINGERPRINT_STATE_DISABLED);
+    }
+}
+
+static void
+on_manager_devices_list (GObject      *object,
+                         GAsyncResult *res,
+                         gpointer      user_data)
+{
+  CcFingerprintManager *self = CC_FINGERPRINT_MANAGER (object);
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+  g_autolist(CcFprintdDevice) fprintd_devices = NULL;
+  g_autoptr(GTask) task = G_TASK (user_data);
+  g_autoptr(GError) error = NULL;
+  UpdateStateData *data = g_task_get_task_data (task);
+  const char *user_name;
+  GList *l;
+
+  fprintd_devices = cc_fingerprint_manager_get_devices_finish (self, res, &error);
+
+  if (error)
+    {
+      g_task_return_error (task, g_steal_pointer (&error));
+      return;
+    }
+
+  if (fprintd_devices == NULL)
+    {
+      g_debug ("No fingerprint devices found");
+      g_task_return_int (task, CC_FINGERPRINT_STATE_NONE);
+      return;
+    }
+
+  user_name = act_user_get_user_name (priv->user);
+
+  for (l = fprintd_devices; l; l = l->next)
+    {
+      CcFprintdDevice *device = l->data;
+
+      g_debug ("Connected to device %s, looking for enrolled fingers",
+               cc_fprintd_device_get_name (device));
+
+      data->waiting_devices++;
+      cc_fprintd_device_call_list_enrolled_fingers (device, user_name,
+                                                    g_task_get_cancellable (task),
+                                                    on_device_list_enrolled,
+                                                    g_object_ref (task));
+    }
+}
+
+void
+cc_fingerprint_manager_update_state (CcFingerprintManager     *self,
+                                     CcFingerprintStateUpdated callback,
+                                     gpointer                  user_data)
+{
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+  g_autoptr(GCancellable) cancellable = NULL;
+  UpdateStateData *data;
+
+  g_return_if_fail (priv->current_task == NULL);
+
+  if (act_user_get_uid (priv->user) != getuid () ||
+      !act_user_is_local_account (priv->user))
+    {
+      set_state (self, CC_FINGERPRINT_STATE_NONE);
+      return;
+    }
+
+  cancellable = g_cancellable_new ();
+  data = g_new0 (UpdateStateData, 1);
+  data->callback = callback;
+  data->user_data = user_data;
+
+  priv->current_task = g_task_new (self, cancellable, update_state_callback, NULL);
+  g_task_set_source_tag (priv->current_task, cc_fingerprint_manager_update_state);
+  g_task_set_task_data (priv->current_task, data, g_free);
+
+  set_state (self, CC_FINGERPRINT_STATE_UPDATING);
+
+  cc_fingerprint_manager_get_devices (self, cancellable, on_manager_devices_list,
+                                      priv->current_task);
+}
+
+CcFingerprintState
+cc_fingerprint_manager_get_state (CcFingerprintManager *self)
+{
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+
+  g_return_val_if_fail (CC_IS_FINGERPRINT_MANAGER (self), CC_FINGERPRINT_STATE_NONE);
+
+  return priv->state;
+}
+
+ActUser *
+cc_fingerprint_manager_get_user (CcFingerprintManager *self)
+{
+  CcFingerprintManagerPrivate *priv = cc_fingerprint_manager_get_instance_private (self);
+
+  g_return_val_if_fail (CC_IS_FINGERPRINT_MANAGER (self), NULL);
+
+  return priv->user;
+}
diff --git a/panels/user-accounts/cc-fingerprint-manager.h b/panels/user-accounts/cc-fingerprint-manager.h
new file mode 100644
index 0000000..d12f52c
--- /dev/null
+++ b/panels/user-accounts/cc-fingerprint-manager.h
@@ -0,0 +1,74 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2020 Canonical Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Authors: Marco Trevisan <marco.trevisan@canonical.com>
+ */
+
+#pragma once
+
+#include <glib-object.h>
+#include <act/act.h>
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_FINGERPRINT_MANAGER (cc_fingerprint_manager_get_type ())
+
+G_DECLARE_FINAL_TYPE (CcFingerprintManager, cc_fingerprint_manager, CC, FINGERPRINT_MANAGER, GObject)
+
+/**
+ * CcFingerprintManager:
+ * @CC_FINGERPRINT_STATE_NONE: Fingerprint recognition is not available
+ * @CC_FINGERPRINT_STATE_UPDATING: Fingerprint recognition is being fetched
+ * @CC_FINGERPRINT_STATE_ENABLED: Fingerprint recognition is enabled
+ * @CC_FINGERPRINT_STATE_DISABLED: Fingerprint recognition is disabled
+ *
+ * The status of the fingerprint support.
+ */
+typedef enum {
+  CC_FINGERPRINT_STATE_NONE,
+  CC_FINGERPRINT_STATE_UPDATING,
+  CC_FINGERPRINT_STATE_ENABLED,
+  CC_FINGERPRINT_STATE_DISABLED,
+} CcFingerprintState;
+
+typedef void (*CcFingerprintStateUpdated) (CcFingerprintManager *fp_manager,
+                                           CcFingerprintState    state,
+                                           gpointer              user_data,
+                                           GError               *error);
+
+CcFingerprintManager * cc_fingerprint_manager_new (ActUser *user);
+
+CcFingerprintState cc_fingerprint_manager_get_state (CcFingerprintManager *fp_manager);
+
+ActUser * cc_fingerprint_manager_get_user (CcFingerprintManager *fp_manager);
+
+void cc_fingerprint_manager_update_state (CcFingerprintManager     *fp_manager,
+                                          CcFingerprintStateUpdated callback,
+                                          gpointer                  user_data);
+
+void cc_fingerprint_manager_get_devices (CcFingerprintManager *fp_manager,
+                                         GCancellable         *cancellable,
+                                         GAsyncReadyCallback   res,
+                                         gpointer              user_data);
+
+GList *cc_fingerprint_manager_get_devices_finish (CcFingerprintManager *fp_manager,
+                                                  GAsyncResult         *res,
+                                                  GError              **error);
+
+G_END_DECLS
diff --git a/panels/user-accounts/cc-user-panel.c b/panels/user-accounts/cc-user-panel.c
index 3afe2b0..d5ddb75 100644
--- a/panels/user-accounts/cc-user-panel.c
+++ b/panels/user-accounts/cc-user-panel.c
@@ -48,7 +48,8 @@
 #include "cc-realm-manager.h"
 #include "cc-user-accounts-resources.h"
 #include "cc-user-image.h"
-#include "um-fingerprint-dialog.h"
+#include "cc-fingerprint-manager.h"
+#include "cc-fingerprint-dialog.h"
 #include "user-utils.h"
 
 #include "cc-common-language.h"
@@ -103,8 +104,7 @@ struct _CcUserPanel {
 
         CcAvatarChooser *avatar_chooser;
 
-        gboolean needs_fingerprint_update;
-        GCancellable *fingerprint_cancellable;
+        CcFingerprintManager *fingerprint_manager;
 
         gint other_accounts;
 };
@@ -797,6 +797,25 @@ get_autologin_possible (ActUser *user)
 static void on_permission_changed (CcUserPanel *self);
 static void full_name_edit_button_toggled (CcUserPanel *self);
 
+static void
+update_fingerprint_row_state (CcUserPanel *self, GParamSpec *spec, CcFingerprintManager *fingerprint_manager)
+{
+        CcFingerprintState state = cc_fingerprint_manager_get_state (fingerprint_manager);
+
+        if (state != CC_FINGERPRINT_STATE_UPDATING) {
+                gtk_widget_set_visible (GTK_WIDGET (self->fingerprint_row),
+                                        state != CC_FINGERPRINT_STATE_NONE);
+        }
+
+        gtk_widget_set_sensitive (GTK_WIDGET (self->fingerprint_row),
+                                  state != CC_FINGERPRINT_STATE_UPDATING);
+
+        if (state == CC_FINGERPRINT_STATE_ENABLED)
+                gtk_label_set_text (self->fingerprint_state_label, _("Enabled"));
+        else if (state == CC_FINGERPRINT_STATE_DISABLED)
+                gtk_label_set_text (self->fingerprint_state_label, _("Disabled"));
+}
+
 static void
 show_user (ActUser *user, CcUserPanel *self)
 {
@@ -856,22 +875,18 @@ show_user (ActUser *user, CcUserPanel *self)
                  g_settings_get_boolean (self->login_screen_settings,
                                          "enable-fingerprint-authentication")));
 
-        if (!self->needs_fingerprint_update) {
-                gtk_widget_set_visible (GTK_WIDGET (self->fingerprint_row), show);
+        if (show) {
+                if (!self->fingerprint_manager) {
+                        self->fingerprint_manager = cc_fingerprint_manager_new (user);
+                        g_signal_connect_object (self->fingerprint_manager,
+                                                 "notify::state",
+                                                 G_CALLBACK (update_fingerprint_row_state),
+                                                 self, G_CONNECT_SWAPPED);
+                }
+
+                update_fingerprint_row_state (self, NULL, self->fingerprint_manager);
         } else {
                 gtk_widget_set_visible (GTK_WIDGET (self->fingerprint_row), FALSE);
-
-                if (show) {
-                        g_cancellable_cancel (self->fingerprint_cancellable);
-                        g_clear_object (&self->fingerprint_cancellable);
-
-                        self->fingerprint_cancellable = g_cancellable_new ();
-                        self->needs_fingerprint_update = FALSE;
-
-                        set_fingerprint_row (GTK_WIDGET (self->fingerprint_row),
-                                             self->fingerprint_state_label,
-                                             self->fingerprint_cancellable);
-                }
         }
 
         /* Autologin: show when local account */
@@ -1097,21 +1112,17 @@ static void
 change_fingerprint (CcUserPanel *self)
 {
         ActUser *user;
+        GtkWindow *top_level;
+        CcFingerprintDialog *dialog;
 
         user = get_selected_user (self);
+        top_level = GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self)));
 
         g_assert (g_strcmp0 (g_get_user_name (), act_user_get_user_name (user)) == 0);
 
-        g_cancellable_cancel (self->fingerprint_cancellable);
-        g_clear_object (&self->fingerprint_cancellable);
-
-        self->fingerprint_cancellable = g_cancellable_new ();
-
-        fingerprint_button_clicked (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (self))),
-                                    GTK_WIDGET (self->fingerprint_row),
-                                    self->fingerprint_state_label,
-                                    user,
-                                    self->fingerprint_cancellable);
+        dialog = cc_fingerprint_dialog_new (self->fingerprint_manager);
+        gtk_window_set_transient_for (GTK_WINDOW (dialog), top_level);
+        gtk_widget_show (GTK_WIDGET (dialog));
 }
 
 static void
@@ -1349,6 +1360,11 @@ on_permission_changed (CcUserPanel *self)
         }
 
         if (is_authorized || self_selected) {
+                CcFingerprintState fingerprint_state = CC_FINGERPRINT_STATE_NONE;
+
+                if (self->fingerprint_manager)
+                        fingerprint_state = cc_fingerprint_manager_get_state (self->fingerprint_manager);
+
                 gtk_stack_set_visible_child (self->user_icon_stack, GTK_WIDGET (self->user_icon_button));
 
                 gtk_widget_set_sensitive (GTK_WIDGET (self->language_row), TRUE);
@@ -1357,7 +1373,8 @@ on_permission_changed (CcUserPanel *self)
                 gtk_widget_set_sensitive (GTK_WIDGET (self->password_row), TRUE);
                 remove_unlock_tooltip (GTK_WIDGET (self->password_row));
 
-                gtk_widget_set_sensitive (GTK_WIDGET (self->fingerprint_row), TRUE);
+                gtk_widget_set_sensitive (GTK_WIDGET (self->fingerprint_row),
+                                          fingerprint_state != CC_FINGERPRINT_STATE_UPDATING);
                 remove_unlock_tooltip (GTK_WIDGET (self->fingerprint_row));
 
                 gtk_widget_set_sensitive (GTK_WIDGET (self->last_login_row), TRUE);
@@ -1483,7 +1500,6 @@ cc_user_panel_init (CcUserPanel *self)
         gtk_widget_init_template (GTK_WIDGET (self));
 
         self->um = act_user_manager_get_default ();
-        self->needs_fingerprint_update = TRUE;
 
         provider = gtk_css_provider_new ();
         gtk_css_provider_load_from_resource (provider, "/org/gnome/control-center/user-accounts/user-accounts-dialog.css");
@@ -1507,9 +1523,6 @@ cc_user_panel_dispose (GObject *object)
 
         g_clear_object (&self->login_screen_settings);
 
-        g_cancellable_cancel (self->fingerprint_cancellable);
-        g_clear_object (&self->fingerprint_cancellable);
-
         g_clear_pointer ((GtkWidget **)&self->language_chooser, gtk_widget_destroy);
         g_clear_object (&self->permission);
         G_OBJECT_CLASS (cc_user_panel_parent_class)->dispose (object);
diff --git a/panels/user-accounts/data/account-fingerprint.ui b/panels/user-accounts/data/account-fingerprint.ui
deleted file mode 100644
index 1756877..0000000
--- a/panels/user-accounts/data/account-fingerprint.ui
+++ /dev/null
@@ -1,238 +0,0 @@
-<?xml version="1.0"?>
-<interface>
-  <!-- interface-requires gtk+ 3.8 -->
-  <!-- interface-naming-policy toplevel-contextual -->
-  <object class="GtkListStore" id="model1">
-    <columns>
-      <!-- column-name gchararray -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">Left thumb</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Left middle finger</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Left ring finger</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Left little finger</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Right thumb</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Right middle finger</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Right ring finger</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">Right little finger</col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkAssistant" id="assistant">
-    <property name="border_width">12</property>
-    <property name="title" translatable="yes">Enable Fingerprint Login</property>
-    <property name="icon_name">system-users</property>
-    <property name="visible">False</property>
-    <child>
-      <placeholder/>
-    </child>
-    <child>
-      <object class="GtkVBox" id="page1">
-        <property name="visible">True</property>
-        <property name="border_width">12</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">12</property>
-        <child>
-          <object class="GtkHBox" id="hbox74">
-            <property name="visible">True</property>
-            <property name="spacing">6</property>
-            <child>
-              <object class="GtkImage" id="image">
-                <property name="visible">True</property>
-                <property name="stock">gtk-dialog-info</property>
-                <property name="icon-size">6</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="intro-label">
-                <property name="visible">True</property>
-                <property name="label">To enable fingerprint login, you need to save one of your fingerprints, using the Acme Foobar 5000.</property>
-                <property name="wrap">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="vbox70">
-            <property name="visible">True</property>
-            <property name="orientation">vertical</property>
-            <child>
-              <object class="GtkRadioButton" id="radiobutton1">
-                <property name="label" translatable="yes">_Right index finger</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">False</property>
-                <property name="use_underline">True</property>
-                <property name="active">True</property>
-                <property name="draw_indicator">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkRadioButton" id="radiobutton2">
-                <property name="label" translatable="yes">_Left index finger</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">False</property>
-                <property name="use_underline">True</property>
-                <property name="draw_indicator">True</property>
-                <property name="group">radiobutton1</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkHBox" id="radiobutton3-hbox">
-                <property name="visible">True</property>
-                <property name="spacing">6</property>
-                <child>
-                  <object class="GtkRadioButton" id="radiobutton3">
-                    <property name="visible">True</property>
-                    <property name="label" translatable="yes">_Other finger:</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">False</property>
-                    <property name="use_underline">True</property>
-                    <property name="draw_indicator">True</property>
-                    <property name="group">radiobutton1</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkComboBox" id="finger_combobox">
-                    <property name="visible">True</property>
-                    <property name="sensitive">False</property>
-                    <property name="model">model1</property>
-                    <child>
-                      <object class="GtkCellRendererText" id="renderer1"/>
-                      <attributes>
-                        <attribute name="text">0</attribute>
-                      </attributes>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <child>
-      <object class="GtkVBox" id="page2">
-        <property name="visible">True</property>
-        <property name="orientation">vertical</property>
-        <child>
-          <object class="GtkLabel" id="enroll-label">
-            <property name="visible">True</property>
-            <property name="label">In order to save your fingerprints, you need to swipe your thumb on the "Acme foobar" device.</property>
-            <property name="wrap">True</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkFlowBox" id="enroll-flowbox">
-            <property name="visible">True</property>
-            <property name="margin-top">24</property>
-            <property name="margin-bottom">24</property>
-            <property name="row-spacing">40</property>
-            <property name="column-spacing">100</property>
-            <property name="homogeneous">True</property>
-            <property name="halign">center</property>
-            <property name="valign">center</property>
-            <property name="min-children-per-line">1</property>
-            <property name="max-children-per-line">5</property>
-            <property name="selection-mode">none</property>
-            <property name="focus-on-click">False</property>
-            <property name="can-focus">False</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="status-label">
-            <property name="visible">True</property>
-            <property name="wrap">True</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <child>
-      <object class="GtkLabel" id="page3">
-        <property name="visible">True</property>
-        <property name="label" translatable="yes">Your fingerprint was successfully saved. You should now be able to log in using your fingerprint reader.</property>
-        <property name="wrap">True</property>
-      </object>
-      <packing>
-        <property name="page_type">summary</property>
-      </packing>
-    </child>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup">
-    <property name="mode">both</property>
-    <widgets>
-      <widget name="radiobutton1"/>
-      <widget name="radiobutton2"/>
-      <widget name="radiobutton3-hbox"/>
-    </widgets>
-  </object>
-</interface>
diff --git a/panels/user-accounts/data/cc-fingerprint-dialog.css b/panels/user-accounts/data/cc-fingerprint-dialog.css
new file mode 100644
index 0000000..800d658
--- /dev/null
+++ b/panels/user-accounts/data/cc-fingerprint-dialog.css
@@ -0,0 +1,83 @@
+.fingerprint-icon {
+  padding: 3px;
+}
+
+.fingerprint-icon > button,
+.fingerprint-icon > image {
+  padding: 15px;
+  min-width: 32px;
+  min-height: 32px;
+  border-radius: 64px;
+  border: 1px solid @borders;
+  background-color: @theme_base_color;
+  color: @insensitive_fg_color;
+}
+
+.fingerprint-print-add image:not(:disabled):not(:backdrop),
+.fingerprint-print-add button:not(:disabled):not(:backdrop) {
+  color: @theme_fg_color;
+}
+
+.fingerprint-icon.enroll-status image {
+  outline-color: @theme_selected_bg_color;
+  outline-offset: 0px;
+  outline-width: 4px;
+}
+
+.fingerprint-icon.enroll-status image:backdrop {
+  outline-color: @theme_unfocused_selected_bg_color;
+}
+
+.fingerprint-icon.enroll-status {
+  font-weight: bold;
+}
+
+.fingerprint-icon.enroll-status.completed image {
+  outline-color: @success_color;
+}
+
+.fingerprint-icon.enroll-status.warning image {
+  outline-color: @warning_color;
+}
+
+.fingerprint-icon.enroll-status.error image {
+  outline-color: @error_color;
+  /* Given we don't have an error image, we can just recolorize the warning one */
+  -gtk-icon-palette: warning @error_color;
+}
+
+.fingerprint-icon.enroll-status.success image:not(:backdrop) {
+  color: @theme_selected_bg_color;
+}
+
+.fingerprint-icon.enroll-status.warning image:not(:backdrop),
+.fingerprint-icon.enroll-status.warning label:not(:backdrop) {
+  color: @warning_color;
+}
+
+.fingerprint-icon.enroll-status.error image:not(:backdrop),
+.fingerprint-icon.enroll-status.error label:not(:backdrop) {
+  color: @error_color;
+}
+
+@keyframes wiggle {
+  /* Unfortunately we can't use translation or xalign, so here's the workaround */
+  0% { padding-left: 0; padding-right: 0; }
+  10% { padding-left: 0; padding-right: 2px; }
+  20% { padding-left: 4px; padding-right: 0; }
+  30% { padding-left: 0; padding-right: 8px; }
+  40% { padding-left: 8px; padding-right: 0; }
+  50% { padding-left: 0; padding-right: 8px; }
+  60% { padding-left: 8px; padding-right: 0; }
+  70% { padding-left: 0; padding-right: 8px; }
+  80% { padding-left: 4px; padding-right: 0; }
+  90% { padding-left: 0; padding-right: 2px; }
+  100% { padding-left: 0; padding-right: 0; }
+}
+
+.fingerprint-icon.enroll-status.retry label {
+  animation-name: wiggle;
+  animation-duration: 850ms;
+  animation-timing-function: ease-in;
+  animation-iteration-count: 1;
+}
diff --git a/panels/user-accounts/data/icons/fingerprint-detection-complete-symbolic.svg b/panels/user-accounts/data/icons/fingerprint-detection-complete-symbolic.svg
new file mode 100644
index 0000000..a225384
--- /dev/null
+++ b/panels/user-accounts/data/icons/fingerprint-detection-complete-symbolic.svg
@@ -0,0 +1,3 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 8.467 8.467">
+    <path style="line-height:normal;font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;text-orientation:mixed;white-space:normal;shape-padding:0;isolation:auto;mix-blend-mode:normal;solid-color:#000;solid-opacity:1" d="M 16.132812,0.99023438 C 13.902514,0.96755721 11.66847,1.5168081 9.65625,2.6425781 8.4831917,3.288913 9.4616217,5.0473362 10.628906,4.390625 14.036766,2.4839667 18.198267,2.527856 21.566406,4.5039062 24.934547,6.4799188 27,10.08815 27,13.994141 v 2 c -5.97e-4,1.33435 1.999403,1.33435 2,0 v -2 c 3.54e-4,-0.03325 -9.56e-4,-0.06649 -0.0039,-0.09961 C 28.961052,9.320245 26.52689,5.092052 22.578125,2.7753906 20.589365,1.6086127 18.363092,1.0130627 16.132812,0.99023438 Z M 5.7617188,6.640625 C 5.4310747,6.6594699 5.1312075,6.840853 4.9609375,7.125 3.6959444,9.158537 3.0222407,11.500805 3.0039062,13.894531 3.00095,13.927649 2.9996462,13.960893 3,13.994141 v 10.128906 c 0,1.333754 2,1.333754 2,0 V 13.994141 C 5,11.939136 5.5747962,9.9244686 6.6601562,8.1796875 7.1014645,7.4921558 6.5771855,6.5940433 5.7617188,6.640625 Z M 16,6.9921875 c -3.813165,0 -6.9283277,3.0816025 -6.9941406,6.8808595 -0.0044,0.04021 -0.00636,0.08065 -0.00586,0.121094 v 2 c 5.96e-4,1.333157 2.000596,1.333157 2,0 v -2 c 0,-2.774325 2.22666,-5.0019535 5,-5.0019535 2.77334,0 5,2.2276285 5,5.0019535 V 22.125 c 0.426667,0.161975 0.81076,0.41915 1.123047,0.751953 L 23,23.753906 v -9.759765 c 2.65e-4,-0.03849 -0.0017,-0.07697 -0.0059,-0.115235 C 22.931551,10.076928 19.815145,6.9921875 16,6.9921875 Z m -0.01563,5.9863285 C 15.43218,12.98705 14.991449,13.441767 15,13.994141 v 10.003906 c 0,0 -5.87e-4,1.09432 0.269531,2.445312 0.2701,1.350992 0.787778,3.027578 2.023438,4.263672 0.942205,0.981983 2.395438,-0.47125 1.414062,-1.414062 -0.690333,-0.690533 -1.138586,-1.835412 -1.390625,-2.898438 l -0.002,-0.002 C 16.951575,25.742041 16.843618,24.979658 17.011719,24.253906 17.009401,24.177001 17,23.998047 17,23.998047 V 13.994141 c 0.0087,-0.564623 -0.451183,-1.024549 -1.015625,-1.015625 z m -6,8.001953 C 9.4321797,20.989003 8.9914495,21.44372 9,21.996094 v 6.001953 c -5.966e-4,1.33435 1.999403,1.33435 2,0 v -6.001953 c 0.0087,-0.564623 -0.451183,-1.024549 -1.015625,-1.015625 z m 20.998047,0.0059 a 1.0001,1.0001 0 0 0 -0.6875,0.302734 l -6.296875,6.289063 -3.291016,-3.292969 a 1.0001,1.0001 0 1 0 -1.410156,1.417969 l 4.701172,4.703125 7.707031,-7.707031 a 1.0001,1.0001 0 0 0 -0.722656,-1.712891 z" transform="scale(.26458)" class="success" color="#000" font-weight="400" font-family="sans-serif" overflow="visible" fill="#33d17a"/>
+</svg>
diff --git a/panels/user-accounts/data/icons/fingerprint-detection-symbolic.svg b/panels/user-accounts/data/icons/fingerprint-detection-symbolic.svg
new file mode 100644
index 0000000..00e31cc
--- /dev/null
+++ b/panels/user-accounts/data/icons/fingerprint-detection-symbolic.svg
@@ -0,0 +1,3 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 8.467 8.467">
+    <path d="m 4.2684727,288.79533 c -0.5901,-0.006 -1.1811905,0.13932 -1.7135904,0.43718 a 0.26457931,0.26466281 0 1 0 0.2573486,0.46251 c 0.9016629,-0.50447 2.0027268,-0.49283 2.8938802,0.03 0.8911538,0.52282 1.4376385,1.4775 1.4376385,2.51096 v 0.52916 a 0.26458335,0.26466684 0 1 0 0.5291667,0 v -0.52916 a 0.26456806,0.26465154 0 0 0 -0.00103,-0.0264 c -0.00927,-1.21028 -0.6533118,-2.32899 -1.6980893,-2.94194 -0.5261927,-0.30871 -1.1152275,-0.46628 -1.7053224,-0.47232 z m -2.7440185,1.495 a 0.26456806,0.26465154 0 0 0 -0.2118734,0.12816 c -0.3346961,0.53804 -0.51294685,1.15776 -0.51779785,1.7911 a 0.26456806,0.26465154 0 0 0 -0.001034,0.0264 v 2.67994 a 0.26458334,0.26466683 0 0 0 0.52916665,0 v -2.67994 c 0,-0.54372 0.1520815,-1.07677 0.4392497,-1.53841 a 0.26456806,0.26465154 0 0 0 -0.2377116,-0.40721 z m 2.7088787,0.093 c -1.0089,0 -1.8331201,0.81534 -1.8505331,1.82056 a 0.26456806,0.26465154 0 0 0 -0.00155,0.032 v 0.52916 a 0.26458335,0.26466684 0 1 0 0.5291667,0 v -0.52916 c 0,-0.73404 0.5891371,-1.32344 1.3229167,-1.32344 0.7337795,0 1.3229167,0.5894 1.3229167,1.32344 v 2.64686 c 0,0 0.00212,0.18248 0.079582,0.41445 0.077301,0.23197 0.2313432,0.5351 0.5270998,0.83096 a 0.26456806,0.26465154 0 1 0 0.3741372,-0.37414 c -0.2334101,-0.23348 -0.3439509,-0.45923 -0.3989419,-0.62425 -0.054991,-0.16503 -0.05271,-0.24702 -0.05271,-0.24702 v -2.64686 a 0.26456806,0.26465154 0 0 0 -0.00156,-0.0305 c -0.016571,-1.00594 -0.8410985,-1.82211 -1.8505223,-1.82211 z m -0.00414,1.58388 a 0.26456806,0.26465154 0 0 0 -0.2604479,0.26872 v 2.64686 c 0,0 -1.558e-4,0.28954 0.071313,0.64699 0.071464,0.35745 0.208433,0.80105 0.535368,1.1281 a 0.26456806,0.26465154 0 1 0 0.3741373,-0.37414 c -0.2022317,-0.20229 -0.329846,-0.55309 -0.3906737,-0.85731 -0.060823,-0.30422 -0.060978,-0.54364 -0.060978,-0.54364 v -2.64686 a 0.26456806,0.26465154 0 0 0 -0.2687175,-0.26872 z m -1.5875,2.11718 a 0.26456806,0.26465154 0 0 0 -0.2604479,0.26872 v 1.58802 a 0.26458335,0.26466684 0 1 0 0.5291667,0 v -1.58802 a 0.26456806,0.26465154 0 0 0 -0.2687175,-0.26872 z m 4.7625001,0 a 0.26456806,0.26465154 0 0 0 -0.2604479,0.26769 v 0.52968 a 0.26458335,0.26466684 0 1 0 0.5291667,0 v -0.52968 a 0.26456806,0.26465154 0 0 0 -0.2687175,-0.26769 z" style="line-height:normal;font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;text-orientation:mixed;white-space:normal;shape-padding:0;isolation:auto;mix-blend-mode:normal;solid-color:#000;solid-opacity:1" color="#000" font-weight="400" font-family="sans-serif" overflow="visible" fill="#3d3846" transform="translate(0 -288.533)"/>
+</svg>
diff --git a/panels/user-accounts/data/icons/fingerprint-detection-warning-symbolic.svg b/panels/user-accounts/data/icons/fingerprint-detection-warning-symbolic.svg
new file mode 100644
index 0000000..5b3fa81
--- /dev/null
+++ b/panels/user-accounts/data/icons/fingerprint-detection-warning-symbolic.svg
@@ -0,0 +1,3 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 8.467 8.467">
+    <path overflow="visible" font-weight="400" d="m 4.2684194,0.26199621 c -0.5900922,-0.006 -1.1811756,0.13932088 -1.7135688,0.4371771 A 0.26457597,0.26465948 0 1 0 2.8121959,1.1616716 C 3.7138475,0.65720791 4.8148975,0.66882014 5.7060397,1.1916435 6.5971824,1.7144569 7.14366,2.6691227 7.14366,3.7025698 v 0.52916 a 0.26458003,0.2646635 0 1 0 0.52916,0 v -0.52916 A 0.26456472,0.26464821 0 0 0 7.6717881,3.676215 C 7.6625167,2.4659504 7.0184846,1.3472551 5.9737203,0.73431284 5.4475342,0.42560675 4.8585069,0.26803613 4.2684194,0.26199621 Z M 1.5244356,1.7569766 A 0.26456472,0.26464821 0 0 0 1.3125648,1.8851325 C 0.97787297,2.4231657 0.79962444,3.042883 0.7947735,3.676215 A 0.26456472,0.26464821 0 0 0 0.79374,3.7025698 v 2.679906 a 0.26458,0.2646635 0 0 0 0.52916,0 v -2.679906 c 0,-0.5437132 0.1520796,-1.0767539 0.4392441,-1.5383881 A 0.26456472,0.26464821 0 0 0 1.5244356,1.7569766 Z M 4.23328,1.849993 c -1.0088872,0 -1.8330969,0.8153304 -1.8505097,1.8205378 a 0.26456472,0.26464821 0 0 0 -0.00155,0.032039 v 0.52916 a 0.26458003,0.2646635 0 0 0 0.52916,0 v -0.52916 c 0,-0.7340309 0.5891297,-1.3234168 1.3229,-1.3234168 0.7337703,0 1.3229,0.5893859 1.3229,1.3234168 V 4.4110447 C 5.6854821,4.2368203 5.8715938,4.0894366 6.08534,4.0260602 V 3.7025698 A 0.26456472,0.26464821 0 0 0 6.083779,3.6720809 C 6.0672189,2.6661536 5.2426911,1.849993 4.23328,1.849993 Z M 4.22914,3.4338558 A 0.26456472,0.26464821 0 0 0 3.9687,3.7025698 v 2.6468335 c 0,0 -1.553e-4,0.2895352 0.071312,0.6469806 0.00877,0.043848 0.022106,0.091907 0.033073,0.1379745 L 4.49786,6.3468194 V 3.7025698 A 0.26456472,0.26464821 0 0 0 4.2291459,3.4338558 Z M 6.3251097,4.5226644 C 6.1860729,4.5146644 6.0504148,4.5975684 5.944776,4.7789762 L 4.2911556,7.8464506 C 4.1500114,8.1013375 4.3039147,8.46656 4.5805412,8.46656 h 3.4808807 c 0.2597435,0 0.5035248,-0.3067533 0.3224568,-0.6201094 L 6.7137175,4.7955125 C 6.6082242,4.6245446 6.4641524,4.5302343 6.3251156,4.5226644 Z M 2.6416659,5.5510125 A 0.26456472,0.26464821 0 0 0 2.38122,5.8197266 v 1.5879967 a 0.26458003,0.2646635 0 1 0 0.52916,0 V 5.8197266 A 0.26456472,0.26464821 0 0 0 2.6416659,5.5510125 Z m 3.699986,0.013436 C 6.4857104,5.5594481 6.6190614,5.693238 6.6145,5.8372962 V 6.87908 C 6.61635,7.0188682 6.4897161,7.14366 6.34992,7.14366 6.2101265,7.14366 6.0833636,7.0188682 6.08534,6.87908 V 5.8372962 c -0.00212,-0.1234583 0.093688,-0.2414303 0.2149712,-0.26458 0.01352,-0.004 0.027371,-0.00675 0.041341,-0.00775 z M 6.34992,7.40824 c 0.1461236,0 0.26458,0.1184617 0.26458,0.26458 0,0.1461281 -0.1184564,0.26458 -0.26458,0.26458 -0.1461236,0 -0.26458,-0.1184519 -0.26458,-0.26458 0,-0.1461183 0.1184564,-0.26458 0.26458,-0.26458 z" style="line-height:normal;font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;text-orientation:mixed;white-space:normal;shape-padding:0;isolation:auto;mix-blend-mode:normal;solid-color:#000;solid-opacity:1" class="warning" color="#000" font-family="sans-serif" fill="#ff7800"/>
+</svg>
diff --git a/panels/user-accounts/data/icons/left-index-finger.png b/panels/user-accounts/data/icons/left-index-finger.png
deleted file mode 100644
index 1a9cb2c..0000000
--- a/panels/user-accounts/data/icons/left-index-finger.png
+++ /dev/null
@@ -1,6 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  hIDAThÕmTeÇwfggÜ×ñm}Û2ÝÒÀc¹B¤	EÒ¢HTà·>QYDBAA¡_
-ôC%VëËÑw7ßJ]_ÖÖÕuÛÙÙ>Ì¬Þ½ûÜ{ïLFÿ/{ççyÎÿs÷>çÍfù?£¢ÜHXÄíª²ë¿¶îËD¢«,+|ÙÌÁTâ£ÃË²'WvÀóÀú¼üðõyá÷c'µLl¸c\]$N"ymqçé_W4o¯\×º4µ9Èa¡ D$."³DÄ2¨ÛäÇÙÍ/ÇWO2w\¼}Ö÷ÚQÇ¦%µc&¿Ù¼­r^_|&à<pxÛ`Òhëæl³âÙXxuC|Ú¨xÏX¿ÒÁÙ]8ºéÑfÜ:¿Áªn¸)'h^~Ò®(0Î6U²X3fj<'Ñf09xÝ ÖSÅøHÕÕñI³¿±ªý:ý½iÛmãÉ=­*E$T,UÕU
-UÑõs÷°Íê¢õÔj©­iéç.¿Î!à\s¯Ý}}VÆ"ÑyàÂ0e,#lU@63É(Õ kæÚäQûL"½3Ýßè=ÓG:¦ÌF3dSôöþÕJs´Tg¼`Ð1n²ÉUûêÑWÙ¼Ôuâòñ+#éÑ)ºSIüÝÓ~¤%2¬/#©5"²È îqgØdc¾[M¦^ï:ØÙïT^©ëf_ÇöÓW{õîö¸EàU`3ð­,uè.;ÆSE¤2/"Pphizkr¿uÒ®×²ß·}Úv­ÿâ£ûZ²úôp'Po_pèÂÀ´¼lÀu©'2Þ®H¸ÜuwëÔÁâ®áF Ó&? "·ØÆNp#\	È$`¡¶=-ÙiånÎ:lVØÆÝÄ°A7YEÎ	7¿;Æö/®)wæÿ}]gtçÜ]ó7?öÐÎ{l¦öÍö@AWRú¸ª&Ó«òº4pÒ¡%"µN!S|y(ô!ûÖ1^."C÷ c}æR)7Àxà¡¼ì|G î&æÀT.YÔÃ"(T . ls+íÀûu.ûL>sÑ¹F _,=?s:°xJU{ív®PÕ°Å1½LDfÝÖùTËùäâcÀ#NÛb9ç«>'Wë#R(ßØ,t¨2À>§}AªºhsA®p)LØáITµÝ9éå:í|ËaòÇµ»NàEÓ^´ú÷Ë3®§Ô]ìÖªêÈbo~	àWØ;ï S6_¨ê6·¼hzZÃ Y <mÐà:C°¼ôFEDÙ,^àaàrÿëØ¨ªÏÚÀkMÜYÜ$jÝOoÛà¿&P[UõL1#¯J¾·À»^¼Ø_#A°[Uy1ôJ`'#[½z" ªW½Ýñð¥Wc?¹¯üû»Tõ¼Wc?>ó2â4°ÆÏÏòiô_|à,°PUOùYä·¹ûeè$pX¤ªÇý.ôE@U»ÈõLË3ä|GÅAÚërý¸|
-o*T¼Â7U=ìz `¥ªègVruq©øMU,u J>µv %ÐU³ç½A	ÜQ£LU^ ù¦W©;ç4Pzc6Sâz þ;7Ð|B4    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/left-little-finger.png b/panels/user-accounts/data/icons/left-little-finger.png
deleted file mode 100644
index 978942e..0000000
--- a/panels/user-accounts/data/icons/left-little-finger.png
+++ /dev/null
@@ -1,7 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  YIDAThÕ[lEÇ{éö´¶hUä"pÄH DD4F¨ñ_PbäÁQ|P¹(±Ämñ´Ê¥(-h¥Ðnw}ØÝöët¶ý.Kÿ§ùæ\æüçï%IþÏæÚ¡D' ^Uûr=á;àó`/°xçø_»àwU5kp£ý,ð¶Å~!ð*Ð¤ªïù!Ïé@;Ð¼oQìh·Ø× ßÏDd®×ðSBÏùéöj#¸| ÜÑ5Îb¿(t<Wùa~8Ën¢Lq<W!Çs,MÊ%Æs yVsvjå«Pg	Øf|°ODòE<·fï®©;XÚR:¹öhYí},k~¤>ºl:G»(q´g Eü¦§[þ!o}QeåºÚJ)+V*àV¢·êtÛÑÍsê*-¹õ10`øîhÁ;Ú³-òËþBOap6çì	U'b/VOYV50#4rol
-³î~¢¢°xÜë3öJkiöXü¢ÿðyÑuEÕ5µ¢åtlïâÈÆ&êßÜO_CIÑjî©©%üÕ@á£VDbé¶-Nf®ªê­ ÄCÅùeÇ¾ìÖ]ÍE&P^RC(/<"ÀýéöX0	}pEÉ#Æøò¡Å¤UÏÐß'&RÀH0TFY	HPaÈÚ
-;P<Ùßf8åCq$IZöÿAOï5&àoEÉÀ,,w$¶v_iëø'ÑC´zøJÙ²ï$ç;_HÄ{·cÏÀ7YffZÀA qiòX_W×Oí=gûÖO$(ëçnpõðµÃKçÓÆ?þÈd`ºEÖë?tËôô­lû³ñßÚöµÏSìû|RªÆ¿?³D¤ÑKÈ@+v-O4,î}¹ãü©ºÛ_ÓL²BD2/¾V:F'`Ë@n	d Ë'J6ÝÀâtû´Åìq`¥¬j-²ÛnÍÑ64Ç ÒÑ·
-¨ÎYô×gñ3ø2,kD$¼s*pxAU»zY¿FU5ì0ºÈLàJ6;°"à °Gj6uÇÚ3¶fyùÅJ
-ì ¢ÐhêJ@Uæ¤6.¹-°Ì4ð©ª4;ÝìÈxÊ%ÀZÞ%à-7¼Çå%$"ã-YôÖªêuÀ_}æÎ¤jL|£ªßfsàÀI {L- "ó5y?YJ'³QQìÛÁ è>#µÖØ¢ª¯æÀí±Ê%¹E)p{ð}À»c9ø¯	ª:æÇ-Àßí>ð%·âTõ¸E·2rs'±Ó­¢+ªz8â;oHº[p/»ßyÅ~VÕv·Ê^|X_ç9Äà%/®	¤Ëè#¯yÀE`ªõbäõ~àCrp`Áe`¡ªñjèªv[½2ÚHÍü)?Æ~nh6¹º\>Ì³mTÜÂ3Um%u	`ªÚ\Ãï=ñ¶ ¦Ñ¢ª¿uâ@à¹×ö¿:s0¶ïºwÂ/À'jähç@úÐ+èÇyYèAþìô`6Ð¶seõEÊ¾    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/left-middle-finger.png b/panels/user-accounts/data/icons/left-middle-finger.png
deleted file mode 100644
index 406925e..0000000
--- a/panels/user-accounts/data/icons/left-middle-finger.png
+++ /dev/null
@@ -1,11 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  HIDAThÅ[lTEÇg/Ýv¡,0H)>¹Ä
-ÄMªÄ 1M|UB4$&Å/Mï4¤uH¸È-T)¥\
-ÒvOw»ëÃnÃìí¹,ðÙùþóÍ÷svæ;V.£\X¼×Le|g,hXÑªl&Ý=z¿m]úû²¢Á*~.±_×ÏZ4»òÄ$bé8ÕË*éèj»Ú{½ëÓÃ¾V4EÀâ½V$·5Ì[*ñjøow7 Mëç0íÅZoééé>ûLûÐié$"Ed¡X ¹xôÕ©ó'Çêèméå]j½Ê´ø§?XO$·:ú¯¯Däõ».@Dnà(ð@.j=Z]S¨NÄ¾:4ÊM÷g¨Ö3)VK¢j|Ýâ½VLD¦?ÏÛDdù] ¬ò&\,R[©$IêµGöMMdÉHdrR0XT9ü5= brÌ±³ýC=ip<Rtl&Etj`¸<¡ù"Ðû,·²¹£©ÔMûSEäë}×°s)l»ïFö­E6°F£ÜsK-{xk_gÇÙ[©¾"ò¥[Ýt\;²Sý{y@R£Á5/ÖêMíÍ¹LjpGç¹ã7tò©ËG2§;´Û©mÀ"¿bQÍ"²Ú`Öð÷ÚôÎéí:ùDûÁ_S7ioÎe1ø»à7h'ÜVà`7°ODôîºV)" ¹C÷×}V¿½½9)TõèQJ?8>à&`£¬tQ`v¡\E1Æ;ÊºP³îºåEä~G] mD	"Ò LÑl^,74ÎGý?" j°¬ÀÂ1Æ	7§µú&GÙ´ó¿&ã
-¿s¶Po pð'0è¨/%A3Y	#+Ðd°Ú|Á(@)eûµæç¶pN³-jJo!Ó
-zAé?²}Zý991øYJi¦¸«¦ Êú3ðPoh_#"mhóX	[;p	êhÛüükà¿éâ§øÜÅæºËÒË1ßR·¸\W@)¾ÔÀe·~>a "Iò;àC`ùIlÒ¹cæô« ¾ ¶ùÔE[HD¢ä'nfÊu~IJ©6à}`¯0ÝaZføX)uRoôrÖærâ6ã¯0& ¼øË\1ºDd°Ë·E)Õk2xp(@`^1ÃQ~nà|£úÎÍ'â»by°@DV/ìi\¶Î<eæDDa¾E°øü»^Ç.¥Ô+¥x½wM	j sðCÀÛc9¸×JaRjÌW¡ÏíðWm!	V¥Ô/D¯~£øs'±Ç+Ñ ¥ÔMàÀáøCøÖ+ÙOfî}&ÒÐ¢êöJö#à#Àøw^F6ûéàY@a}à7"¸ ¬RJuøéä7¹»2d¸¬VJõÛÑ ¥Ôò9Ór¢üÌ
-Ò9Hz}·}	`é¢â¾(¥Î ¿Ð,°Q)eJxF Ï¬äïÅaqL)u ¬ BLñ];
-¸R±ï{'
-Q£L·¼@
-I¯°;ýca ]ÍìÀÿÞ^æ4eÙÕ    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/left-ring-finger.png b/panels/user-accounts/data/icons/left-ring-finger.png
deleted file mode 100644
index 169ff68..0000000
--- a/panels/user-accounts/data/icons/left-ring-finger.png
+++ /dev/null
@@ -1,8 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  eIDAThÕ[lTU¿3¶L[JåV¦  ²@yÐHTÀQ$P"jÂ&Æ'õÁ1hb"Q|QÆhÀ¬K¸nHÜ+¥´ÜBÛ¹æLsæ°ÏÌ¹ÿÙ{¯í½þ³ö¹¬=iüóC^ö½=®Dc#l6óÎl:ö¼y³À(ð4PìTJ¥*s<ù1Æ¬oo3AF¯Öìíy¶«ãøë3¯>º$½ß¢¾	|hµ×ïT:h;"^¹êØ¶áÕÒ4#>.ÓBS×h¦4ÎbúCZkÖ=c»1Ì¢®°¹-ÕÍ%"óDä;y;LðàQÀ±µñMÓFT7S¹ß¤mí>:7]el|<-hÔÔ|jÑÇÚ\4Á7;eÀzyü¾0cÆÒÆæºÆh#·~¿C6àÌ®sbdbÕñÄÃ"R·¹ÕL÷0ÄÖ4xð, ò@1QKU®jp¼÷ÆÌËµ:ªª4FFõMk%ÊE~¨ÜÛ=`¢FÃ,vé>ÑC¦I6w3ÐxfADâÀ|ýþdr×²¹3M&.²u´_$m¦È¤ú¯ÓkÜëlí§È»¾"vÆæfÃÍî×zsIRÆ@©§£ÎÛgÓéÔÝ6Mp µ¶öt½Ëk°:hH­¬y Ç§wõ_í9Ð<I%ú¸W;®Ó~v÷É»½}ïR|s`ÏhìcÜ3ð°	hE ·Ô§oíìmïµûºûÍäÇ_2Sè3`àÌÀ5¥T?!à&Àþü~àÔsàÐÂ¾åÉ½â7«ÙØZ²\B]}ppÉÖ~JDÆö.ÔÐð'Y¿®Dd4Ðä°]ô¦;Üt:8+mýë~A@Tc+d`ZuÁMÀ)Gÿe[û?ÅúÕ	(<&il¡@à.à ÐgëOGmfüY%æ+d`²ÆÖ§ó­ ¥Ô ðcøËÎ9lÓD¤Ò[HPO (ý"ksôWH¡~8­ç1JÐeà_Ð<cµ÷ÀÀ(Íø|Y	×Ø4c¾Pª";
-t#mc«Àÿ}yZo\l®xÍZ³Ø¬VJ%í<×(¥rÀfÇð"2èqóó	­ Iß³É_Ä%Àb'·ÜÇóÊUß¯u+{¶u(°ë0åÃN~IJ©#@»s`¯0Ý¡ËÀ'h®4ð¥Rê¤sÐËç´óf®$Xë4¼Kö ÀCþãòÁ-$"ÀFÞ:¥Ô-Áó
-û	ÆG@³³U)µÝm/NÉ²¬` "sW5ö4.[§ ÃËÙ¨(ôå`X$ÀWäõNlTJ½Qj¯'sÊS¡Ø>øðA¹	þk¥°E)U¶àñ* ôw{ |ìäUÀÁ¥Ô^^üÊ½EÌýÄ¯DOR·ýeAØæìùÿàGÿ±Ân¥Ôe¯d?¾ ´¯ó
-âo`Ï¬môß| «:ïÇÉO 6PºyJ©3~}	PJ]!fZI\$åÿ
-âì7/8*õçòy`¶®Pñ
-ßR§.hCX¥ÒxF@¾.J©½a'	* ôÂÜ[kBPW*°và}oGP¡OÔ¨PHuèöã.Ò0éÀ?H&Á[Vä    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/left-thumb.png b/panels/user-accounts/data/icons/left-thumb.png
deleted file mode 100644
index eaf875d..0000000
--- a/panels/user-accounts/data/icons/left-thumb.png
+++ /dev/null
@@ -1,5 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  eIDAThÕ[lEÇÛm·¶,r)-­)r±x9¤@¼  b C$¾Â/ÆO ñòàÆËU¼E@"X<5J@KK¹jK·í®»[¦³ßn¿ïÛmÿ3çÌÌùgf¾óm ñF~®; ð0Ø­ª\a"oúÜì>^þÁWDd<P	ü®ªö\k ¶:´Ø4«ê?>$á9"2è~^w0©2ÊaöÀ×À`»,ôê	?SèI 0Q~Ær®(7ªÆ9´_	rà9í&ÈtC
-9 eâQKÎjû!`·1§Óª`¥ÿÏ	4å"RQbgc-}Ò:ã<Ë(ÛÎå{ôç}ø0ÇmTD/Ö³ªzÐRÿmÉ3òH}ûHNfBº¼| {Ñ]µä	%ÊN0	ØèRÕ®<MtÌý{¥³	ÚDy¤Ø²zú@Q~@D¦²M nM£´D¤héÎ¹q2Òh·lÖòû$ .9#ãé²dóë;¿N»ÐL]V;¤'ÐôrÔXöó2ôÀ,]¯C'8PÕ>àUýlB7 ±tsD¤ÌSÈ)iw ú=ùê÷Ù?ÿÛÒãóöÝ_¿'´ÁÉ.Óqú °Ì×ÈV`¡Ë#þFÎDÀ))ÞV?)\¹¬br]¸4XJ,¥ãBKCÃÞ1+hë{ú§býæÀ,Oí5°âP¿DDÖ5º>»bpjþ«EÕÕ«j*$\ºêZjBÓ¹«ò¾pUÍÜUT^2í38\°êÖ'~ÿt°ømÌÆ`g±EàÝ²hQð©ãkBSèþ&ÂÑÍÊ¾58¹­ê¢ºPáØqëæ~?"UZÕHp1];F 8ÀÂ	eU¥ýaNlm¥é­f:NtÒsµ¿´sóè ååµÓÁ['às;-94Ûsã¿5
-ò,,WÐ¾£KÚ5LÈP9{*áIyÁÐâd}FªÚüaUñK.²#¸Út#ÅpÁcóP}ùÖ¾ãæ8m/æ\bØçSþéßº±üÅ¥Äúéî¹ÜJêÜd%eïgZM!	°ÉÉhõôuÓ¹ÁË­m±A~HêÜDàÇ8fãb©ü;×^XLç@§º4ÒÛ}½ñçÕ±¡;-@ê¤ÌÈ"`£­ä¨ÝXÅÈiÛw­åÌá¯¢í=ÛÙ¸Éâ|Ì7À³¼»»½ø¹ë"W¢Ñ¾Æ¦½Ù6n3sRàp]dðDÉCK[3ÞÜ^ê;F6É9v©ê·²>·ûÀnÜhÎÂ?8¬ª¿¸1tKà ©ÑÄ.·®¨êu¸õòeD[p/¹/½ûâß©j§[c/Þ®y÷ÇÚç½4pM 1Þõê´©êY/¼&wß&VÕÓ^z" ªçLssÄüI?ý¤×ßrõqù,p¿ª¶øíÀ3Um%þ5[Dõªê p¿ß³4ßTõûl;ñK ëI½kû_r0¶ïyoÂ/ääç@"éíáÎþXèÙüÙ#«o[Äw¡¬ñ/r´p¼¿µ    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/print_error.png b/panels/user-accounts/data/icons/print_error.png
deleted file mode 100644
index d67150b..0000000
--- a/panels/user-accounts/data/icons/print_error.png
+++ /dev/null
@@ -1,18 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  ½IDATh½yt\Õ}Ç?÷ÍEÛÈÚ%K¶dÙÂØ±³d¡qÉbHKIINÆÐ#8JHpÖch !S²ÓPãÍÁ±ÍnVoØBXÖ:f43Í¼­üîh1$Ø@{ÏyçZóî¼ù~ûï÷¬<Ïãã¬h4ê¦5úª@7ÐôD"ÜÇzø,u$¢Ñh5°8ø2P¢o9@\_.0ð¯ w÷G"ä§{bh4ZÜ|0ôÇ_",D@oNG~!ô pM$9ðÿF ÀÄ¾|Ny¸ìüt/pp;6k_.D"/|Z?w#4èDú§hð ¯k gm@p*¢àûÀµÀ6DSÀ	Àh4ÚüN øWv>ðUà?ÀM×g.CìÿNàô÷[wåÀgÿ^¶D£ÑS>jBÑh´8ø¼x%ÐüðD¢MC"ÎZÔésoéÏ^Ö"æó]à|ÀþXDRù!à  !NY«¿×-Ó_éF4±8Iì.B4sâ;÷g÷÷éß^\ÿíÖÖVâo·µµVxü à:`ðÀ
-âD#qÄnÚkÄ¼0aïkpUÀ¯iÏFÂÀÏF£×G"±ÖÖÖbÄgÕß»ëpLñh4Ú#Ñ"l>D"½ fs>p)â?"Ò¼þqòëú9"ÝWZ}æhà¬[n¹åKÐ±@¿~Öa­C5°(¿ ~ÌH(,DBdøÄNÒßÛäéSÛ¬¾¨k!¾ñ}DG÷ööÖö÷÷ÿ	Å»«ÚÚÚÀ¡QhÐÄv'êÏó%ÁW­5øÏ~É6Äî_ÑÏº
-1£ÓgÅÀÀ)»víz¦££ãoÃ¨Bï ÿ|$à§ÐµÍV¤Dx¨ÒûLàGHhôç¼qÚW,Ü8öÅH:]ã¯À,Ïó:{{{O<ðWTTôwÜq]mmmÙ#? ðw4¿Äú£0±½ Óä~8î·x?P\8`=RA|d°ßuÝ²ööö³b±éóùÙ³gÔÕÕ=ä#^	¬ lÄ6{è'0¨÷ÍLØý$ú¤3°û°~ÎSú¶¥Óéæýû÷Û£££->jjjæ#ùÄæ#55¨²I÷ûõ¾)¡S@¡~,nFB«1/ÇO ;wî|¨³³óæt:=bæà9shnnÞäÀÜh4üXtÑ6C)ýé½ñWèðbç£Hx(Ð{È$Éw]·Ì4Í·,Xð` È+Fê$	_;ì7:x?"=WßË(Ó»¥ÏnD|ÄFBâHØ­?äüÎ¹]]]#~¿_M6m´¾¾~³Rj¾_­÷r +$@`ÞÇsqÿ ù´)÷!9b3Rv åôi£Ïö<ÏÛ¾}ûY}}}E®ë¦ÂkRÇOz^©Þ¿¼Fó8ì×@£Þi Ô¨þ</ÑýðWÿü=nµm{igggøaTUUý²ªªê6ÄNel¬V½ývÚ´i%EE/VDµ
-ýaýOO{ÞGÕ<¼óTù/fô·éB½	ñ2ãÄÆßº6LvNoll|³°°0ì"i1î½·Xmß¾Ë2:Ã0LLÏXu®Ü@z½R·?]îyÖGH"fq2Ò6!Î»sÒ¹¼dÙÕHö}èïéé¹~ppðWë÷û{MÓ¼8G½þúcýú(*+
-Q^ZHq0?èGbÉë*+g³ÊdÓ«3Ö+õå·ã/H!Îx6RÃ\ üÉÏ!&¢QRß¯ALië®]»Öår¹[Ã¦ùìÜ¹sëÃ\n·zòÉGqLa6ÕS.Æ¬Y7£´WðF¸a
-{º)ïífx$Å{ñE¶ã¾¶^©+Û{ûçìCLçX$ÛÞdÔ_#eÁ^ Ijßîæ ·¿ùæJ©µaÃáçgÎ¹)µ0î¾ûõâª¬(äk¬FÁsX£8f!N2»{7TÔbVÔbÕBå¨Î8Y´ª+'ÈG¡$úõ¡ùH ýïH=ó9¤¾ù1Ð`Ûöííí3ÃøÏç+(//Î9ó1¾OmÚ4¦^|±®:\Är¨1k®åà&8æñÇS{ÞyÔ_r	¹ÜdR.ËÁlG°®95eª:\péz¥NþKbH2ÙÄù¼ÔM¤\¼	,M¥RçïÝ»÷ràad«ªªVO>½©ûºÊxâH0à§¾"s1ªëq)d'$ÕÝÍ´%KÆÁ±ÇïÛ©ª¦'ëP_&è7=àÞõJ'¼¼	u"Qå&³[ÑÀ\$¹%gmM¥RuttÜ¤jö655=VTT´
-ñ×KG}XL5M¯DÙY:ÛÇq­ c364D° `Ê9ÇÂ´Fiªfìî5#ÛãD"2]Û$«°þ{'2#áí¹ÏïÙ³g±RªÑó¼§[ZZ^)**úµ"À­ª«ë1µukuu¸P±þ8v";22åRn:=ÔN&qS©s#dûãT<àòõJÍlBhÉ ±Ò× m¡lîíí]µwïÞßï
-6-X°àeÓ4Ïv åø%À:õÄíxÕáBìä(n6cÇããæá$xV<> ÛÛ7::åãÄã89k$MM¸PiÜgJàeÄ~G÷4¤ÄØêyÑÑÑ±¶¿¿@mm­sÔQGÝ§ºJÙEH08CíÙÓl¡;£s¢çëè0	Èvw£&ÇÉutý8ÁS)ø:Lí_AÒuÀÝÀÙDâ§CCC¥ÉdrîØØØyóæÍ)--}Ö½
-üéHËyD}ØïÀÍNØ¸gÛX}}¨@ #Ruua¤RxËáårãàÂÓÊZ§h ¼´óbî»Ùlö`ggçoûûûß°m»}áÂM¥¥¥Z3ëIÂ#HÇv2ð=2Â²üÄ²²</¤RX±ØººpFFä^6;<gÙàyië
-:¨Þíëë«ëêêt]7ä÷ûßoiiÙXPPàÓ¤sÀ·ÓÙdðÕÀ÷TGÇÍÀª@Àü¥(LÖðDïö÷`ú·çç~®eÃ®<À:à¡¡¡b±Xe0$ÓÐÐ°À0eL$·ðÒàoE
-:8Ù+/?À²©W
-\}{ pR)¼þnü	ðnþr&¦eåd§üÂ¶mÛv½7::JJJ6Ï1ã¥Ô"¤Y¯Bf77 -e2XD¬µÔÖÏÇX6Âð¸Ï'àó»a¡ÄKÛÈìbxÓ3¿Bò®#P>0ñ«ÔrÏ'ÐÚÚVªkjj^ª©©É åÃã½_Ôý·#=Ã¡«XI °2ÍÎ0~'|æT¡LÎÁÍå¨) ¿oô}BBi²ý $³$[B­­­åZª-ÙlvoSSÓÊÊÊ°ø,M¢iÐÛ`¢ÏjZüÐ[ºtznÃr9a ÇÊà3ÁD ¿×!mçBÀj>®Òà_aecyã­­­
-(4k³XUYY¹øð.R}Zú
-"m`­¾ßtsùF ïØcQ6KgQÆÎ¢<kBxYÂô+~3ÐËèõbõÛ½2ÀÑàñ¥EtäGTüôûÖÖÖÈKÚÚÚ Ñhô¤¹©CjÉÔ¹ÞG½Z#A ÛwáÉüÍÂÆ*üààói-èËUPøg(ýÂR ºo½Ð¯Wã:"}ÇË¶²JRâ­{Þ·ÇM¨­­ímd>yÝÔBG#öÒwæßCJKBÐÓdv{k¯ö­^mïëfUac¥ÆÍÇçtÔîãF÷îÄçÁxp×áÔc¼ÛÙï"5×Åyõïk­ùñáNÄ¤òÓê2:"s¢ùÈ´b.0SmÙ5îº«¤±ªµaT6o,iz~ÑÀ{éÓN[32LúùçWéá8`[`;
-Û_,æ½:ûS g/÷¼&ñy-õúc&bV
-ébT©ZHfN#ÆªU©4ÕÀÁÆ4,LÒ6ÄÇ `By!}ÞòL¬`¶g²ÿàÒ -÷¼oNÆw¸ïÏEÂè âèõ-µÔ!}s¦kçá$}¾;îÈï¼3³0èó4©â ¦ÅÀÂOCIã(?.~l¸FDÚ¢}ÜMÙÑ·ákaÈú°ßÔG£ÑÅÀoÂ&ç]8ùúï4z6jYÖ`,«¼çoVoï¥Ì®)¤¶,Hq±å3ÇÃ$ç:$S9zstô¤q!¾®¾	6 ñ<Ï9bqØÏ"Îíj°ùaØ2äÍf`Ù¶ýÇ}ûö=¾fÍ?år¹à¨9®*Ñn¿·8hÅ~ÌX¤Æ\ÏrQÚ-wÁ¯yfyæDGDà2ÍÈHn0áÖF$¡í\±bE)7J5)àû:4K+à¤ Ôb~ØËAo^ØÏnV×E|0þÿ[Gº ñ 'ò­qÈ¿vòî"I4ïìÇòO@b2Ø<`õ!{ÇÄ<ÿw¾gw½C[ÿÀ¿¦Bú<ç    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/print_ok.png b/panels/user-accounts/data/icons/print_ok.png
deleted file mode 100644
index 4dd615e..0000000
--- a/panels/user-accounts/data/icons/print_ok.png
+++ /dev/null
@@ -1,24 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   tEXtSoftware Adobe ImageReadyqÉe<  ÿIDATxÚÄZåþffëÝÞÝî½HG"
-ÔC¹(FôÑv±DDC|T¨Ñ Q1"æ	"Jb8ªôzëeïö¶OÉ÷Ï½{.' ¬ÏËx;3ÿ|åýÚ?+AmùÌ7ÏÉ³Ù/#QÏ8Ç¸qã"ô¤£ -É¸1áÀ© Ã»àÜw¿1°2þÿ,x>üKøº1QÆèÉèÏÏ×0\+=3¦°"Åÿ3XpÂÚÿbÜÁÌø±1Ñ±ñC\Ì(eÌ`¼ÎhÂ½½¿b<ÀJl8S
-È'^PàkF*ãMÆÿ.þ;/]:3îfükÌfäáþ¼v_\þÌ}AQ/Áó)çÿf|/Õ2Þ}[ïdìbL`Ü-ÅÖ²C~1
-ñâð!1ñ\¼ÿ3ãÆpð&d¢F9cc#ã[ÐHÄÇíq Ù(ØéÔxF=ÀÂüb¡H
-ãÆñÝpÜrú(¨öâã6X\ÐgXT»qagL>ã`ÖçeÜÂxØ`~ß	«?Ë zh¡pYæñ'¡ìW Ü{X {!tF<ÀÂ÷ãÎ¸	Åh²ÇbPà#Ý }ñ"£¬.¨7QÇÏ¨a¼½ÔZ®oâç{¦(tã}Ðã^à¬à¹áÁñXð"ÜwÖ±2Á.è3.,¯263
-ëPÅ?U')ü°nq Á'>Q¯7Ú1Î¥û#>ô)÷qÆVFã1Ä¨+ÂÚË¡¼ðàjq?{¡ëi)ÀË®õãBæà´G¼O#ÈÕnF®?Ø´YÁ¸ñZ-Èh»Q/3¢XáÁ§ë}@£ÐÇs>1.d¸2.Ã}[Q³fÁ å h%öBÑ,Tga°\ÆT(Þ÷tçè³àú	
-Tá(ªê üÿË A¿ñ8¾<¡É«1VBà8MãÏ¿u£Ïé*p²{Îã¸
-­½Ðç\ÀÞ	J¨¸Þk; ¸wÖ ®ÄïåÎa[Ú¤ nÌkÅGÃ99A¸"íPIá»%HX@ñó@±^ÔwáÚ<(nm«òAC'P -!µCÐu"ðoEµÍCÑËÄõ{P#aîG]HCÛA	ëÚRÐâvÄ±	VaøâWn<¬
-
-¬@ÊL"Caº#G@È2¢Õ°^Ü0¢YÜég}â;Gáb1p¤Ã½VrC	®ÕQDªÍ½õoîÇ9¡ä1#ì-î(ßþú!DAÝ×;¬7fX%ûçL/øpåSU Î½!¨±!ZÅÂð1üq°M¨¿G¡Ú3BçnðÏqD4#&ËâðPJ²dÍÛ¬ÍAëòXkøtIÔ©¬Hì§ð#/D¯"mPÀñ\J*2ÑBøå½ÈNc#Ö¼»æö#·+\ÎfÇjz³|º¡K15B¬Õø++ë1ÈÉe%vLF¤È_ÃÝw£¹ÌÂôOe¨Æ¯!kFïÓq!*±¡Ñ=¡åm	|zQNjKÏüËÉjµÝÄp,ÉdUìl4M%dwSjr&y\t°|gß¨ÞÌJ<%Çè'Rà ²Lù70Ì@þç»Á3b6à4Z"8±"ÆÆ¹üï½SÛD½ÛQÚgv¢dG­PsÏbEÔàý=ÿçvfQzR.¥9½d³:¥ªýÖº¦ÊWùt{Ðë¸JEÑÉC§Ò]È³ef:YR'¸ø¢¡JWì£lð^Ðy[4MÈFÁè©ï®HDé.îN$]ejË'²'>a/¬kFiê÷ÂÚû@	qÝzxg-ÀÕh«ÑB\	á+zýóßÞÞ!£'¥¹<t¸n;b~V áamÔ-k ¹²)ËKV]¸m+áhí¢.1®±/n°j Á:©r<<0;r³RåÛêJDêÛ}»)ªE(=õñ·cú¹4nàä´¦ÐwE_Ð»£O{¹¤ú`WÌO´x+ J¼Â¦£}XV¡+ÇÌ;íX°1F¢>µtéðôyçSXóS©o/5ªOÙòÝ½iüàMáýá:zkÕ$ªðÃá¤Ô$·ðÂ£ìN­¹­"aKQÌB)ÑMþir"¶V!smÅl b`îàgI6¹S2épívXT=JØ¾
-I§ÑT0hY>âç¿Me8;E¨)ZO)®4	rj­À&Ì­ëPØD
-í
-Jª=@WJ(òÆ$#jÔC½\\ ÖÛ©ky@XPm Ãµ&j3BZ>ïIº¥ÿf&_M e«I%²(EÕÇ³¤#Q iq*Ò§Bn'² Üc Ð«l±Û°½¨Ð7t_+)±F3M¶ôë9Óîâ2äß@1ÙO1ÉO¤.}FtßríÍ/ÑÊýóËÙlÍbÆ´(iìM«Õü¢_kvC¸ L¼¨]ªÌB»ef£p-7D¿Û5Ql©ÔihY<-)¦]·½j1Ù²Úe²Ø%¿IvÕríÚÃhþ¦çH±Hì²bLE¥tCåïÍÜãæ8°·(À¬£­^ô)£Ø¶W(õG5Q/ÁÞÑzôPâûñµ±ÃbÃÖ$
-!ëAÚyºÔèéB÷\ð.Jé÷=» Eøµ[hæÚñ$3SÜV²9¯³°ÑÅ:1-ÆRâg¶ÞG Þ:)­Î	ÛlPVù¤ÒL1ÜpÎÅb3­'°·v#ªÝJ2úÑÐÎwPypS'D×w}¼eqQ'¦;4)l
-o±Ê¤«\­5=À%ëf<¨M-½]ýñvæ®FêÑàÕ +MFº¨ÆlÐ )«û~X}å{»ÇFG·± üP¢³{½tÍ×Í@K#I?°øõwÑ#)É¥4ÀÐ$´$ª®¬§h$ÖÄ9åx3¨¶ÑçtF»Å+ç8÷Lv¯"Ù
-;äz³Ù2Éü§S¦ý¾´úÈº´ãc7íâi}ÙÇäHVÈå±6¯	«³õ%^HßÅ4ÝýHvÂ¼Tàl¤Îa°pÚµ L|ö¡<_ÄMwç°¬áoH×urØXóW¦Náó·?MÛ$ÅÕòÌòÀ»óç¹v¨ÂâÂúBpÍä®l*«Ü~ë2vAèD» »ÐQîâÃ»¹ØèÀOM\+ßv±3¸Lò7(=-jcGHæ<.4UÓÂ]S© ÏËæµ"³¼Yx'E´ ¥{m&ïMj1ß1¦àBÑE
-P(ÐÐÒ,9é+&öÂ+æ<XZG×ZÒ
-Å7¢+­XXsßRÕ2¬G°QDj4ãN|51Ùu"ÝÜý)zgëý´±âÌlNñ»)¡F¹ÇX(Ë¨*ÔX£ª"35/dþù)ò1õ@Rè7.IØ(×öùµÊeõáöZò;gQÎ^°°%ÙÎTai2<#ÇÁ9VMeXx=ÆI ÌÚY§«ª.J{OV æ¤¯8J°§3-Ãu °[-¼ìbÈù ;§(Ù#ÎwÝÖPå;J¾ê yì¹¤HÍNNQ(-Ój
-,r»Çkÿð?8²ùoMXxñÇ}qáOé5+{âXýb(Ñ­!>Ñé.¾}èÿ¬nò£AªíÕ.7²ò]±øÌüoV×Im¦YN*{+¨Qù~?ùëÌ
-1ÌÜÚ÷Äãð^¬
-\/AAà(°çÓùzSÉê·´JuWÇTWºÑ¡K¦du«¤+ì\E3gá[ýì«SÙFã@æ¿çÕî¥·½OuFÐ§ü¦é«<Rw] øÍØ±«Í4UUkÁ`§p8²¢z¦¡fd³ØR¼yäö:Ééfa9Ûj6±¨Î)Þ_¡º² ù*ÃÈWÙ<ËìvWYf­­?5°¢ÐÀÂA@_-wQ3Â¼öòÒÒÒ¥S¦LÙÀÊ8²ûRv÷èi[2IÑj³èö$«lµ+¦H"Á5ÀäV´Öìþ¦Uï4éÂÈ[ÃëÆÚ¤Àq~7q#:S~±[ìbS`oAAAçÒ0n³DÇ¡tVvÆ#Ã`ÅJÙÜ{©ºF5Ü«Uëi}E!}U´Êìt*ÿ=F=ð³_6G©ÊÙ1()	ÇJ«Mä¸°G=aUdÅHbà4H6.°tc\ÐþÖâ
-Æ±[ÿ` Å!âÄ­¾«<    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/right-index-finger.png b/panels/user-accounts/data/icons/right-index-finger.png
deleted file mode 100644
index 4aaeaac..0000000
--- a/panels/user-accounts/data/icons/right-index-finger.png
+++ /dev/null
@@ -1,5 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  _IDAThÕYlTUÇ³´t£¥,m"²©Q~DÑH/`\PA!ËO<CÆ-Ñb|P0åA%A"²ä#b(¶T¡µì0µ¶Ó¹>ôÞ¹sf¹wn1þ_îo;ßî7çï´!Ë²ø?#ZsÓ®ÐôH¤t]8½+Ùi&¶ylèÓFDJ¥@Ø£ªÃÅÌéo²;º¦´jì¦ú©w7Ö×L$8ßÓ²lÞ·å;gôÆ_øb¹Jt°Þo ^/6i'|oCsÃUÕoÜ:c~½õM)Zú¶¤¹µmUÇi?s´Øh/s¸®ÄE@DBÀ]@ª^ñKØ+Ý<aêíõUgjhßz®ýçiÞ¨»8ÆUÔ<=çËÐxÛ¼Æáz!ÜÛÀq [DîðgM{B¡òÉ5%ã)½R~C><$v¨	IÔÕÍ6¦4²ÈVU;ÜÇH9éXe?Ç OyÍÇ3~æË+kËCåTD+Ót6w16\MmeCÒèB)J]!R	Ô9tKÚ3dx"¡Ñhú|mGÛ	Áp2ÔTB8Kê¾bóñì0àD²?~=a% $®r¡ó"±¿ÏÇâñý@¥!Dc<¯Ø|<;_nÒ?¼JbÜPþÜé.º»[:jcüS6Û¥ó¼Gø[zëz:uÆj®fèNþm  ÷Í}«­8éßv
-¹dE"²VDÆrñE@[çñkhý®%RJ;\?2Ð~xiÿ'dS¨°Ó]º´}@D ûWM¹ø" Ð¼ÄÒ²®ØÜá¡á§ÜºR2Ññ1W	ÝFæªãÞÈ^Bö¸| Ø·Ú3>éOÉöØTB)Ù,îi ;tr(³ÙûiªÛýt×?ÀeÇxÃ Û4yLSG\î4è%´Ú¥k3M~,@jÎù.yûË& É¡`@âY.© =AUMØãg]º_TµÏ4ùh0­à^2W Ópcy]éÒ}mò dSDdðAW<h·ÚÏI?àA§?©¶÷ÛA·[U5[ólz f¿EÞi?W¸ä=À,>Æ7ððP< löÚukB6^qADfOºä;T5ir 3£dª;D$b°7¼ì Ê\òí¹2¨j+ðÁöQà}<¨7Ð@æñºEU³dÿoÀ¼Ã¾$"K]² °7ªÆ³ø|("Î®*¨2áP>¬Ë¨ªîvTSw½çU0óäÛÖm¬öxAbû¤P¾»QÙ<oPµkÝd9«cª*ù
-Ù_cä0åÆlàgF'y®BòPÕ³ÀgE§ãÁ°ñ.p³ïáPÕßJÇ;rn`)x9~î3?H ?bèÀWÔÑÀ¯ªz½Ã	¨êen^}]¨¡×æ9 #¯Uq¸ÆÈEVAðDÀ^Róoó1Ø\hùRU;!a:­~à=/þîFU;ék~«ê/¾zUmgüÆpÁÂÜ0åDQ·ªú#MxûÝ­ª§½:}­¢ª-6#ý°gq/p*ý8EÀó«7à§ ôÃWo ~Äÿ)¬7g"á÷¿Xþ{y`a©&    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/right-little-finger.png b/panels/user-accounts/data/icons/right-little-finger.png
deleted file mode 100644
index 17946af..0000000
--- a/panels/user-accounts/data/icons/right-little-finger.png
+++ /dev/null
@@ -1,10 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  DIDAThÕhUeÇ?ç{¯wwnåæÛth*|4%$PQÊ@¨¨Ê?ü#úGÄ 2òÂÊ Ê0$¬i*a!®G,²ÔùÛéFÞ¥é~ÝíöÇÎÝÎÎÞ»{Ï=gFßÎû>?Þó|y÷Çsîµ2ÿgDGû" À.UísüHåÀZ`;Ð¬	{ðÀ3 "¯óÍªºË`ò«½Xïñ·À%UMù} ÙÀ»ÀãÀNb0»ÍÕ®5èß~ZDäN¿1M¡:W;,5Ø»Ú·HG¿ÊyVø (´§ÿ°»#"	ú¹1Ñ¥Lpé|§tØHÌÕkðq§Ôü|ñÌÝnÕÌÚiMÍ@ÐEÜéé'àÓ/5ø$]í¹Ý ÙÑåv<±.Y;¹"jÇíùû*S]766-îÜävJ Å ÅÈÜ²]/ÀFûè¸ÊµS'ßSUeO )¡+ÓUÝ|¹iýÜÆºÃ;ÞÈ:M¡¸ÚI~$í;¬²¾Xluí¤»ªê¢Iþ^N÷.ºzfÖ,WZ^ùÔÖÀnªvyÄ³rE@D¢7·S%{E¼¦zZ=Þ#v¯ÞÏþ8³å"£µÜQ?¯>óZ(xg!¬l
-ÃS8ÍÂdé8«,RFóösà\Õ¢1*ìñT©ÆÅÎÑ P%"5NÛBYÙt.)Y12í\bUU$¬1+Ed`§ÀìnçYfÐÙÎÓÿ W3½½»;oÐ²¯LßàM9Y¤'ÓMwºL_ï¬<¦(;Å#h0èRñtß¶mÏ_ÚÝ6D­±hïKÑ|ùHkOg×æ¬<Y68ì;ïõÈÓ@Ë¡åóé&~ºÙ<xÄØÑÖÌ>N¶K_i=µ·iY÷á¬.zÀ{ÁÈlI2t±VÕ4@æÓú!³:¶!Áç·µ¶¦¿K$®=ãÖ6rÎæÞ}¶×nÅµtë×íN½rôÑÌ°õF
-udu"²
-xÐ  <`p1ôGæøØ7MÁaD¤øXàºøHUsÏ¦ ø,üåò³ÎóIü
-p$q ÕÀ}À&`·&ä"àm"2xÂ#ßªª}¹Lp.U.,¶m°7¥P1xØ
-$<ò-#9# ª'¶ËyX30á×ëãª3} ÷"~ó	û,ñÈÂ"`Â|Fªzx1Ï"â®ªÂJ!~ÎgsUÕÀWUð«?É\ãP>|çÀ Ç VD:í}¸üÏÈÊ÷mTD6ÏT'§éÿâf:qâ¨ªJ>£BNâu@·A>øÑ	àR!Fy	¨êàÀáøG8l` ¸»e0ÕÃPUýø>P8þ1âÛèERÒÀÞBýøó:8 ª×
-1,ª^åÖ¥Ñ·ú-hNûôñ¿5öEÀÙR1X|Þ/4} RUÏÒOÂXâDð¢jbU=M]öL|¢ªmùÍQtQ¯ª§û3ÅáAsÁ4"~>GÆo¿ªzÒ¯SàÏ*ªzÐ ãÐ_ûFX?tÿÂq
-ï©7ÀûCIAÀ?!QTm0ñJ ç³.ö_,ÿóÔtv#ÛÙä    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/right-middle-finger.png b/panels/user-accounts/data/icons/right-middle-finger.png
deleted file mode 100644
index 71bd41b..0000000
--- a/panels/user-accounts/data/icons/right-middle-finger.png
+++ /dev/null
@@ -1,9 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  9IDAThÅ[lTEÇg/miUP ©$b0ö«¨xA&^H(h"úÀ¾h¢!/A"C7}ÔØ|*D±+Vµív·{éñ¡gëöìlwÏ³øï2óýwæÌÌ7kÙ¶M­ÐùydM(ÝÔ-Ä&Ë¦N$S{»í¿Ãªù2úB}óÅëµvÌ·FÖG­È2p¬§o<9ò`ï]ÙAS»Ã«Bó?j_´²%µÝâä®A .¤îi@}v(íìí¶³~Ç
-ùí@D6È.¹5/³ëÂ[æ¶¶·´Û7<e{fïYZ£m´-ºòR«>ú¤ãoÈ
-sÞ	H'°¸Ø-"¯úØØÑð¼Â³iÏ!ÈMÙM17<Öæ¥u¡P$Ox3pËÎ+ ­ ^¬X³êBÌ
-5ËL¤FS4dfÑj"ÎuÄë²¸ßk ~	¸×ðmÀ Î¦-,ì´M.f¥°°°s	iæ¨#^@×Ä³ãöxf$m§I%G'ÿbb"÷p­ßxüH¹ÚÀr+Û;w29ÄÆbôï9K%®ö_YÎm>¶ÿôPÆ­<ÜßO$ã¯övÛge.uÎm_~	6È¤·Û¶íäøÍ?ùÂ­ê¿vàöÄV§é&P4e"rlMø" ª)à¬KÜÐÛmç²ï¶½ìö88ûW'°°Ä¥>WØ;o·gL1ø>È(zÁ>/[Lñ®sÎÕÞXNý"Óàµ Ð""­N½Ñ`-5è¦ÈB «@÷§ið 2È®pJÓº;¥{ýÄ
-êklÁ¼aBÀÔqþJ0å]ázØ¥ë7¤AÎD ?æ5.yçÇ¦Kià;ÓàApf03°42=@UÍì¹t=ª:f¼ÖL;GXIñt¦¶×\º¯Jq¬MDÖ7tóò>§¼é<@ÑíOD÷ëNw o©j©ÔÍ4 ÛKÈ(!?ák]ò3À%|3°è «mÀ^gÝPWÈRà>|§ªNr2è¥øRÕì°ÁÞ´ªÁÀN Á%ß1SUíÞ0ØÞ¼b5)¾^ÿ¦ª%þÆ|Ân;]² °·ª ðySDf´ZB&üPÎ ä6ªª»ª6à¥ö%Þãªe¿ÊOEY°ADV;õÕ}3*û2'"ÛÇª>`=°wuøIU¥Q%'ñsL^¦ÜXì£6ÁüQQYªz
-xßw8Þ[Ú½ÃaL`Ü¨ª¾öwÌxåáå6úAT,ðM%^|yK­¾WÕáòf¨jó·>­ÔÐkBó(0àÑÇ+þaò!«"x"àl©]ü|Ô¯Wº| RUO0IÂt[õ$Pô9ªÊUuÉ¼6èxGU¼8TÔ«j?p=p¼Ú>\°1'L3ÂïëôI&pÏïúìQÕ£^|?«¨ê~@ýöÃd>ìA¼ü@û«q
-ç©7ÀýGIEÀh }T[E ø%Pòå¬BdUµªá_å[x1Q\    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/right-ring-finger.png b/panels/user-accounts/data/icons/right-ring-finger.png
deleted file mode 100644
index aa73ae6..0000000
--- a/panels/user-accounts/data/icons/right-ring-finger.png
+++ /dev/null
@@ -1,6 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  _IDAThÕ[lTEÇgÏni»X+hå 0|PbDmÄÁ`£& F}!1!Äc|0j4¨> Bx@	xMh!	(µ\)´
-Þ´ív/>tgÏÎéîÙ=ñÿ23ßeæûwæÌÌ7[+JñF¸ÔH°è¾QÕÄnáVU,^²#V¾d"¶çÖÞÄæ+R	Ï](9à5`]º¾x`ÞÖ|«¼|KÍ¤Ûêkª&`cÓÑqáæ_÷µüè²Ô|:¬"²ØÃä1Gýq¹»¬êTùíuõê§VßAMk¦2kÌÂðí3ß.«ÜeaY%' "swÀnl0»ÑQ¿ UfoN2uL¸Ëöp`Ía¾ZyªÖQL,BÝøÙ³æî¼XrÀ8G½Xj°©rÔ«E¤"±çTW¶FÙ£hÙ×@b Á¥WËv8üh>K îj?älH9Ä®XÛ;p¨ª<Tmaz;ú®ê*RQªBÕD­(vhÄMù48Ú#ÝÉHÔJ´±éø­+3dÁ¶ÂX¡¬¾(@«]	Ô;ÚÑlpÉdg8íW2TýÉ~úSýÄý$bíùP,Vl£M ¢¡xòëÎ®ÖÎîE/ÓhçLë/íDß|(ÀyLõJ>ë¿Òq®©±û|O¢¯²Ó]'­5:²4¾@DîÕ"r)¢¨jpÙ%Î5ÇW¤bÉfkq¬-q9Ós¬çèÉ=;/%»§øøxÕC'ñyàfG;çHn2«Ë»_Ö:ßwÖ:lÛñU}½FH]ºnZBC²iYæÇª"R48´m¦Á ÐbÍN¦uk§ËésçYå°óSÇ3Òåpê:ç¾úKwÚ4xz²¡àLÆ¼Ë%þcÈ2¿¥ðið ¸3-"dpVUNß']ºUõÓà¥&`Ú9l`Ù;à) 	¾v;ð­×àAè7ÈÆÈÀÝà~¼)]>¶qÂ@Ö9 "Q`pwºÓ­ÀGªê<f `³Üë.]®rÉÿxøg`)°Ülö§×­	^üâ¢LVºäÛT5éåd"pp'ÕÀ6±ö¦%TÞ¶å.ùÖá²¨jð¡ÁvðAÔÔó]²ªê¹|Àû#^ù}AD¸dA0a.#Uí÷ðÙ$"ÎD=¨%dÂá\Û¨ªîvTã·íñþãÊ?ç2Èu¬òÕ"²(]_dÐn 1ëmTD6ÏTMÀÓÀ^<îêEâªJ.£|Nâ×¼L¹18HiæiQU[ÏÇ?}}¸ÞïðÆÆ¼¨ê	`_QáøÇ°ØüÜF·H!ßåcèÀ.Ì[j)ðªvå6óA@UÛ¹~Ëèó|ý&4Ï g}úøE'YyÁôÚÀµä£ø ßå¤ªzA¦Ûj±èÞõãPPN¬ªgÌkOTõ¢zU=Ü4Ú)Ì	Ó°(öuúð¼×{Uõ_§¢UTõ ÅöÃ`>ìA¼ü@
-q
-ï©7ÀýCI^@On((·@ñJÀóå,OÄÿÅâÿcK0	h¸p    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/icons/right-thumb.png b/panels/user-accounts/data/icons/right-thumb.png
deleted file mode 100644
index 1c967d6..0000000
--- a/panels/user-accounts/data/icons/right-thumb.png
+++ /dev/null
@@ -1,7 +0,0 @@
-PNG
-
-   IHDR   0   0   Wù   sBIT|d   	pHYs  ×  ×B(x   tEXtSoftware www.inkscape.orgî<  KIDAThÕKlTeÇwæö5-mim­}PD`$¦5Ñ*4WnØèÊÄ(¸5ºp#ºQ´@& rò¨µJmÓm)3-·w¾aæÎ½ÅøßÜïs¾ó¿s¿ÇZñxÿ3ì©@Dò5À°GU£Aúé,^¾v/íÜ÷ÈF`ðªî1<îh¯^wõ·ù@ªxß×È"àm Ø)"3fev­A¿8¹^cðBuv>ðÁ¦ÔÑ."¾%ù, ô_c®÷/"RH5ým@µCç9¥&Ð("y÷CgJ-ó_#®÷0Ïñ^lèq´ïö_ç²¶S6Ç¥ó¼Gø]FÏdlK¶#ýõ¦8Y´û\U/ºõ¾f@UG>8ÓDÙÀ,nÒ> "MÀ^`+ð) vb÷,dB3IÍ ÷F¶°íR
-U"rK²mJ¡qÙlnÔ ]·ið 5È$ÓºpòéÎ~G{­ÃÌF LÇ×#0Ï s¦Ðz®Í4x²ñàLÆÇ¼×%#ùÇLþFMÑE;íõ!Ûn	íªx,ÚF[¯}?÷f@XD"® ÚUu|gÚ¥Û§ªC	4~oÙÃ­ÚêjæK!ã|ÏÉÅKw®¾t¥ùXs|ÔÓÊºÇNÃÄòºÎ¥ûÚ|
-ËöËEõÏ¬¼+¿Æ®¥4TXTÔV¶Nkêl?´	xÑåãÁo´ «ºjà~üTò¹É¼ì,ÚnSRðÔME3ò{6_¤í¸RQ_Î«çRßÔ@¬"f÷vzlñÖ_ã½¦ ø(ü4òäs­Kþ7p8#Pû¬ÊéõÖ¡|z÷%âëè¦ëh73ö6°dÓTUÏnèì_NâWôÈlà	¼UUcé:M¬B±<{EAdZaù2¬5É¨óÈo>JYäæ<«À^éòaJ¡\ðÐ
-ºäÛ¶´Z(®+bþ#·§vî;G×Öþ9ÁÍ@©Çë?T5mú@èêØÑ¡(Q>³²êÔ¤g×¢;ª.¹ÄA0áÛL×RÈâ§Ñ¾¾³Ã±!®±j£;S¬Ü "Î[UP)dÂÏ&y4>ý´gàÏÑþh%÷2gå­©=âÜ¼éÔiÌd0é^<öZ_Ç¯wí<sµYÏÖ²-S¿çDdy²½Üd .'2Y¦Úèùëóì<;¿jèãÊèoÅ¦zÎ)`ñ¬î¿ªªd22pBDêIÝå©ÆnUmÊdñ4ªªgO	Éº²1Êö8ýp£ëðÆYPÕßo|ã×ÝÀÆáåBóYä1à»l½Ø\Í)ïØ¯ªÿdc5UíçÆ¥Ñl½ÞÚ=öñ$
-YYÁäÚÈµËÇTà½lÓr¨J¨j	¦z_ïxéSYEUÛIÜkUµ7³Ù5ä\RÕ6`ðW®>\ïzíä·:ÝIâÄo¿»Tõ´×N¾+sªz P¿~HÜ=#¨ºOàã@."àyêpÿP"à¾èçîÖAâ#þO	¤­e±\ÿå_Vq<±¡v    IEND®B`
\ No newline at end of file
diff --git a/panels/user-accounts/data/net.reactivated.Fprint.Device.xml b/panels/user-accounts/data/net.reactivated.Fprint.Device.xml
new file mode 100644
index 0000000..786d89c
--- /dev/null
+++ b/panels/user-accounts/data/net.reactivated.Fprint.Device.xml
@@ -0,0 +1,585 @@
+<!DOCTYPE node PUBLIC
+"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
+"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd" [
+<!ENTITY ERROR_CLAIM_DEVICE "net.reactivated.Fprint.Error.ClaimDevice">
+<!ENTITY ERROR_ALREADY_IN_USE "net.reactivated.Fprint.Error.AlreadyInUse">
+<!ENTITY ERROR_INTERNAL "net.reactivated.Fprint.Error.Internal">
+<!ENTITY ERROR_PERMISSION_DENIED "net.reactivated.Fprint.Error.PermissionDenied">
+<!ENTITY ERROR_NO_ENROLLED_PRINTS "net.reactivated.Fprint.Error.NoEnrolledPrints">
+<!ENTITY ERROR_NO_ACTION_IN_PROGRESS "net.reactivated.Fprint.Error.NoActionInProgress">
+<!ENTITY ERROR_INVALID_FINGERNAME "net.reactivated.Fprint.Error.InvalidFingername">
+]>
+
+<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
+	<interface name="net.reactivated.Fprint.Device">
+			value="fprint_device" />
+
+		<doc:doc>
+			<doc:title id="polkit-integration">
+				PolicyKit integration
+			</doc:title>
+			<doc:para>
+				fprintd uses PolicyKit to check whether users are allowed to access fingerprint data, or the
+				fingerprint readers itself.
+				<doc:list>
+					<doc:item>
+						<doc:term>net.reactivated.fprint.device.verify</doc:term>
+						<doc:definition>
+							Whether the user is allowed to verify fingers against saved fingerprints.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>net.reactivated.fprint.device.enroll</doc:term>
+						<doc:definition>
+							Whether the user is allowed to enroll new fingerprints.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>net.reactivated.fprint.device.setusername</doc:term>
+						<doc:definition>
+							Whether the user is allowed to query, verify, or enroll fingerprints for users other than itself.
+						</doc:definition>
+					</doc:item>
+				</doc:list>
+			</doc:para>
+
+			<doc:title id="usernames">
+				Usernames
+			</doc:title>
+			<doc:para>
+				When a username argument is used for a method, a PolicyKit check is done on the
+				<doc:tt>net.reactivated.fprint.device.setusername</doc:tt> PolicyKit
+				action to see whether the user the client is running as is allowed to access data from other users.
+			</doc:para>
+			<doc:para>
+				By default, only root is allowed to access fingerprint data for users other than itself. For a normal user,
+				it is recommended that you use an empty string for the username, which will mean "the client the user is
+				running as".
+			</doc:para>
+			<doc:para>
+				See <doc:ref type="description" to="polkit-integration">PolicyKit integration</doc:ref>.
+			</doc:para>
+
+			<doc:title id="fingerprint-names">
+				Fingerprint names
+			</doc:title>
+			<doc:para>
+				When a finger name argument is used for a method, it refers to either a single finger, or
+				"any" finger. See the list of possible values below:
+				<doc:list>
+					<doc:item>
+						<doc:term>left-thumb</doc:term>
+						<doc:definition>
+							Left thumb
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>left-index-finger</doc:term>
+						<doc:definition>
+							Left index finger
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>left-middle-finger</doc:term>
+						<doc:definition>
+							Left middle finger
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>left-ring-finger</doc:term>
+						<doc:definition>
+							Left ring finger
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>left-little-finger</doc:term>
+						<doc:definition>
+							Left little finger
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>right-thumb</doc:term>
+						<doc:definition>
+							Right thumb
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>right-index-finger</doc:term>
+						<doc:definition>
+							Right index finger
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>right-middle-finger</doc:term>
+						<doc:definition>
+							Right middle finger
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>right-ring-finger</doc:term>
+						<doc:definition>
+							Right ring finger
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>right-little-finger</doc:term>
+						<doc:definition>
+							Right little finger
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>any</doc:term>
+						<doc:definition>
+							Any finger. This is only used for <doc:ref type="method" to="Device.VerifyStart">Device.VerifyStart</doc:ref>
+							(select the first finger with a fingerprint associated, or all the fingerprints available for the user when
+							the device supports it) and <doc:ref type="signal" to="Device::VerifyFingerSelected">Device::VerifyFingerSelected</doc:ref>
+							(any finger with an associated fingerprint can be used).
+						</doc:definition>
+					</doc:item>
+				</doc:list>
+			</doc:para>
+
+			<doc:title id="verify-statuses">
+				Verify Statuses
+			</doc:title>
+			<doc:para>
+				<doc:list>
+					Possible values for the result passed through <doc:ref type="signal" to="Device::VerifyResult">Device::VerifyResult</doc:ref> are:
+					<doc:item>
+						<doc:term>verify-no-match</doc:term>
+						<doc:definition>
+							The verification did not match, <doc:ref type="method" to="Device.VerifyStop">Device.VerifyStop</doc:ref> should now be called.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>verify-match</doc:term>
+						<doc:definition>
+							The verification succeeded, <doc:ref type="method" to="Device.VerifyStop">Device.VerifyStop</doc:ref> should now be called.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>verify-retry-scan</doc:term>
+						<doc:definition>
+							The user should retry scanning their finger, the verification is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>verify-swipe-too-short</doc:term>
+						<doc:definition>
+							The user's swipe was too short. The user should retry scanning their finger, the verification is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>verify-finger-not-centered</doc:term>
+						<doc:definition>
+							The user's finger was not centered on the reader. The user should retry scanning their finger, the verification is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>verify-remove-and-retry</doc:term>
+						<doc:definition>
+							The user should remove their finger from the reader and retry scanning their finger, the verification is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>verify-disconnected</doc:term>
+						<doc:definition>
+							The device was disconnected during the verification, no other actions should be taken, and you shouldn't use the device any more.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>verify-unknown-error</doc:term>
+						<doc:definition>
+							An unknown error occurred (usually a driver problem), <doc:ref type="method" to="Device.VerifyStop">Device.VerifyStop</doc:ref> should now be called.
+						</doc:definition>
+					</doc:item>
+				</doc:list>
+			</doc:para>
+
+			<doc:title id="enroll-statuses">
+				Enroll Statuses
+			</doc:title>
+			<doc:para>
+				<doc:list>
+					Possible values for the result passed through <doc:ref type="signal" to="Device::EnrollResult">Device::EnrollResult</doc:ref> are:
+					<doc:item>
+						<doc:term>enroll-completed</doc:term>
+						<doc:definition>
+							The enrollment successfully completed, <doc:ref type="method" to="Device.EnrollStop">Device.EnrollStop</doc:ref> should now be called.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-failed</doc:term>
+						<doc:definition>
+							The enrollment failed, <doc:ref type="method" to="Device.EnrollStop">Device.EnrollStop</doc:ref> should now be called.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-stage-passed</doc:term>
+						<doc:definition>
+							One stage of the enrollment passed, the enrollment is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-retry-scan</doc:term>
+						<doc:definition>
+							The user should retry scanning their finger, the enrollment is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-swipe-too-short</doc:term>
+						<doc:definition>
+							The user's swipe was too short. The user should retry scanning their finger, the enrollment is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-finger-not-centered</doc:term>
+						<doc:definition>
+							The user's finger was not centered on the reader. The user should retry scanning their finger, the enrollment is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-remove-and-retry</doc:term>
+						<doc:definition>
+							The user should remove their finger from the reader and retry scanning their finger, the enrollment is still ongoing.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-data-full</doc:term>
+						<doc:definition>
+							No further prints can be enrolled on this device, <doc:ref type="method" to="Device.EnrollStop">Device.EnrollStop</doc:ref> should now be called.
+
+							<doc:ref type="method" to="DeleteEnrolledFingers2">Delete other prints</doc:ref> from the device first to continue
+							(e.g. from other users). Note that old prints or prints from other operating systems may be deleted automatically
+							to resolve this error without any notification.
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-disconnected</doc:term>
+						<doc:definition>
+							The device was disconnected during the enrollment, no other actions should be taken, and you shouldn't use the device any more.
+
+						</doc:definition>
+					</doc:item>
+					<doc:item>
+						<doc:term>enroll-unknown-error</doc:term>
+						<doc:definition>
+							An unknown error occurred (usually a driver problem), <doc:ref type="method" to="Device.EnrollStop">Device.EnrollStop</doc:ref> should now be called.
+
+						</doc:definition>
+					</doc:item>
+				</doc:list>
+			</doc:para>
+		</doc:doc>
+
+		<!-- ************************************************************ -->
+
+		<method name="ListEnrolledFingers">
+			<arg type="s" name="username" direction="in">
+				<doc:doc><doc:summary>The username for whom to list the enrolled fingerprints. See <doc:ref type="description" to="usernames">Usernames</doc:ref>.</doc:summary></doc:doc>
+			</arg>
+			<arg type="as" name="enrolled_fingers" direction="out">
+				<doc:doc><doc:summary>An array of strings representing the enrolled fingerprints. See <doc:ref type="description" to="fingerprint-names">Fingerprint names</doc:ref>.</doc:summary></doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						List all the enrolled fingerprints for the chosen user.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+					<doc:error name="&ERROR_NO_ENROLLED_PRINTS;">if the chosen user doesn't have any fingerprints enrolled</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<method name="DeleteEnrolledFingers">
+			<arg type="s" name="username" direction="in">
+				<doc:doc><doc:summary>The username for whom to delete the enrolled fingerprints. See <doc:ref type="description" to="usernames">Usernames</doc:ref>.</doc:summary></doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Delete all the enrolled fingerprints for the chosen user.
+					</doc:para>
+					<doc:para>
+						This call only exists for compatibility reasons, you should instead claim the device using
+						<doc:ref type="method" to="Device.Claim">Device.Claim</doc:ref> and then call
+						<doc:ref type="method" to="DeleteEnrolledFingers2">DeleteEnrolledFingers2</doc:ref>.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<method name="DeleteEnrolledFingers2">
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Delete all the enrolled fingerprints for the user currently claiming the device with <doc:ref type="method" to="Device.Claim">Device.Claim</doc:ref>.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<method name="Claim">
+			<arg type="s" name="username" direction="in">
+				<doc:doc><doc:summary>The username for whom to claim the device. See <doc:ref type="description" to="usernames">Usernames</doc:ref>.</doc:summary></doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Claim the device for the chosen user.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+					<doc:error name="&ERROR_ALREADY_IN_USE;">if the device is already claimed</doc:error>
+					<doc:error name="&ERROR_INTERNAL;">if the device couldn't be claimed</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<method name="Release">
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Release a device claimed with <doc:ref type="method" to="Device.Claim">Device.Claim</doc:ref>.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+					<doc:error name="&ERROR_CLAIM_DEVICE;">if the device was not claimed</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<method name="VerifyStart">
+			<arg type="s" name="finger_name" direction="in">
+				<doc:doc><doc:summary>A string representing the finger to verify. See <doc:ref type="description" to="fingerprint-names">Fingerprint names</doc:ref>.</doc:summary></doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Check the chosen finger against a saved fingerprint. You need to have claimed the device using
+						<doc:ref type="method" to="Device.Claim">Device.Claim</doc:ref>. The finger selected is sent to the front-end
+						using <doc:ref type="signal" to="Device::VerifyFingerSelected">Device::VerifyFingerSelected</doc:ref> and
+						verification status through <doc:ref type="signal" to="Device::VerifyStatus">Device::VerifyStatus</doc:ref>.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+					<doc:error name="&ERROR_CLAIM_DEVICE;">if the device was not claimed</doc:error>
+					<doc:error name="&ERROR_ALREADY_IN_USE;">if the device was already being used</doc:error>
+					<doc:error name="&ERROR_NO_ENROLLED_PRINTS;">if there are no enrolled prints for the chosen user</doc:error>
+					<doc:error name="&ERROR_INTERNAL;">if there was an internal error</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<method name="VerifyStop">
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Stop an on-going fingerprint verification started with <doc:ref type="method" to="Device.VerifyStart">Device.VerifyStart</doc:ref>.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+					<doc:error name="&ERROR_CLAIM_DEVICE;">if the device was not claimed</doc:error>
+					<doc:error name="&ERROR_NO_ACTION_IN_PROGRESS;">if there was no ongoing verification</doc:error>
+					<doc:error name="&ERROR_INTERNAL;">if there was an internal error</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<signal name="VerifyFingerSelected">
+			<arg type="s" name="finger_name">
+				<doc:doc>
+					<doc:summary>
+						<doc:para>
+							A string representing the finger select to be verified.
+						</doc:para>
+					</doc:summary>
+				</doc:doc>
+			</arg>
+			<doc:doc>
+				<doc:seealso>
+					<doc:ref type="description" to="fingerprint-names">Fingerprint names</doc:ref>.
+				</doc:seealso>
+			</doc:doc>
+		</signal>
+
+		<!-- ************************************************************ -->
+
+		<signal name="VerifyStatus">
+			<arg type="s" name="result">
+				<doc:doc>
+					<doc:summary>
+						A string representing the status of the verification.
+					</doc:summary>
+				</doc:doc>
+			</arg>
+
+			<arg type="b" name="done">
+				<doc:doc>
+					<doc:summary>
+						Whether the verification finished and can be stopped.
+					</doc:summary>
+				</doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:seealso>
+					<doc:ref type="description" to="verify-statuses">Verify Statuses</doc:ref> and <doc:ref type="method" to="Device.VerifyStop">Device.VerifyStop</doc:ref>.
+				</doc:seealso>
+			</doc:doc>
+		</signal>
+
+		<!-- ************************************************************ -->
+
+		<method name="EnrollStart">
+			<arg type="s" name="finger_name" direction="in">
+				<doc:doc><doc:summary>A string representing the finger to enroll. See
+				<doc:ref type="description" to="fingerprint-names">Fingerprint names</doc:ref>.
+				Note that "any" is not a valid finger name for this method.</doc:summary></doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Start enrollment for the selected finger. You need to have claimed the device using
+						<doc:ref type="method" to="Device.Claim">Device.Claim</doc:ref> before calling
+						this method. Enrollment status is sent through <doc:ref type="signal" to="Device::EnrollStatus">Device::EnrollStatus</doc:ref>.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+					<doc:error name="&ERROR_CLAIM_DEVICE;">if the device was not claimed</doc:error>
+					<doc:error name="&ERROR_ALREADY_IN_USE;">if the device was already being used</doc:error>
+					<doc:error name="&ERROR_INVALID_FINGERNAME;">if the finger name passed is invalid</doc:error>
+					<doc:error name="&ERROR_INTERNAL;">if there was an internal error</doc:error>
+				</doc:errors>
+
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<method name="EnrollStop">
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Stop an on-going fingerprint enrollment started with <doc:ref type="method" to="Device.EnrollStart">Device.EnrollStart</doc:ref>.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_PERMISSION_DENIED;">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+					<doc:error name="&ERROR_CLAIM_DEVICE;">if the device was not claimed</doc:error>
+					<doc:error name="&ERROR_NO_ACTION_IN_PROGRESS;">if there was no ongoing verification</doc:error>
+					<doc:error name="&ERROR_INTERNAL;">if there was an internal error</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<signal name="EnrollStatus">
+			<arg type="s" name="result">
+				<doc:doc>
+					<doc:summary>
+						A string representing the status of the enrollment.
+					</doc:summary>
+				</doc:doc>
+			</arg>
+
+			<arg type="b" name="done">
+				<doc:doc>
+					<doc:summary>
+						Whether the enrollment finished and can be stopped.
+					</doc:summary>
+				</doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:seealso>
+					<doc:ref type="description" to="enroll-statuses">Enrollment Statuses</doc:ref> and <doc:ref type="method" to="Device.EnrollStop">Device.EnrollStop</doc:ref>.
+				</doc:seealso>
+			</doc:doc>
+		</signal>
+
+		<!-- ************************************************************ -->
+
+		<property name="name" type="s" access="read">
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						The product name of the device.
+					</doc:para>
+				</doc:description>
+			</doc:doc>
+		</property>
+
+		<!-- ************************************************************ -->
+
+		<property name="num-enroll-stages" type="i" access="read">
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						The number of enrollment stages for the device. This is only available when the device has been claimed, otherwise it will be undefined (-1).
+					</doc:para>
+					<doc:seealso>
+						<doc:ref type="method" to="Device.Claim">Device.Claim</doc:ref> and <doc:ref type="method" to="Device.EnrollStart">Device.EnrollStart</doc:ref>.
+					</doc:seealso>
+				</doc:description>
+			</doc:doc>
+		</property>
+
+		<!-- ************************************************************ -->
+
+		<property name="scan-type" type="s" access="read">
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						The scan type of the device, either "press" if you place your finger on the device, or "swipe" if you have to swipe your finger.
+					</doc:para>
+				</doc:description>
+			</doc:doc>
+		</property>
+
+	</interface>
+</node>
+
diff --git a/panels/user-accounts/data/net.reactivated.Fprint.Manager.xml b/panels/user-accounts/data/net.reactivated.Fprint.Manager.xml
new file mode 100644
index 0000000..f4a38c7
--- /dev/null
+++ b/panels/user-accounts/data/net.reactivated.Fprint.Manager.xml
@@ -0,0 +1,50 @@
+<!DOCTYPE node PUBLIC
+"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
+"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd" [
+<!ENTITY ERROR_NO_SUCH_DEVICE "net.reactivated.Fprint.Error.NoSuchDevice">
+]>
+<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
+	<interface name="net.reactivated.Fprint.Manager">
+		<annotation name="org.freedesktop.DBus.GLib.CSymbol"
+			value="fprint_manager" />
+
+		<!-- ************************************************************ -->
+
+		<method name="GetDevices">
+			<arg type="ao" name="devices" direction="out">
+				<doc:doc><doc:summary>An array of object paths for devices.</doc:summary></doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Enumerate all the fingerprint readers attached to the system. If there are
+						no devices available, an empty array is returned.
+					</doc:para>
+				</doc:description>
+			</doc:doc>
+		</method>
+
+		<!-- ************************************************************ -->
+
+		<method name="GetDefaultDevice">
+			<arg type="o" name="device" direction="out">
+				<doc:doc><doc:summary>The object path for the default device.</doc:summary></doc:doc>
+			</arg>
+
+			<doc:doc>
+				<doc:description>
+					<doc:para>
+						Returns the default fingerprint reader device.
+					</doc:para>
+				</doc:description>
+
+				<doc:errors>
+					<doc:error name="&ERROR_NO_SUCH_DEVICE;">if the device does not exist</doc:error>
+				</doc:errors>
+			</doc:doc>
+		</method>
+
+	</interface>
+</node>
+
diff --git a/panels/user-accounts/meson.build b/panels/user-accounts/meson.build
index b1c322a..2a3745c 100644
--- a/panels/user-accounts/meson.build
+++ b/panels/user-accounts/meson.build
@@ -107,22 +107,14 @@ resource_data = files(
   'cc-login-history-dialog.ui',
   'cc-password-dialog.ui',
   'cc-user-panel.ui',
-  'data/icons/left-index-finger.png',
-  'data/icons/left-little-finger.png',
-  'data/icons/left-middle-finger.png',
-  'data/icons/left-ring-finger.png',
-  'data/icons/left-thumb.png',
-  'data/icons/print_error.png',
-  'data/icons/print_ok.png',
-  'data/icons/right-index-finger.png',
-  'data/icons/right-little-finger.png',
-  'data/icons/right-middle-finger.png',
-  'data/icons/right-ring-finger.png',
-  'data/icons/right-thumb.png',
-  'data/account-fingerprint.ui',
+  'cc-fingerprint-dialog.ui',
+  'data/icons/fingerprint-detection-complete-symbolic.svg',
+  'data/icons/fingerprint-detection-symbolic.svg',
+  'data/icons/fingerprint-detection-warning-symbolic.svg',
   'data/carousel.css',
   'data/join-dialog.ui',
   'data/user-accounts-dialog.css',
+  'data/cc-fingerprint-dialog.css',
 )
 
 common_sources += gnome.compile_resources(
@@ -144,18 +136,39 @@ common_sources += gnome.gdbus_codegen(
   annotations: ['org.freedesktop.realmd.Realm', 'org.gtk.GDBus.C.Name', 'Common']
 )
 
+fprintd_namespace = 'net.reactivated.Fprint'
+common_sources += gnome.gdbus_codegen(
+  'cc-fprintd-generated',
+  sources: [
+    'data' / fprintd_namespace + '.Manager.xml',
+    'data' / fprintd_namespace + '.Device.xml',
+  ],
+  interface_prefix: fprintd_namespace + '.',
+  namespace: 'CcFprintd',
+  autocleanup: 'all',
+)
+
+enum_headers = [
+  'cc-fingerprint-manager.h',
+]
+
 sources = common_sources + files(
   'cc-avatar-chooser.c',
   'cc-carousel.c',
   'cc-crop-area.c',
+  'cc-fingerprint-manager.c',
+  'cc-fingerprint-dialog.c',
   'cc-login-history-dialog.c',
   'cc-password-dialog.c',
   'cc-user-image.c',
   'cc-user-panel.c',
   'run-passwd.c',
-  'um-fingerprint-dialog.c',
 )
 
+sources += gnome.mkenums_simple(
+  'cc-user-accounts-enum-types',
+  sources: files(enum_headers))
+
 # Kerberos support
 krb_dep = dependency('krb5', required: false)
 assert(krb_dep.found(), 'kerberos libraries not found in your path')
diff --git a/panels/user-accounts/um-fingerprint-dialog.c b/panels/user-accounts/um-fingerprint-dialog.c
deleted file mode 100644
index bc90c83..0000000
--- a/panels/user-accounts/um-fingerprint-dialog.c
+++ /dev/null
@@ -1,853 +0,0 @@
-/* gnome-about-me-fingerprint.h
- * Copyright (C) 2008 Bastien Nocera <hadess@hadess.net>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "config.h"
-
-#include <stdlib.h>
-#include <glib/gi18n.h>
-#include <gio/gio.h>
-#include <gtk/gtk.h>
-
-#include "um-fingerprint-dialog.h"
-
-/* Retrieve a widget from the UI object */
-#define WID(s) GTK_WIDGET (gtk_builder_get_object (dialog, s))
-
-/* Translate fprintd strings */
-#define TR(s) dgettext("fprintd", s)
-#include "fingerprint-strings.h"
-
-static GDBusProxy *manager = NULL;
-static GDBusConnection *connection = NULL;
-static gboolean is_disable = FALSE;
-
-enum {
-        STATE_NONE,
-        STATE_CLAIMED,
-        STATE_ENROLLING
-};
-
-typedef struct {
-        GtkWidget *fingerprint_row;
-        GtkLabel *state_label;
-
-        GtkWidget *ass;
-        GtkBuilder *dialog;
-
-        GDBusProxy *device;
-        GCancellable *cancellable;
-        gboolean is_swipe;
-        int num_enroll_stages;
-        int num_stages_done;
-        char *name;
-        const char *finger;
-        gint state;
-} EnrollData;
-
-static void
-ensure_manager (GCancellable *cancellable)
-{
-        GError *error = NULL;
-
-        if (manager != NULL)
-                return;
-
-        connection = g_bus_get_sync (G_BUS_TYPE_SYSTEM, cancellable, &error);
-        if (connection == NULL) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
-                        g_warning ("Failed to connect to session bus: %s",
-                                   error->message);
-                }
-                g_error_free (error);
-                return;
-        }
-
-        manager = g_dbus_proxy_new_sync (connection,
-                                         G_DBUS_PROXY_FLAGS_NONE,
-                                         NULL,
-                                         "net.reactivated.Fprint",
-                                         "/net/reactivated/Fprint/Manager",
-                                         "net.reactivated.Fprint.Manager",
-                                         cancellable,
-                                         &error);
-        if (manager == NULL) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
-                        g_warning ("Failed to create fingerprint manager proxy: %s",
-                                   error->message);
-                }
-                g_error_free (error);
-        }
-}
-
-static GDBusProxy *
-get_first_device (GCancellable *cancellable)
-{
-        GDBusProxy *device;
-        GVariant *result;
-        char *device_str = NULL;
-        GError *error = NULL;
-
-        result = g_dbus_proxy_call_sync (manager,
-                                         "GetDefaultDevice",
-                                         g_variant_new ("()"),
-                                         G_DBUS_CALL_FLAGS_NONE,
-                                         -1,
-                                         cancellable,
-                                         NULL);
-        if (result == NULL)
-                return NULL;
-        if (!g_variant_is_of_type (result, G_VARIANT_TYPE ("(o)")))
-                g_warning ("net.reactivated.Fprint.Manager.GetDefaultDevice returns unknown result %s", g_variant_get_type_string (result));
-        else
-                g_variant_get (result, "(o)", &device_str);
-        g_variant_unref (result);
-
-        if (device_str == NULL)
-                return NULL;
-
-        device = g_dbus_proxy_new_sync (connection,
-                                        G_DBUS_PROXY_FLAGS_NONE,
-                                        NULL,
-                                        "net.reactivated.Fprint",
-                                        device_str,
-                                        "net.reactivated.Fprint.Device",
-                                        cancellable,
-                                        &error);
-        if (device == NULL) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
-                        g_warning ("Failed to create fingerprint device proxy: %s",
-                                   error->message);
-                }
-                g_error_free (error);
-        }
-
-        g_free (device_str);
-
-        return device;
-}
-
-static const char *
-get_reason_for_error (const char *dbus_error)
-{
-        if (g_str_equal (dbus_error, "net.reactivated.Fprint.Error.PermissionDenied"))
-                return N_("You are not allowed to access the device. Contact your system administrator.");
-        if (g_str_equal (dbus_error, "net.reactivated.Fprint.Error.AlreadyInUse"))
-                return N_("The device is already in use.");
-        if (g_str_equal (dbus_error, "net.reactivated.Fprint.Error.Internal"))
-                return N_("An internal error occurred.");
-
-        return NULL;
-}
-
-static GtkWidget *
-get_error_dialog (const char *title,
-                  const char *dbus_error,
-                  GtkWindow *parent)
-{
-        GtkWidget *error_dialog;
-        const char *reason;
-
-        if (dbus_error == NULL)
-                g_warning ("get_error_dialog called with reason == NULL");
-
-        error_dialog =
-                gtk_message_dialog_new (parent,
-                                GTK_DIALOG_MODAL,
-                                GTK_MESSAGE_ERROR,
-                                GTK_BUTTONS_OK,
-                                "%s", title);
-        reason = get_reason_for_error (dbus_error);
-        gtk_message_dialog_format_secondary_text
-                (GTK_MESSAGE_DIALOG (error_dialog), "%s", reason ? _(reason) : _(dbus_error));
-
-        gtk_window_set_title (GTK_WINDOW (error_dialog), ""); /* as per HIG */
-        gtk_container_set_border_width (GTK_CONTAINER (error_dialog), 5);
-        gtk_dialog_set_default_response (GTK_DIALOG (error_dialog),
-                                         GTK_RESPONSE_OK);
-        gtk_window_set_modal (GTK_WINDOW (error_dialog), TRUE);
-        gtk_window_set_position (GTK_WINDOW (error_dialog), GTK_WIN_POS_CENTER_ON_PARENT);
-
-        return error_dialog;
-}
-
-static void
-set_fingerprint_row_cb (GObject      *source_object,
-                        GAsyncResult *res,
-                        gpointer      user_data)
-{
-        GTask *task;
-        GtkWidget *fingerprint_row;
-        g_autoptr(GtkLabel) state_label = NULL;
-        g_autoptr(GError) error = NULL;
-        gboolean enabled;
-        gboolean visible;
-
-        task = G_TASK (res);
-        fingerprint_row = GTK_WIDGET (source_object);
-        state_label = user_data;
-        enabled = g_task_propagate_boolean (task, &error);
-        visible = TRUE;
-
-        if (error) {
-                visible = FALSE;
-
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
-                        g_warning ("Fingerprint row not available: %s",
-                                   error->message);
-                }
-        }
-
-        if (enabled) {
-                is_disable = TRUE;
-                gtk_label_set_text (state_label, _("Enabled"));
-        } else {
-                is_disable = FALSE;
-                gtk_label_set_text (state_label, _("Disabled"));
-        }
-
-        gtk_widget_set_sensitive (fingerprint_row, TRUE);
-        gtk_widget_set_visible (fingerprint_row, visible);
-}
-
-static void
-set_fingerprint_task_func (GTask        *task,
-                           gpointer      source_object,
-                           gpointer      task_data,
-                           GCancellable *cancellable)
-{
-        GDBusProxy *device;
-        GVariant *result;
-        GVariantIter *fingers;
-        GError *error = NULL;
-
-        ensure_manager (cancellable);
-        if (manager == NULL) {
-                g_task_return_new_error (task, G_IO_ERROR, G_IO_ERROR_FAILED,
-                                         "Impossible to get fprintd manager");
-                return;
-        }
-
-        device = get_first_device (cancellable);
-        if (device == NULL) {
-                g_task_return_new_error (task, G_IO_ERROR, G_IO_ERROR_FAILED,
-                                         "Impossible to get fprintd device");
-                return;
-        }
-
-        result = g_dbus_proxy_call_sync (device, "ListEnrolledFingers", g_variant_new ("(s)", ""), G_DBUS_CALL_FLAGS_NONE, -1, cancellable, &error);
-        if (!result) {
-                if (!g_dbus_error_is_remote_error (error) ||
-                    strcmp (g_dbus_error_get_remote_error(error), "net.reactivated.Fprint.Error.NoEnrolledPrints") != 0) {
-                        g_object_unref (device);
-                        g_task_return_error (task, error);
-                        return;
-                }
-        }
-
-        if (result && g_variant_is_of_type (result, G_VARIANT_TYPE ("(as)")))
-                g_variant_get (result, "(as)", &fingers);
-        else
-                fingers = NULL;
-
-        if (g_task_return_error_if_cancelled (task))
-                return;
-
-        if (fingers == NULL || g_variant_iter_n_children (fingers) == 0) {
-                g_task_return_boolean (task, FALSE);
-        } else {
-                g_task_return_boolean (task, TRUE);
-        }
-
-        if (result != NULL)
-                g_variant_unref (result);
-        if (fingers != NULL)
-                g_variant_iter_free (fingers);
-        g_object_unref (device);
-}
-
-void
-set_fingerprint_row (GtkWidget    *row,
-                     GtkLabel     *state_label,
-                     GCancellable *cancellable)
-{
-        g_autoptr(GTask) task = NULL;
-
-        task = g_task_new (row, cancellable, set_fingerprint_row_cb,
-                           g_object_ref (state_label));
-        g_task_run_in_thread (task, set_fingerprint_task_func);
-}
-
-static void
-delete_fingerprint_task_func (GTask        *task,
-                              gpointer      source_object,
-                              gpointer      task_data,
-                              GCancellable *cancellable)
-{
-        GDBusProxy *device;
-        GVariant *result;
-
-        ensure_manager (cancellable);
-        if (manager == NULL)
-                return;
-
-        device = get_first_device (cancellable);
-        if (device == NULL)
-                return;
-
-        result = g_dbus_proxy_call_sync (device, "DeleteEnrolledFingers", g_variant_new ("(s)", ""), G_DBUS_CALL_FLAGS_NONE, -1, cancellable, NULL);
-        if (result)
-                g_variant_unref (result);
-
-        g_object_unref (device);
-
-        set_fingerprint_task_func (task, source_object, task_data, cancellable);
-}
-
-static void
-delete_fingerprints_question (GtkWindow    *parent,
-                              GtkWidget    *fingerprint_row,
-                              GtkLabel     *state_label,
-                              ActUser      *user,
-                              GCancellable *cancellable)
-{
-        GtkWidget *question;
-        GtkWidget *button;
-
-        question = gtk_message_dialog_new (parent,
-                                           GTK_DIALOG_MODAL,
-                                           GTK_MESSAGE_QUESTION,
-                                           GTK_BUTTONS_NONE,
-                                           _("Delete registered fingerprints?"));
-        gtk_dialog_add_button (GTK_DIALOG (question), _("_Cancel"), GTK_RESPONSE_CANCEL);
-        gtk_window_set_modal (GTK_WINDOW (question), TRUE);
-
-        button = gtk_button_new_with_mnemonic (_("_Delete Fingerprints"));
-        gtk_widget_set_can_default (button, TRUE);
-        gtk_widget_show (button);
-        gtk_dialog_add_action_widget (GTK_DIALOG (question), button, GTK_RESPONSE_OK);
-
-        gtk_message_dialog_format_secondary_text (GTK_MESSAGE_DIALOG (question),
-                                                  _("Do you want to delete your registered fingerprints so fingerprint login is disabled?"));
-        gtk_dialog_set_default_response (GTK_DIALOG (question), GTK_RESPONSE_OK);
-
-        if (gtk_dialog_run (GTK_DIALOG (question)) == GTK_RESPONSE_OK) {
-                g_autoptr(GTask) task = NULL;
-
-                gtk_widget_set_sensitive (fingerprint_row, FALSE);
-
-                task = g_task_new (fingerprint_row, cancellable,
-                                   set_fingerprint_row_cb,
-                                   g_object_ref (state_label));
-                g_task_run_in_thread (task, delete_fingerprint_task_func);
-        }
-
-        gtk_widget_destroy (question);
-}
-
-static gboolean
-enroll_start (EnrollData *data, GError **error)
-{
-        GVariant *result;
-
-        result = g_dbus_proxy_call_sync (data->device, "EnrollStart", g_variant_new ("(s)", data->finger), G_DBUS_CALL_FLAGS_NONE, -1, NULL, error);
-        if (result == NULL)
-                return FALSE;
-        g_variant_unref (result);
-        return TRUE;
-}
-
-static gboolean
-enroll_stop (EnrollData *data, GError **error)
-{
-        GVariant *result;
-
-        result = g_dbus_proxy_call_sync (data->device, "EnrollStop", g_variant_new ("()"), G_DBUS_CALL_FLAGS_NONE, -1, NULL, error);
-        if (result == NULL)
-                return FALSE;
-        g_variant_unref (result);
-        return TRUE;
-}
-
-static gboolean
-claim (EnrollData *data, GError **error)
-{
-        GVariant *result;
-
-        result = g_dbus_proxy_call_sync (data->device, "Claim", g_variant_new ("(s)", ""), G_DBUS_CALL_FLAGS_NONE, -1, NULL, error);
-        if (result == NULL)
-                return FALSE;
-        g_variant_unref (result);
-        return TRUE;
-}
-
-static gboolean
-release (EnrollData *data, GError **error)
-{
-        GVariant *result;
-
-        result = g_dbus_proxy_call_sync (data->device, "Release", g_variant_new ("()"), G_DBUS_CALL_FLAGS_NONE, -1, NULL, error);
-        if (result == NULL)
-                return FALSE;
-        g_variant_unref (result);
-        return TRUE;
-}
-
-static void
-enroll_data_destroy (EnrollData *data)
-{
-        switch (data->state) {
-        case STATE_ENROLLING:
-                enroll_stop (data, NULL);
-                /* fall-through */
-        case STATE_CLAIMED:
-                release (data, NULL);
-                /* fall-through */
-        case STATE_NONE:
-                g_free (data->name);
-                g_object_unref (data->device);
-                g_object_unref (data->dialog);
-                g_object_unref (data->cancellable);
-                gtk_widget_destroy (data->ass);
-
-                g_free (data);
-        }
-}
-
-static const char *
-selected_finger (GtkBuilder *dialog)
-{
-        int index;
-
-        if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (WID ("radiobutton1")))) {
-                gtk_widget_set_sensitive (WID ("finger_combobox"), FALSE);
-                return "right-index-finger";
-        }
-        if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (WID ("radiobutton2")))) {
-                gtk_widget_set_sensitive (WID ("finger_combobox"), FALSE);
-                return "left-index-finger";
-        }
-        gtk_widget_set_sensitive (WID ("finger_combobox"), TRUE);
-        index = gtk_combo_box_get_active (GTK_COMBO_BOX (WID ("finger_combobox")));
-        switch (index) {
-        case 0:
-                return "left-thumb";
-        case 1:
-                return "left-middle-finger";
-        case 2:
-                return "left-ring-finger";
-        case 3:
-                return "left-little-finger";
-        case 4:
-                return "right-thumb";
-        case 5:
-                return "right-middle-finger";
-        case 6:
-                return "right-ring-finger";
-        case 7:
-                return "right-little-finger";
-        default:
-                g_assert_not_reached ();
-        }
-
-        return NULL;
-}
-
-static void
-finger_radio_button_toggled (GtkToggleButton *button, EnrollData *data)
-{
-        GtkBuilder *dialog = data->dialog;
-        char *msg;
-
-        data->finger = selected_finger (data->dialog);
-
-        msg = finger_str_to_msg (data->finger, data->name, data->is_swipe);
-        gtk_label_set_text (GTK_LABEL (WID("enroll-label")), msg);
-        g_free (msg);
-}
-
-static void
-finger_combobox_changed (GtkComboBox *combobox, EnrollData *data)
-{
-        GtkBuilder *dialog = data->dialog;
-        char *msg;
-
-        data->finger = selected_finger (data->dialog);
-
-        msg = finger_str_to_msg (data->finger, data->name, data->is_swipe);
-        gtk_label_set_text (GTK_LABEL (WID("enroll-label")), msg);
-        g_free (msg);
-}
-
-static void
-assistant_cancelled (GtkAssistant *ass, EnrollData *data)
-{
-        GtkWidget *fingerprint_row = data->fingerprint_row;
-        GtkLabel *state_label = data->state_label;
-        GCancellable *cancellable = data->cancellable;
-
-        enroll_data_destroy (data);
-        set_fingerprint_row (fingerprint_row, state_label, cancellable);
-}
-
-static void
-enroll_result (EnrollData *data, const char *result, gboolean done)
-{
-        GtkBuilder *dialog = data->dialog;
-        char *msg;
-
-        if (g_str_equal (result, "enroll-completed") || g_str_equal (result, "enroll-stage-passed")) {
-                GtkFlowBoxChild *child;
-                const char *path;
-
-                data->num_stages_done++;
-                path = "/org/gnome/control-center/user-accounts/print_ok.png";
-                child = gtk_flow_box_get_child_at_index (GTK_FLOW_BOX (WID ("enroll-flowbox")),
-                                                         data->num_stages_done - 1);
-                if (child) {
-                        GtkImage *image = GTK_IMAGE (gtk_bin_get_child (GTK_BIN (child)));
-                        gtk_image_set_from_resource (image, path);
-                }
-        }
-        if (g_str_equal (result, "enroll-completed")) {
-                gtk_label_set_text (GTK_LABEL (WID ("status-label")), _("Done!"));
-                gtk_label_set_text (GTK_LABEL (WID("enroll-label")), "");
-                gtk_assistant_set_page_complete (GTK_ASSISTANT (data->ass), WID ("page2"), TRUE);
-        }
-
-        if (done != FALSE) {
-                enroll_stop (data, NULL);
-                data->state = STATE_CLAIMED;
-                if (g_str_equal (result, "enroll-completed") == FALSE) {
-                        /* The enrollment failed, restart it */
-                        enroll_start (data, NULL);
-                        data->state = STATE_ENROLLING;
-                        result = "enroll-retry-scan";
-                } else {
-                        return;
-                }
-        }
-
-        msg = g_strdup_printf (TR(enroll_result_str_to_msg (result, data->is_swipe)), data->name);
-        gtk_label_set_text (GTK_LABEL (WID ("status-label")), msg);
-        g_free (msg);
-}
-
-static void
-device_signal_cb (GDBusProxy *proxy, gchar *sender_name, gchar *signal_name, GVariant *parameters, EnrollData *data)
-{
-        if (strcmp (signal_name, "EnrollStatus") == 0) {
-                if (g_variant_is_of_type (parameters, G_VARIANT_TYPE ("(sb)"))) {
-                        gchar *result;
-                        gboolean done;
-
-                        g_variant_get (parameters, "(&sb)", &result, &done);
-                        enroll_result (data, result, done);
-                }
-        }
-}
-
-static void
-assistant_prepare (GtkAssistant *ass, GtkWidget *page, EnrollData *data)
-{
-        const char *name;
-
-        name = g_object_get_data (G_OBJECT (page), "name");
-        if (name == NULL)
-                return;
-
-        if (g_str_equal (name, "enroll")) {
-                GError *error = NULL;
-                GtkBuilder *dialog = data->dialog;
-                GtkWidget *enroll_flowbox;
-                char *path;
-                guint i;
-                GVariant *result;
-                gint num_enroll_stages;
-
-                if (!claim (data, &error)) {
-                        GtkWidget *d;
-                        char *msg;
-
-                        /* translators:
-                         * The variable is the name of the device, for example:
-                         * "Could you not access "Digital Persona U.are.U 4000/4000B" device */
-                        msg = g_strdup_printf (_("Could not access â%sâ device"), data->name);
-                        d = get_error_dialog (msg, error->message, GTK_WINDOW (data->ass));
-                        g_error_free (error);
-                        gtk_dialog_run (GTK_DIALOG (d));
-                        gtk_widget_destroy (d);
-                        g_free (msg);
-
-                        enroll_data_destroy (data);
-
-                        return;
-                }
-                data->state = STATE_CLAIMED;
-
-                result = g_dbus_connection_call_sync (connection,
-                                                      "net.reactivated.Fprint",
-                                                      g_dbus_proxy_get_object_path (data->device),
-                                                      "org.freedesktop.DBus.Properties",
-                                                      "Get",
-                                                      g_variant_new ("(ss)", "net.reactivated.Fprint.Device", "num-enroll-stages"),
-                                                      G_VARIANT_TYPE ("(v)"),
-                                                      G_DBUS_CALL_FLAGS_NONE,
-                                                      -1,
-                                                      NULL,
-                                                      &error);
-                num_enroll_stages = 0;
-                if (result) {
-                        GVariant *v;
-
-                        g_variant_get (result, "(v)", &v);
-                        num_enroll_stages = g_variant_get_int32 (v);
-
-                        g_variant_unref (result);
-                        g_variant_unref (v);
-                }
-
-                if (num_enroll_stages < 1) {
-                        GtkWidget *d;
-                        char *msg;
-
-                        /* translators:
-                         * The variable is the name of the device, for example:
-                         * "Could you not access "Digital Persona U.are.U 4000/4000B" device */
-                        msg = g_strdup_printf (_("Could not access â%sâ device"), data->name);
-                        d = get_error_dialog (msg, "net.reactivated.Fprint.Error.Internal", GTK_WINDOW (data->ass));
-                        gtk_dialog_run (GTK_DIALOG (d));
-                        gtk_widget_destroy (d);
-                        g_free (msg);
-
-                        enroll_data_destroy (data);
-                        return;
-                }
-
-                data->num_enroll_stages = num_enroll_stages;
-                enroll_flowbox = WID ("enroll-flowbox");
-
-                /* Hide the extra "bulbs" if not needed */
-                /* And set the right image */
-                {
-                        path = g_strdup_printf ("/org/gnome/control-center/user-accounts/%s.png", data->finger);
-                }
-                for (i = 1; i <= data->num_enroll_stages; i++) {
-                        GtkWidget *image;
-                        GtkFlowBoxChild *child;
-
-                        child = gtk_flow_box_get_child_at_index (GTK_FLOW_BOX (enroll_flowbox), i-1);
-                        if (child) {
-                                image = gtk_bin_get_child (GTK_BIN (child));
-                                gtk_image_set_from_resource (GTK_IMAGE (image), path);
-                        } else {
-                                child = GTK_FLOW_BOX_CHILD (gtk_flow_box_child_new ());
-                                image = gtk_image_new_from_resource (path);
-                                gtk_widget_set_can_focus (GTK_WIDGET (child), FALSE);
-                                gtk_container_add (GTK_CONTAINER (child), image);
-                                gtk_container_add (GTK_CONTAINER (enroll_flowbox), GTK_WIDGET (child));
-                                gtk_widget_show_all (GTK_WIDGET (child));
-                        }
-                }
-                g_free (path);
-
-                g_signal_handlers_disconnect_by_func (data->device, device_signal_cb, data);
-                g_signal_connect (data->device, "g-signal", G_CALLBACK (device_signal_cb), data);
-
-                if (!enroll_start (data, &error)) {
-                        GtkWidget *d;
-                        char *msg;
-
-                        /* translators:
-                         * The variable is the name of the device, for example:
-                         * "Could you not access "Digital Persona U.are.U 4000/4000B" device */
-                        msg = g_strdup_printf (_("Could not start finger capture on â%sâ device"), data->name);
-                        d = get_error_dialog (msg, error->message, GTK_WINDOW (data->ass));
-                        g_error_free (error);
-                        gtk_dialog_run (GTK_DIALOG (d));
-                        gtk_widget_destroy (d);
-                        g_free (msg);
-
-                        enroll_data_destroy (data);
-
-                        return;
-                }
-                data->num_stages_done = 0;
-                data->state = STATE_ENROLLING;;
-        } else {
-                if (data->state == STATE_ENROLLING) {
-                        enroll_stop (data, NULL);
-                        data->state = STATE_CLAIMED;
-                }
-                if (data->state == STATE_CLAIMED) {
-                        release (data, NULL);
-                        data->state = STATE_NONE;
-                }
-        }
-}
-
-static void
-enroll_fingerprints (GtkWindow    *parent,
-                     GtkWidget    *fingerprint_row,
-                     GtkLabel     *state_label,
-                     ActUser      *user,
-                     GCancellable *cancellable)
-{
-        GDBusProxy *device = NULL;
-        GtkBuilder *dialog;
-        EnrollData *data;
-        GtkWidget *ass;
-        char *msg;
-        GVariant *result;
-        GError *error = NULL;
-
-        ensure_manager (cancellable);
-        if (manager != NULL)
-                device = get_first_device (cancellable);
-
-        if (manager == NULL || device == NULL) {
-                GtkWidget *d;
-
-                d = get_error_dialog (_("Could not access any fingerprint readers"),
-                                      _("Please contact your system administrator for help."),
-                                      parent);
-                gtk_dialog_run (GTK_DIALOG (d));
-                gtk_widget_destroy (d);
-                return;
-        }
-
-        data = g_new0 (EnrollData, 1);
-        data->device = device;
-        data->cancellable = g_object_ref (cancellable);
-        data->fingerprint_row = fingerprint_row;
-        data->state_label = state_label;
-
-        /* Get some details about the device */
-        result = g_dbus_connection_call_sync (connection,
-                                              "net.reactivated.Fprint",
-                                              g_dbus_proxy_get_object_path (data->device),
-                                              "org.freedesktop.DBus.Properties",
-                                              "GetAll",
-                                              g_variant_new ("(s)", "net.reactivated.Fprint.Device"),
-                                              G_VARIANT_TYPE ("(a{sv})"),
-                                              G_DBUS_CALL_FLAGS_NONE,
-                                              -1,
-                                              cancellable,
-                                              NULL);
-        if (result) {
-                GVariant *props;
-                gchar *scan_type;
-
-                g_variant_get (result, "(@a{sv})", &props);
-                g_variant_lookup (props, "name", "s", &data->name);
-                g_variant_lookup (props, "scan-type", "s", &scan_type);
-                if (g_strcmp0 (scan_type, "swipe") == 0)
-                        data->is_swipe = TRUE;
-                g_free (scan_type);
-                g_variant_unref (props);
-                g_variant_unref (result);
-        }
-
-        dialog = gtk_builder_new ();
-        if (!gtk_builder_add_from_resource (dialog,
-                                            "/org/gnome/control-center/user-accounts/account-fingerprint.ui",
-                                            &error)) {
-                g_error ("%s", error->message);
-                g_error_free (error);
-                return;
-        }
-        data->dialog = dialog;
-
-        ass = WID ("assistant");
-        gtk_window_set_title (GTK_WINDOW (ass), _("Enable Fingerprint Login"));
-        gtk_window_set_transient_for (GTK_WINDOW (ass), parent);
-        gtk_window_set_modal (GTK_WINDOW (ass), TRUE);
-        gtk_window_set_resizable (GTK_WINDOW (ass), FALSE);
-        gtk_window_set_type_hint (GTK_WINDOW (ass), GDK_WINDOW_TYPE_HINT_DIALOG);
-
-        g_signal_connect (G_OBJECT (ass), "cancel",
-                          G_CALLBACK (assistant_cancelled), data);
-        g_signal_connect (G_OBJECT (ass), "close",
-                          G_CALLBACK (assistant_cancelled), data);
-        g_signal_connect (G_OBJECT (ass), "prepare",
-                          G_CALLBACK (assistant_prepare), data);
-
-        /* Page 1 */
-        gtk_combo_box_set_active (GTK_COMBO_BOX (WID ("finger_combobox")), 0);
-
-        g_signal_connect (G_OBJECT (WID ("radiobutton1")), "toggled",
-                          G_CALLBACK (finger_radio_button_toggled), data);
-        g_signal_connect (G_OBJECT (WID ("radiobutton2")), "toggled",
-                          G_CALLBACK (finger_radio_button_toggled), data);
-        g_signal_connect (G_OBJECT (WID ("radiobutton3")), "toggled",
-                          G_CALLBACK (finger_radio_button_toggled), data);
-        g_signal_connect (G_OBJECT (WID ("finger_combobox")), "changed",
-                          G_CALLBACK (finger_combobox_changed), data);
-
-        data->finger = selected_finger (dialog);
-
-        g_object_set_data (G_OBJECT (WID("page1")), "name", "intro");
-
-        /* translators:
-         * The variable is the name of the device, for example:
-         * "To enable fingerprint login, you need to save one of your fingerprints, using the
-         * 'Digital Persona U.are.U 4000/4000B' device."
-         */
-        msg = g_strdup_printf (_("To enable fingerprint login, you need to save one of your fingerprints, using the â%sâ device."),
-                               data->name);
-        gtk_label_set_text (GTK_LABEL (WID("intro-label")), msg);
-        g_free (msg);
-
-        gtk_assistant_set_page_complete (GTK_ASSISTANT (ass), WID("page1"), TRUE);
-
-        gtk_assistant_set_page_title (GTK_ASSISTANT (ass), WID("page1"), _("Selecting finger"));
-        gtk_assistant_set_page_title (GTK_ASSISTANT (ass), WID("page2"), _("Enrolling fingerprints"));
-        gtk_assistant_set_page_title (GTK_ASSISTANT (ass), WID("page3"), _("Summary"));
-
-        /* Page 2 */
-        g_object_set_data (G_OBJECT (WID("page2")), "name", "enroll");
-
-        msg = finger_str_to_msg (data->finger, data->name, data->is_swipe);
-        gtk_label_set_text (GTK_LABEL (WID("enroll-label")), msg);
-        g_free (msg);
-
-        /* Page 3 */
-        g_object_set_data (G_OBJECT (WID("page3")), "name", "summary");
-
-        data->ass = ass;
-        gtk_widget_show (ass);
-}
-
-void
-fingerprint_button_clicked (GtkWindow    *parent,
-                            GtkWidget    *fingerprint_row,
-                            GtkLabel     *state_label,
-                            ActUser      *user,
-                            GCancellable *cancellable)
-{
-        bindtextdomain ("fprintd", GNOMELOCALEDIR);
-        bind_textdomain_codeset ("fprintd", "UTF-8");
-
-        if (is_disable != FALSE) {
-                delete_fingerprints_question (parent, fingerprint_row,
-                                              state_label, user, cancellable);
-        } else {
-                enroll_fingerprints (parent, fingerprint_row, state_label, user,
-                                     cancellable);
-        }
-}
-
-#pragma GCC diagnostic pop
diff --git a/panels/user-accounts/um-fingerprint-dialog.h b/panels/user-accounts/um-fingerprint-dialog.h
deleted file mode 100644
index 09dbf51..0000000
--- a/panels/user-accounts/um-fingerprint-dialog.h
+++ /dev/null
@@ -1,30 +0,0 @@
-/* gnome-about-me-fingerprint.h
- * Copyright (C) 2008 Bastien Nocera <hadess@hadess.net>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, see <http://www.gnu.org/licenses/>.
- */
-
-#pragma once
-
-#include <gtk/gtk.h>
-#include <act/act.h>
-
-void set_fingerprint_row (GtkWidget    *fingerprint_row,
-                          GtkLabel     *state_label,
-                          GCancellable *cancellable);
-void fingerprint_button_clicked (GtkWindow    *parent,
-                                 GtkWidget    *fingerprint_row,
-                                 GtkLabel     *state_label,
-                                 ActUser      *user,
-                                 GCancellable *cancellable);
diff --git a/panels/user-accounts/user-accounts.gresource.xml b/panels/user-accounts/user-accounts.gresource.xml
index 3510807..fcd1a7f 100644
--- a/panels/user-accounts/user-accounts.gresource.xml
+++ b/panels/user-accounts/user-accounts.gresource.xml
@@ -7,21 +7,16 @@
     <file preprocess="xml-stripblanks">cc-login-history-dialog.ui</file>
     <file preprocess="xml-stripblanks">cc-password-dialog.ui</file>
     <file preprocess="xml-stripblanks">cc-user-panel.ui</file>
+    <file preprocess="xml-stripblanks">cc-fingerprint-dialog.ui</file>
     <file alias="join-dialog.ui" preprocess="xml-stripblanks">data/join-dialog.ui</file>
-    <file alias="account-fingerprint.ui" preprocess="xml-stripblanks">data/account-fingerprint.ui</file>
     <file alias="user-accounts-dialog.css">data/user-accounts-dialog.css</file>
     <file alias="carousel.css">data/carousel.css</file>
-    <file alias="left-index-finger.png">data/icons/left-index-finger.png</file>
-    <file alias="left-middle-finger.png">data/icons/left-middle-finger.png</file>
-    <file alias="left-little-finger.png">data/icons/left-little-finger.png</file>
-    <file alias="left-ring-finger.png">data/icons/left-ring-finger.png</file>
-    <file alias="left-thumb.png">data/icons/left-thumb.png</file>
-    <file alias="print_error.png">data/icons/print_error.png</file>
-    <file alias="print_ok.png">data/icons/print_ok.png</file>
-    <file alias="right-index-finger.png">data/icons/right-index-finger.png</file>
-    <file alias="right-middle-finger.png">data/icons/right-middle-finger.png</file>
-    <file alias="right-little-finger.png">data/icons/right-little-finger.png</file>
-    <file alias="right-ring-finger.png">data/icons/right-ring-finger.png</file>
-    <file alias="right-thumb.png">data/icons/right-thumb.png</file>
+    <file alias="cc-fingerprint-dialog.css">data/cc-fingerprint-dialog.css</file>
+  </gresource>
+
+  <gresource prefix="/org/gnome/ControlCenter/icons/scalable/status">
+    <file preprocess="xml-stripblanks" alias="fingerprint-detection-complete-symbolic.svg">data/icons/fingerprint-detection-complete-symbolic.svg</file>
+    <file preprocess="xml-stripblanks" alias="fingerprint-detection-symbolic.svg">data/icons/fingerprint-detection-symbolic.svg</file>
+    <file preprocess="xml-stripblanks" alias="fingerprint-detection-warning-symbolic.svg">data/icons/fingerprint-detection-warning-symbolic.svg</file>
   </gresource>
 </gresources>
diff --git a/po/POTFILES.in b/po/POTFILES.in
index e58a1be..33b121b 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -221,6 +221,8 @@ panels/user-accounts/cc-add-user-dialog.c
 panels/user-accounts/cc-add-user-dialog.ui
 panels/user-accounts/cc-avatar-chooser.c
 panels/user-accounts/cc-avatar-chooser.ui
+panels/user-accounts/cc-fingerprint-dialog.ui
+panels/user-accounts/cc-fingerprint-dialog.c
 panels/user-accounts/cc-login-history-dialog.c
 panels/user-accounts/cc-login-history-dialog.ui
 panels/user-accounts/cc-password-dialog.c
@@ -228,13 +230,11 @@ panels/user-accounts/cc-password-dialog.ui
 panels/user-accounts/cc-realm-manager.c
 panels/user-accounts/cc-user-panel.c
 panels/user-accounts/cc-user-panel.ui
-panels/user-accounts/data/account-fingerprint.ui
 panels/user-accounts/data/gnome-user-accounts-panel.desktop.in.in
 panels/user-accounts/data/join-dialog.ui
 panels/user-accounts/org.gnome.controlcenter.user-accounts.policy.in
 panels/user-accounts/pw-utils.c
 panels/user-accounts/run-passwd.c
-panels/user-accounts/um-fingerprint-dialog.c
 panels/user-accounts/user-utils.c
 panels/wacom/button-mapping.ui
 panels/wacom/calibrator/calibrator.ui
