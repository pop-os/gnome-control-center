Index: gnome-control-center/panels/firmware/gnome-firmware-panel.desktop.in.in
===================================================================
--- /dev/null
+++ gnome-control-center/panels/firmware/gnome-firmware-panel.desktop.in.in
@@ -0,0 +1,16 @@
+[Desktop Entry]
+Name=Firmware
+Comment=View and update system and device firmware
+Exec=gnome-control-center firmware
+# Translators: Do NOT translate or transliterate this text (this is an icon file name)!
+Icon=firmware-manager
+Terminal=false
+Type=Application
+NoDisplay=true
+StartupNotify=true
+Categories=GNOME;GTK;Settings;X-GNOME-Settings-Panel;HardwareSettings;X-GNOME-DevicesSettings;
+OnlyShowIn=GNOME;Unity;
+# Translators: Search terms to find the Firmware panel. Do NOT translate or localize the semicolons! The list MUST also end with a semicolon!
+Keywords=Firmware;System76
+# Notifications are emitted by gnome-settings-daemon
+X-GNOME-UsesNotifications=true
\ No newline at end of file
Index: gnome-control-center/panels/firmware/meson.build
===================================================================
--- /dev/null
+++ gnome-control-center/panels/firmware/meson.build
@@ -0,0 +1,39 @@
+panels_list += cappletname
+desktop = 'gnome-@0@-panel.desktop'.format(cappletname)
+
+desktop_in = configure_file(
+          input : desktop + '.in.in',
+         output : desktop + '.in',
+  configuration : desktop_conf
+)
+
+i18n.merge_file(
+       desktop,
+          type : 'desktop',
+         input : desktop_in,
+        output : desktop,
+        po_dir : po_dir,
+       install : true,
+   install_dir : control_center_desktopdir
+)
+
+sources = files('cc-firmware-panel.c')
+
+deps = common_deps + [
+  gnome_desktop_dep,
+  m_dep,
+  dependency('firmware_manager')
+]
+
+cflags += [
+  '-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir),
+  '-DBINDIR="@0@"'.format(control_center_bindir)
+]
+
+panels_libs += static_library(
+  cappletname,
+  sources: sources,
+  include_directories: [ top_inc, common_inc ],
+  dependencies: deps,
+  c_args: cflags
+)
\ No newline at end of file
Index: gnome-control-center/panels/meson.build
===================================================================
--- gnome-control-center.orig/panels/meson.build
+++ gnome-control-center/panels/meson.build
@@ -6,6 +6,7 @@ panels = [
   'color',
   'datetime',
   'display',
+  'firmware',
   'info',
   'keyboard',
   'mouse',
Index: gnome-control-center/panels/firmware/cc-firmware-panel.c
===================================================================
--- /dev/null
+++ gnome-control-center/panels/firmware/cc-firmware-panel.c
@@ -0,0 +1,60 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2019 System76
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <config.h>
+#include <gtk/gtk.h>
+#include <firmware_manager.h>
+
+#include "cc-firmware-panel.h"
+
+struct _CcFirmwarePanel {
+    CcPanel parent_instance;
+    S76FirmwareWidget *firmware;
+};
+
+CC_PANEL_REGISTER (CcFirmwarePanel, cc_firmware_panel)
+
+static void cc_firmware_panel_dispose (GObject *object) {
+    CcFirmwarePanel *prefs = CC_FIRMWARE_PANEL (object);
+
+    g_clear_pointer (&prefs->firmware, s76_firmware_widget_free);
+
+    G_OBJECT_CLASS (cc_firmware_panel_parent_class)->dispose (object);
+}
+
+static void cc_firmware_panel_finalize (GObject *object) {
+    G_OBJECT_CLASS (cc_firmware_panel_parent_class)->finalize (object);
+}
+
+static void cc_firmware_panel_class_init (CcFirmwarePanelClass *klass) {
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    object_class->dispose = cc_firmware_panel_dispose;
+    object_class->finalize = cc_firmware_panel_finalize;
+}
+
+static void cc_firmware_panel_init (CcFirmwarePanel *prefs) {
+    prefs->firmware = s76_firmware_widget_new ();
+    s76_firmware_widget_scan (prefs->firmware);
+
+    gtk_container_add (
+        GTK_CONTAINER (prefs),
+        s76_firmware_widget_container (prefs->firmware)
+    );
+}
\ No newline at end of file
Index: gnome-control-center/shell/cc-panel-list.c
===================================================================
--- gnome-control-center.orig/shell/cc-panel-list.c
+++ gnome-control-center/shell/cc-panel-list.c
@@ -402,6 +402,7 @@ static const gchar * const panel_order[]
   "thunderbolt",
   "wacom",
   "color",
+  "firmware",
 
   /* Details page */
   "info-overview",
Index: gnome-control-center/shell/cc-panel-loader.c
===================================================================
--- gnome-control-center.orig/shell/cc-panel-loader.c
+++ gnome-control-center/shell/cc-panel-loader.c
@@ -39,6 +39,7 @@ extern GType cc_bluetooth_panel_get_type
 extern GType cc_color_panel_get_type (void);
 extern GType cc_date_time_panel_get_type (void);
 extern GType cc_display_panel_get_type (void);
+extern GType cc_firmware_panel_get_type (void);
 extern GType cc_info_overview_panel_get_type (void);
 extern GType cc_info_default_apps_panel_get_type (void);
 extern GType cc_info_removable_media_panel_get_type (void);
@@ -93,6 +94,7 @@ static CcPanelLoaderVtable default_panel
   PANEL_TYPE("color",            cc_color_panel_get_type,                NULL),
   PANEL_TYPE("datetime",         cc_date_time_panel_get_type,            NULL),
   PANEL_TYPE("display",          cc_display_panel_get_type,              NULL),
+  PANEL_TYPE("firmware",         cc_firmware_panel_get_type,             NULL),
   PANEL_TYPE("info-overview",    cc_info_overview_panel_get_type,        NULL),
   PANEL_TYPE("default-apps",     cc_info_default_apps_panel_get_type,    NULL),
   PANEL_TYPE("removable-media",  cc_info_removable_media_panel_get_type, NULL),
Index: gnome-control-center/panels/firmware/cc-firmware-panel.h
===================================================================
--- /dev/null
+++ gnome-control-center/panels/firmware/cc-firmware-panel.h
@@ -0,0 +1,29 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
+ *
+ * Copyright (C) 2019 System76
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#pragma once
+
+#include <shell/cc-panel.h>
+
+G_BEGIN_DECLS
+
+#define CC_TYPE_FIRMWARE_PANEL (cc_firmware_panel_get_type ())
+G_DECLARE_FINAL_TYPE (CcFirmwarePanel, cc_firmware_panel, CC, FIRMWARE_PANEL, CcPanel)
+
+G_END_DECLS
